{"version":3,"file":"thehelp-test-coverage.min.js","sources":["lib/vendor/falafel.js","lib/vendor/blanket.js","lib/vendor/blanket-require.js","thehelp-test-coverage.js"],"names":[],"mappings":"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","sourcesContent":["!function(e){\"object\"==typeof exports?module.exports=e():\"function\"==typeof define&&define.amd?define('falafel',e):\"undefined\"!=typeof window?window.falafel=e():\"undefined\"!=typeof global?global.falafel=e():\"undefined\"!=typeof self&&(self.falafel=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    // if (typeof define === 'function' && define.amd) {\n    //     define(['exports'], factory);\n    // } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    // } else {\n    //     factory((root.esprima = {}));\n    // }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = source[index++];\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += source[index++];\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += source[index++];\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += source[index++];\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction([]),\n                        kind: 'set'\n                    };\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction(param, token),\n                        kind: 'set'\n                    };\n                }\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n\n    function parseLeftHandSideExpression() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall(), token;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator) {\n            return expr;\n        }\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPostfix);\n            }\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return parsePostfixExpression();\n        }\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, expr;\n\n        token = lookahead();\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead());\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            guardedHandlers: [],\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function createLocationMarker() {\n        var marker = {};\n\n        marker.range = [index, index];\n        marker.loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            },\n            end: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        marker.end = function () {\n            this.range[1] = index;\n            this.loc.end.line = lineNumber;\n            this.loc.end.column = index - lineStart;\n        };\n\n        marker.applyGroup = function (node) {\n            if (extra.range) {\n                node.groupRange = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.groupLoc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        marker.apply = function (node) {\n            if (extra.range) {\n                node.range = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        return marker;\n    }\n\n    function trackGroupExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        marker.end();\n        marker.applyGroup(expr);\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpressionAllowCall() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function filterGroup(node) {\n        var n, i, entry;\n\n        n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};\n        for (i in node) {\n            if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {\n                entry = node[i];\n                if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {\n                    n[i] = entry;\n                } else {\n                    n[i] = filterGroup(entry);\n                }\n            }\n        }\n        return n;\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                var start, end;\n\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range) {\n                    if (node.left.groupRange || node.right.groupRange) {\n                        start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];\n                        end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];\n                        node.range = [start, end];\n                    } else if (typeof node.range === 'undefined') {\n                        start = node.left.range[0];\n                        end = node.right.range[1];\n                        node.range = [start, end];\n                    }\n                }\n                if (loc) {\n                    if (node.left.groupLoc || node.right.groupLoc) {\n                        start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;\n                        end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;\n                        node.loc = {\n                            start: start,\n                            end: end\n                        };\n                    } else if (typeof node.loc === 'undefined') {\n                        node.loc = {\n                            start: node.left.loc.start,\n                            end: node.right.loc.end\n                        };\n                    }\n                }\n            }\n\n            return function () {\n                var marker, node;\n\n                skipComment();\n\n                marker = createLocationMarker();\n                node = parseFunction.apply(null, arguments);\n                marker.end();\n\n                if (range && typeof node.range === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (loc && typeof node.loc === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (isBinary(node)) {\n                    visit(node);\n                }\n\n                return node;\n            };\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            extra.parseGroupExpression = parseGroupExpression;\n            extra.parseLeftHandSideExpression = parseLeftHandSideExpression;\n            extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;\n            parseGroupExpression = trackGroupExpression;\n            parseLeftHandSideExpression = trackLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGroupExpression = extra.parseGroupExpression;\n            parseLeftHandSideExpression = extra.parseLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n            if (extra.range || extra.loc) {\n                program.body = filterGroup(program.body);\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.4';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n},{}],2:[function(require,module,exports){\nvar parse = require('esprima').parse;\nvar objectKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    return keys;\n};\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn);\n    for (var i = 0; i < xs.length; i++) {\n        fn.call(xs, xs[i], i, xs);\n    }\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nmodule.exports = function (src, opts, fn) {\n    if (typeof opts === 'function') {\n        fn = opts;\n        opts = {};\n    }\n    if (typeof src === 'object') {\n        opts = src;\n        src = opts.source;\n        delete opts.source;\n    }\n    src = src === undefined ? opts.source : src;\n    opts.range = true;\n    if (typeof src !== 'string') src = String(src);\n    \n    var ast = parse(src, opts);\n    \n    var result = {\n        chunks : src.split(''),\n        toString : function () { return result.chunks.join('') },\n        inspect : function () { return result.toString() }\n    };\n    var index = 0;\n    \n    (function walk (node, parent) {\n        insertHelpers(node, parent, result.chunks);\n        \n        forEach(objectKeys(node), function (key) {\n            if (key === 'parent') return;\n            \n            var child = node[key];\n            if (isArray(child)) {\n                forEach(child, function (c) {\n                    if (c && typeof c.type === 'string') {\n                        walk(c, node);\n                    }\n                });\n            }\n            else if (child && typeof child.type === 'string') {\n                insertHelpers(child, node, result.chunks);\n                walk(child, node);\n            }\n        });\n        fn(node);\n    })(ast, undefined);\n    \n    return result;\n};\n \nfunction insertHelpers (node, parent, chunks) {\n    if (!node.range) return;\n    \n    node.parent = parent;\n    \n    node.source = function () {\n        return chunks.slice(\n            node.range[0], node.range[1]\n        ).join('');\n    };\n    \n    if (node.update && typeof node.update === 'object') {\n        var prev = node.update;\n        forEach(objectKeys(prev), function (key) {\n            update[key] = prev[key];\n        });\n        node.update = update;\n    }\n    else {\n        node.update = update;\n    }\n    \n    function update (s) {\n        chunks[node.range[0]] = s;\n        for (var i = node.range[0] + 1; i < node.range[1]; i++) {\n            chunks[i] = '';\n        }\n    };\n}\n\n},{\"esprima\":1}]},{},[2])\n(2)\n});\n;\n","var inBrowser = typeof window !== 'undefined' && this === window;\n\n(inBrowser ? window : exports).blanket = (function(){\n    var linesToAddTracking = [\n        \"ExpressionStatement\",\n        \"BreakStatement\"   ,\n        \"ContinueStatement\" ,\n        \"VariableDeclaration\",\n        \"ReturnStatement\"   ,\n        \"ThrowStatement\"   ,\n        \"TryStatement\"     ,\n        \"FunctionDeclaration\"    ,\n        \"IfStatement\"       ,\n        \"WhileStatement\"    ,\n        \"DoWhileStatement\"   ,\n        \"ForStatement\"   ,\n        \"ForInStatement\"  ,\n        \"SwitchStatement\"  ,\n        \"WithStatement\"\n    ],\n    linesToAddBrackets = [\n        \"IfStatement\"       ,\n        \"WhileStatement\"    ,\n        \"DoWhileStatement\"     ,\n        \"ForStatement\"   ,\n        \"ForInStatement\"  ,\n        \"WithStatement\"\n    ],\n    __blanket,\n    copynumber = Math.floor(Math.random()*1000),\n    coverageInfo = {},options = {\n        reporter: null,\n        adapter:null,\n        filter: null,\n        customVariable: null,\n        loader: null,\n        ignoreScriptError: false,\n        existingRequireJS:false,\n        autoStart: false,\n        timeout: 180,\n        ignoreCors: false,\n        branchTracking: false,\n        sourceURL: false,\n        debug:false,\n        engineOnly:false,\n        testReadyCallback:null,\n        commonJS:false,\n        instrumentCache:false,\n        modulePattern: null\n    };\n    \n    if (inBrowser && typeof window.blanket !== 'undefined'){\n        __blanket = window.blanket.noConflict();\n    }\n    \n    _blanket = {\n        noConflict: function(){\n            if (__blanket){\n                return __blanket;\n            }\n            return _blanket;\n        },\n        _getCopyNumber: function(){\n            //internal method\n            //for differentiating between instances\n            return copynumber;\n        },\n        extend: function(obj) {\n            //borrowed from underscore\n            _blanket._extend(_blanket,obj);\n        },\n        _extend: function(dest,source){\n          if (source) {\n            for (var prop in source) {\n              if ( dest[prop] instanceof Object && typeof dest[prop] !== \"function\"){\n                _blanket._extend(dest[prop],source[prop]);\n              }else{\n                  dest[prop] = source[prop];\n              }\n            }\n          }\n        },\n        getCovVar: function(){\n            var opt = _blanket.options(\"customVariable\");\n            if (opt){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Using custom tracking variable:\",opt);}\n                return inBrowser ? \"window.\"+opt : opt;\n            }\n            return inBrowser ?   \"window._$blanket\" : \"_$jscoverage\";\n        },\n        options: function(key,value){\n            if (typeof key !== \"string\"){\n                _blanket._extend(options,key);\n            }else if (typeof value === 'undefined'){\n                return options[key];\n            }else{\n                options[key]=value;\n            }\n        },\n        parseAndModify: (inBrowser ? window.falafel : require(\"falafel\")),\n        instrument: function(config, next){\n            //check instrumented hash table,\n            //return instrumented code if available.\n            var inFile = config.inputFile,\n                inFileName = config.inputFileName;\n\n            if (!inBrowser) {\n                var cwd = process.cwd();\n                inFileName = inFileName.replace(cwd, '');\n            }\n\n            //check instrument cache\n           if (_blanket.options(\"instrumentCache\") && sessionStorage && sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Reading instrumentation from cache: \",inFileName);}\n                next(sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName));\n            }else{\n                var sourceArray = _blanket._prepareSource(inFile);\n                _blanket._trackingArraySetup=[];\n                var instrumented = _blanket.parseAndModify(inFile,{loc:true,comment:true}, _blanket._addTracking(inFileName));\n                instrumented = _blanket._trackingSetup(inFileName,sourceArray)+instrumented;\n                if (_blanket.options(\"sourceURL\")){\n                    instrumented += \"\\n//@ sourceURL=\"+inFileName.replace(\"http://\",\"\");\n                }\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Instrumented file: \",inFileName);}\n                if (_blanket.options(\"instrumentCache\") && sessionStorage){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Saving instrumentation to cache: \",inFileName);}\n                    sessionStorage.setItem(\"blanket_instrument_store-\"+inFileName,instrumented);\n                }\n                next(instrumented);\n            }\n        },\n        _trackingArraySetup: [],\n        _branchingArraySetup: [],\n        _prepareSource: function(source){\n            return source.replace(/\\\\/g,\"\\\\\\\\\").replace(/'/g,\"\\\\'\").replace(/(\\r\\n|\\n|\\r)/gm,\"\\n\").split('\\n');\n        },\n        _trackingSetup: function(filename,sourceArray){\n            var branches = _blanket.options(\"branchTracking\");\n            var sourceString = sourceArray.join(\"',\\n'\");\n            var intro = \"\";\n            var covVar = _blanket.getCovVar();\n\n            intro += \"if (typeof \"+covVar+\" === 'undefined') \"+covVar+\" = {};\\n\";\n            if (branches){\n                intro += \"var _$branchFcn=function(f,l,c,r){ \";\n                intro += \"if (!!r) { \";\n                intro += covVar+\"[f].branchData[l][c][0] = \"+covVar+\"[f].branchData[l][c][0] || [];\";\n                intro += covVar+\"[f].branchData[l][c][0].push(r); }\";\n                intro += \"else { \";\n                intro += covVar+\"[f].branchData[l][c][1] = \"+covVar+\"[f].branchData[l][c][1] || [];\";\n                intro += covVar+\"[f].branchData[l][c][1].push(r); }\";\n                intro += \"return r;};\\n\";\n            }\n            intro += \"if (typeof \"+covVar+\"['\"+filename+\"'] === 'undefined'){\";\n\n            intro += covVar+\"['\"+filename+\"']=[];\\n\";\n            if (branches){\n                intro += covVar+\"['\"+filename+\"'].branchData=[];\\n\";\n            }\n            intro += covVar+\"['\"+filename+\"'].source=['\"+sourceString+\"'];\\n\";\n            //initialize array values\n            _blanket._trackingArraySetup.sort(function(a,b){\n                return parseInt(a,10) > parseInt(b,10);\n            }).forEach(function(item){\n                intro += covVar+\"['\"+filename+\"'][\"+item+\"]=0;\\n\";\n            });\n            if (branches){\n                _blanket._branchingArraySetup.sort(function(a,b){\n                    return a.line > b.line;\n                }).sort(function(a,b){\n                    return a.column > b.column;\n                }).forEach(function(item){\n                    if (item.file === filename){\n                        intro += \"if (typeof \"+ covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"] === 'undefined'){\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"]=[];\\n\";\n                        intro += \"}\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"] = [];\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"].consequent = \"+JSON.stringify(item.consequent)+\";\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"].alternate = \"+JSON.stringify(item.alternate)+\";\\n\";\n                    }\n                });\n            }\n            intro += \"}\";\n\n            return intro;\n        },\n        _blockifyIf: function(node){\n            if (linesToAddBrackets.indexOf(node.type) > -1){\n                var bracketsExistObject = node.consequent || node.body;\n                var bracketsExistAlt = node.alternate;\n                if( bracketsExistAlt && bracketsExistAlt.type !== \"BlockStatement\") {\n                    bracketsExistAlt.update(\"{\\n\"+bracketsExistAlt.source()+\"}\\n\");\n                }\n                if( bracketsExistObject && bracketsExistObject.type !== \"BlockStatement\") {\n                    bracketsExistObject.update(\"{\\n\"+bracketsExistObject.source()+\"}\\n\");\n                }\n            }\n        },\n        _trackBranch: function(node,filename){\n            //recursive on consequent and alternative\n            var line = node.loc.start.line;\n            var col = node.loc.start.column;\n\n            _blanket._branchingArraySetup.push({\n                line: line,\n                column: col,\n                file:filename,\n                consequent: node.consequent.loc,\n                alternate: node.alternate.loc\n            });\n\n            var source = node.source();\n            var updated = \"_$branchFcn\"+\n                          \"('\"+filename+\"',\"+line+\",\"+col+\",\"+source.slice(0,source.indexOf(\"?\"))+\n                          \")\"+source.slice(source.indexOf(\"?\"));\n            node.update(updated);\n        },\n        _addTracking: function (filename) {\n            //falafel doesn't take a file name\n            //so we include the filename in a closure\n            //and return the function to falafel\n            var covVar = _blanket.getCovVar();\n\n            return function(node){\n                _blanket._blockifyIf(node);\n\n                if (linesToAddTracking.indexOf(node.type) > -1 && node.parent.type !== \"LabeledStatement\") {\n                    _blanket._checkDefs(node,filename);\n                    if (node.type === \"VariableDeclaration\" &&\n                        (node.parent.type === \"ForStatement\" || node.parent.type === \"ForInStatement\")){\n                        return;\n                    }\n                    if (node.loc && node.loc.start){\n                        node.update(covVar+\"['\"+filename+\"'][\"+node.loc.start.line+\"]++;\\n\"+node.source());\n                        _blanket._trackingArraySetup.push(node.loc.start.line);\n                    }else{\n                        //I don't think we can handle a node with no location\n                        throw new Error(\"The instrumenter encountered a node with no location: \"+Object.keys(node));\n                    }\n                }else if (_blanket.options(\"branchTracking\") && node.type === \"ConditionalExpression\"){\n                    _blanket._trackBranch(node,filename);\n                }\n            };\n        },\n        _checkDefs: function(node,filename){\n            // Make sure developers don't redefine window. if they do, inform them it is wrong.\n            if (inBrowser){\n                if (node.type === \"VariableDeclaration\" && node.declarations) {\n                    node.declarations.forEach(function(declaration) {\n                        if (declaration.id.name === \"window\") {\n                            throw new Error(\"Instrumentation error, you cannot redefine the 'window' variable in  \" + filename + \":\" + node.loc.start.line);\n                        }\n                    });\n                }\n                if (node.type === \"FunctionDeclaration\" && node.params) {\n                    node.params.forEach(function(param) {\n                        if (param.name === \"window\") {\n                            throw new Error(\"Instrumentation error, you cannot redefine the 'window' variable in  \" + filename + \":\" + node.loc.start.line);\n                        }\n                    });\n                }\n                //Make sure developers don't redefine the coverage variable\n                if (node.type === \"ExpressionStatement\" &&\n                    node.expression && node.expression.left &&\n                    node.expression.left.object && node.expression.left.property &&\n                    node.expression.left.object.name +\n                        \".\" + node.expression.left.property.name === _blanket.getCovVar()) {\n                    throw new Error(\"Instrumentation error, you cannot redefine the coverage variable in  \" + filename + \":\" + node.loc.start.line);\n                }\n            }else{\n                //Make sure developers don't redefine the coverage variable in node\n                if (node.type === \"ExpressionStatement\" &&\n                    node.expression && node.expression.left &&\n                    !node.expression.left.object && !node.expression.left.property &&\n                    node.expression.left.name === _blanket.getCovVar()) {\n                    throw new Error(\"Instrumentation error, you cannot redefine the coverage variable in  \" + filename + \":\" + node.loc.start.line);\n                }\n            }\n        },\n        setupCoverage: function(){\n            coverageInfo.instrumentation = \"blanket\";\n            coverageInfo.stats = {\n                \"suites\": 0,\n                \"tests\": 0,\n                \"passes\": 0,\n                \"pending\": 0,\n                \"failures\": 0,\n                \"start\": new Date()\n            };\n        },\n        _checkIfSetup: function(){\n            if (!coverageInfo.stats){\n                throw new Error(\"You must call blanket.setupCoverage() first.\");\n            }\n        },\n        onTestStart: function(){\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Test event started\");}\n            this._checkIfSetup();\n            coverageInfo.stats.tests++;\n            coverageInfo.stats.pending++;\n        },\n        onTestDone: function(total,passed){\n            this._checkIfSetup();\n            if(passed === total){\n                coverageInfo.stats.passes++;\n            }else{\n                coverageInfo.stats.failures++;\n            }\n            coverageInfo.stats.pending--;\n        },\n        onModuleStart: function(){\n            this._checkIfSetup();\n            coverageInfo.stats.suites++;\n        },\n        onTestsDone: function(){\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Test event done\");}\n            this._checkIfSetup();\n            coverageInfo.stats.end = new Date();\n\n            if (inBrowser){\n                this.report(coverageInfo);\n            }else{\n                if (!_blanket.options(\"branchTracking\")){\n                    delete (inBrowser ? window : global)[_blanket.getCovVar()].branchFcn;\n                }\n                this.options(\"reporter\").call(this,coverageInfo);\n            }\n        }\n    };\n    return _blanket;\n})();\n(function(_blanket){\n    var oldOptions = _blanket.options;\n_blanket.extend({\n    outstandingRequireFiles:[],\n    options: function(key,value){\n        var newVal={};\n\n        if (typeof key !== \"string\"){\n            //key is key/value map\n            oldOptions(key);\n            newVal = key;\n        }else if (typeof value === 'undefined'){\n            //accessor\n            return oldOptions(key);\n        }else{\n            //setter\n            oldOptions(key,value);\n            newVal[key] = value;\n        }\n\n        if (newVal.adapter){\n            _blanket._loadFile(newVal.adapter);\n        }\n        if (newVal.loader){\n            _blanket._loadFile(newVal.loader);\n        }\n    },\n    requiringFile: function(filename,done){\n        if (typeof filename === \"undefined\"){\n            _blanket.outstandingRequireFiles=[];\n        }else if (typeof done === \"undefined\"){\n            _blanket.outstandingRequireFiles.push(filename);\n        }else{\n            _blanket.outstandingRequireFiles.splice(_blanket.outstandingRequireFiles.indexOf(filename),1);\n        }\n    },\n    requireFilesLoaded: function(){\n        return _blanket.outstandingRequireFiles.length === 0;\n    },\n    showManualLoader: function(){\n        if (document.getElementById(\"blanketLoaderDialog\")){\n            return;\n        }\n        //copied from http://blog.avtex.com/2012/01/26/cross-browser-css-only-modal-box/\n        var loader = \"<div class='blanketDialogOverlay'>\";\n            loader += \"&nbsp;</div>\";\n            loader += \"<div class='blanketDialogVerticalOffset'>\";\n            loader += \"<div class='blanketDialogBox'>\";\n            loader += \"<b>Error:</b> Blanket.js encountered a cross origin request error while instrumenting the source files.  \";\n            loader += \"<br><br>This is likely caused by the source files being referenced locally (using the file:// protocol). \";\n            loader += \"<br><br>Some solutions include <a href='http://askubuntu.com/questions/160245/making-google-chrome-option-allow-file-access-from-files-permanent' target='_blank'>starting Chrome with special flags</a>, <a target='_blank' href='https://github.com/remy/servedir'>running a server locally</a>, or using a browser without these CORS restrictions (Safari).\";\n            loader += \"<br>\";\n            if (typeof FileReader !== \"undefined\"){\n                loader += \"<br>Or, try the experimental loader.  When prompted, simply click on the directory containing all the source files you want covered.\";\n                loader += \"<a href='javascript:document.getElementById(\\\"fileInput\\\").click();'>Start Loader</a>\";\n                loader += \"<input type='file' type='application/x-javascript' accept='application/x-javascript' webkitdirectory id='fileInput' multiple onchange='window.blanket.manualFileLoader(this.files)' style='visibility:hidden;position:absolute;top:-50;left:-50'/>\";\n            }\n            loader += \"<br><span style='float:right;cursor:pointer;'  onclick=document.getElementById('blanketLoaderDialog').style.display='none';>Close</span>\";\n            loader += \"<div style='clear:both'></div>\";\n            loader += \"</div></div>\";\n\n        var css = \".blanketDialogWrapper {\";\n            css += \"display:block;\";\n            css += \"position:fixed;\";\n            css += \"z-index:40001; }\";\n\n            css += \".blanketDialogOverlay {\";\n            css += \"position:fixed;\";\n            css += \"width:100%;\";\n            css += \"height:100%;\";\n            css += \"background-color:black;\";\n            css += \"opacity:.5; \";\n            css += \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=50)'; \";\n            css += \"filter:alpha(opacity=50); \";\n            css += \"z-index:40001; }\";\n\n            css += \".blanketDialogVerticalOffset { \";\n            css += \"position:fixed;\";\n            css += \"top:30%;\";\n            css += \"width:100%;\";\n            css += \"z-index:40002; }\";\n\n            css += \".blanketDialogBox { \";\n            css += \"width:405px; \";\n            css += \"position:relative;\";\n            css += \"margin:0 auto;\";\n            css += \"background-color:white;\";\n            css += \"padding:10px;\";\n            css += \"border:1px solid black; }\";\n\n        var dom = document.createElement(\"style\");\n        dom.innerHTML = css;\n        document.head.appendChild(dom);\n\n        var div = document.createElement(\"div\");\n        div.id = \"blanketLoaderDialog\";\n        div.className = \"blanketDialogWrapper\";\n        div.innerHTML = loader;\n        document.body.insertBefore(div,document.body.firstChild);\n\n    },\n    manualFileLoader: function(files){\n        var toArray =Array.prototype.slice;\n        files = toArray.call(files).filter(function(item){\n            return item.type !== \"\";\n        });\n        var sessionLength = files.length-1;\n        var sessionIndx=0;\n        var sessionArray = {};\n        if (sessionStorage[\"blanketSessionLoader\"]){\n            sessionArray = JSON.parse(sessionStorage[\"blanketSessionLoader\"]);\n        }\n\n\n        var fileLoader = function(event){\n            var fileContent = event.currentTarget.result;\n            var file = files[sessionIndx];\n            var filename = file.webkitRelativePath && file.webkitRelativePath !== '' ? file.webkitRelativePath : file.name;\n            sessionArray[filename] = fileContent;\n            sessionIndx++;\n            if (sessionIndx === sessionLength){\n                sessionStorage.setItem(\"blanketSessionLoader\", JSON.stringify(sessionArray));\n                document.location.reload();\n            }else{\n                readFile(files[sessionIndx]);\n            }\n        };\n        function readFile(file){\n            var reader = new FileReader();\n            reader.onload = fileLoader;\n            reader.readAsText(file);\n        }\n        readFile(files[sessionIndx]);\n    },\n    _loadFile: function(path){\n        if (typeof path !== \"undefined\"){\n            var request = new XMLHttpRequest();\n            request.open('GET', path, false);\n            request.send();\n            _blanket._addScript(request.responseText);\n        }\n    },\n    _addScript: function(data){\n        var script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.text = data;\n        (document.body || document.getElementsByTagName('head')[0]).appendChild(script);\n    },\n    hasAdapter: function(callback){\n        return _blanket.options(\"adapter\") !== null;\n    },\n    report: function(coverage_data){\n        if (!document.getElementById(\"blanketLoaderDialog\")){\n            //all found, clear it\n            _blanket.blanketSession = null;\n        }\n        coverage_data.files = window._$blanket;\n        var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n\n        // Check if we have any covered files that requires reporting\n        // otherwise just exit gracefully.\n        if (!coverage_data.files || !Object.keys(coverage_data.files).length) {\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Reporting No files were instrumented.\");}\n            return;\n        }\n\n        if (typeof coverage_data.files.branchFcn !== \"undefined\"){\n            delete coverage_data.files.branchFcn;\n        }\n        if (typeof _blanket.options(\"reporter\") === \"string\"){\n            _blanket._loadFile(_blanket.options(\"reporter\"));\n            _blanket.customReporter(coverage_data,_blanket.options(\"reporter_options\"));\n        }else if (typeof _blanket.options(\"reporter\") === \"function\"){\n            _blanket.options(\"reporter\")(coverage_data);\n        }else if (typeof _blanket.defaultReporter === 'function'){\n            _blanket.defaultReporter(coverage_data);\n        }else{\n            throw new Error(\"no reporter defined.\");\n        }\n    },\n    _bindStartTestRunner: function(bindEvent,startEvent){\n        if (bindEvent){\n            bindEvent(startEvent);\n        }else{\n            window.addEventListener(\"load\",startEvent,false);\n        }\n    },\n    _loadSourceFiles: function(callback){\n        var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n        function copy(o){\n          var _copy = Object.create( Object.getPrototypeOf(o) );\n          var propNames = Object.getOwnPropertyNames(o);\n\n          propNames.forEach(function(name){\n            var desc = Object.getOwnPropertyDescriptor(o, name);\n            Object.defineProperty(_copy, name, desc);\n          });\n\n          return _copy;\n        }\n        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Collecting page scripts\");}\n        var scripts = _blanket.utils.collectPageScripts();\n        //_blanket.options(\"filter\",scripts);\n        if (scripts.length === 0){\n            callback();\n        }else{\n\n            //check session state\n            if (sessionStorage[\"blanketSessionLoader\"]){\n                _blanket.blanketSession = JSON.parse(sessionStorage[\"blanketSessionLoader\"]);\n            }\n            \n            scripts.forEach(function(file,indx){   \n                _blanket.utils.cache[file+\".js\"]={\n                    loaded:false\n                };\n            });\n            \n            var currScript=-1;\n            _blanket.utils.loadAll(function(test){\n                if (test){\n                  return typeof scripts[currScript+1] !== 'undefined';\n                }\n                currScript++;\n                if (currScript >= scripts.length){\n                  return null;\n                }\n                return scripts[currScript]+\".js\";\n            },callback);\n        }\n    },\n    beforeStartTestRunner: function(opts){\n        opts = opts || {};\n        opts.checkRequirejs = typeof opts.checkRequirejs === \"undefined\" ? true : opts.checkRequirejs;\n        opts.callback = opts.callback || function() {  };\n        opts.coverage = typeof opts.coverage === \"undefined\" ? true : opts.coverage;\n        if (opts.coverage) {\n            _blanket._bindStartTestRunner(opts.bindEvent,\n            function(){\n                _blanket._loadSourceFiles(function() {\n\n                    var allLoaded = function(){\n                        return opts.condition ? opts.condition() : _blanket.requireFilesLoaded();\n                    };\n                    var check = function() {\n                        if (allLoaded()) {\n                            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-All files loaded, init start test runner callback.\");}\n                            var cb = _blanket.options(\"testReadyCallback\");\n\n                            if (cb){\n                                if (typeof cb === \"function\"){\n                                    cb(opts.callback);\n                                }else if (typeof cb === \"string\"){\n                                    _blanket._addScript(cb);\n                                    opts.callback();\n                                }\n                            }else{\n                                opts.callback();\n                            }\n                        } else {\n                            setTimeout(check, 13);\n                        }\n                    };\n                    check();\n                });\n            });\n        }else{\n            opts.callback();\n        }\n    },\n    utils: {\n        qualifyURL: function (url) {\n            //http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n            var a = document.createElement('a');\n            a.href = url;\n            return a.href;\n        }\n    }\n});\n\n})(blanket);\n(function() {\r\n\r\n    if(!mocha) {\r\n        throw new Exception(\"mocha library does not exist in global namespace!\");\r\n    }\r\n\r\n\r\n    /*\r\n     * Mocha Events:\r\n     *\r\n     *   - `start`  execution started\r\n     *   - `end`  execution complete\r\n     *   - `suite`  (suite) test suite execution started\r\n     *   - `suite end`  (suite) all tests (and sub-suites) have finished\r\n     *   - `test`  (test) test execution started\r\n     *   - `test end`  (test) test completed\r\n     *   - `hook`  (hook) hook execution started\r\n     *   - `hook end`  (hook) hook complete\r\n     *   - `pass`  (test) test passed\r\n     *   - `fail`  (test, err) test failed\r\n     *\r\n     */\r\n\r\n    var originalReporter = mocha._reporter;\r\n\r\n    var blanketReporter = function(runner) {\r\n            runner.on('start', function() {\r\n                blanket.setupCoverage();\r\n            });\r\n\r\n            runner.on('end', function() {\r\n                blanket.onTestsDone();\r\n            });\r\n\r\n            runner.on('suite', function() {\r\n                blanket.onModuleStart();\r\n            });\r\n\r\n            runner.on('test', function() {\r\n                blanket.onTestStart();\r\n            });\r\n\r\n            runner.on('test end', function(test) {\r\n                blanket.onTestDone(test.parent.tests.length, test.state === 'passed');\r\n            });\r\n\r\n            //I dont know why these became global leaks\r\n            runner.globals(['stats', 'failures', 'runner']);\r\n\r\n            new originalReporter(runner);\r\n        };\r\n\r\n    mocha.reporter(blanketReporter);\r\n    var oldRun = mocha.run,\r\n        oldCallback = null;\r\n\r\n    mocha.run = function (finishCallback) {\r\n      oldCallback = finishCallback;\r\n      console.log(\"waiting for blanket...\");\r\n    };\r\n    blanket.beforeStartTestRunner({\r\n        callback: function(){\r\n            // if (!blanket.options(\"existingRequireJS\")){\r\n                oldRun(oldCallback);\r\n            // }\r\n            mocha.run = oldRun;\r\n        }\r\n    });\r\n})();\r\nblanket.defaultReporter = function(coverage){\n    var cssSytle = \"#blanket-main {margin:2px;background:#EEE;color:#333;clear:both;font-family:'Helvetica Neue Light', 'HelveticaNeue-Light', 'Helvetica Neue', Calibri, Helvetica, Arial, sans-serif; font-size:17px;} #blanket-main a {color:#333;text-decoration:none;}  #blanket-main a:hover {text-decoration:underline;} .blanket {margin:0;padding:5px;clear:both;border-bottom: 1px solid #FFFFFF;} .bl-error {color:red;}.bl-success {color:#5E7D00;} .bl-file{width:auto;} .bl-cl{float:left;} .blanket div.rs {margin-left:50px; width:150px; float:right} .bl-nb {padding-right:10px;} #blanket-main a.bl-logo {color: #EB1764;cursor: pointer;font-weight: bold;text-decoration: none} .bl-source{ overflow-x:scroll; background-color: #FFFFFF; border: 1px solid #CBCBCB; color: #363636; margin: 25px 20px; width: 80%;} .bl-source div{white-space: pre;font-family: monospace;} .bl-source > div > span:first-child{background-color: #EAEAEA;color: #949494;display: inline-block;padding: 0 10px;text-align: center;width: 30px;} .bl-source .miss{background-color:#e6c3c7} .bl-source span.branchWarning{color:#000;background-color:yellow;} .bl-source span.branchOkay{color:#000;background-color:transparent;}\",\n        successRate = 60,\n        head = document.head,\n        fileNumber = 0,\n        body = document.body,\n        headerContent,\n        hasBranchTracking = Object.keys(coverage.files).some(function(elem){\n          return typeof coverage.files[elem].branchData !== 'undefined';\n        }),\n        bodyContent = \"<div id='blanket-main'><div class='blanket bl-title'><div class='bl-cl bl-file'><a href='http://alex-seville.github.com/blanket/' target='_blank' class='bl-logo'>Blanket.js</a> results</div><div class='bl-cl rs'>Coverage (%)</div><div class='bl-cl rs'>Covered/Total Smts.</div>\"+(hasBranchTracking ? \"<div class='bl-cl rs'>Covered/Total Branches</div>\":\"\")+\"<div style='clear:both;'></div></div>\",\n        fileTemplate = \"<div class='blanket {{statusclass}}'><div class='bl-cl bl-file'><span class='bl-nb'>{{fileNumber}}.</span><a href='javascript:blanket_toggleSource(\\\"file-{{fileNumber}}\\\")'>{{file}}</a></div><div class='bl-cl rs'>{{percentage}} %</div><div class='bl-cl rs'>{{numberCovered}}/{{totalSmts}}</div>\"+( hasBranchTracking ? \"<div class='bl-cl rs'>{{passedBranches}}/{{totalBranches}}</div>\" : \"\" )+\"<div id='file-{{fileNumber}}' class='bl-source' style='display:none;'>{{source}}</div><div style='clear:both;'></div></div>\";\n        grandTotalTemplate = \"<div class='blanket grand-total {{statusclass}}'><div class='bl-cl'>{{rowTitle}}</div><div class='bl-cl rs'>{{percentage}} %</div><div class='bl-cl rs'>{{numberCovered}}/{{totalSmts}}</div>\"+( hasBranchTracking ? \"<div class='bl-cl rs'>{{passedBranches}}/{{totalBranches}}</div>\" : \"\" ) + \"<div style='clear:both;'></div></div>\";\n\n    function blanket_toggleSource(id) {\n        var element = document.getElementById(id);\n        if(element.style.display === 'block') {\n            element.style.display = 'none';\n        } else {\n            element.style.display = 'block';\n        }\n    }\n\n\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.text = blanket_toggleSource.toString().replace('function ' + blanket_toggleSource.name, 'function blanket_toggleSource');\n    body.appendChild(script);\n\n    var percentage = function(number, total) {\n        return (Math.round(((number/total) * 100)*100)/100);\n    };\n\n    var appendTag = function (type, el, str) {\n        var dom = document.createElement(type);\n        dom.innerHTML = str;\n        el.appendChild(dom);\n    };\n\n    function escapeInvalidXmlChars(str) {\n        return str.replace(/\\&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/\\>/g, \"&gt;\")\n            .replace(/\\\"/g, \"&quot;\")\n            .replace(/\\'/g, \"&apos;\");\n    }\n\n    function isBranchFollowed(data,bool){\n        var mode = bool ? 0 : 1;\n        if (typeof data === 'undefined' ||\n            typeof data === null ||\n            typeof data[mode] === 'undefined'){\n            return false;\n        }\n        return data[mode].length > 0;\n    }\n\n    var branchStack = [];\n\n    function branchReport(colsIndex,src,cols,offset,lineNum){\n      var newsrc=\"\";\n       var postfix=\"\";\n      if (branchStack.length > 0){\n        newsrc += \"<span class='\" + (isBranchFollowed(branchStack[0][1],branchStack[0][1].consequent === branchStack[0][0]) ? 'branchOkay' : 'branchWarning') + \"'>\";\n        if (branchStack[0][0].end.line === lineNum){\n          newsrc += escapeInvalidXmlChars(src.slice(0,branchStack[0][0].end.column)) + \"</span>\";\n          src = src.slice(branchStack[0][0].end.column);\n          branchStack.shift();\n          if (branchStack.length > 0){\n            newsrc += \"<span class='\" + (isBranchFollowed(branchStack[0][1],false) ? 'branchOkay' : 'branchWarning') + \"'>\";\n            if (branchStack[0][0].end.line === lineNum){\n              newsrc += escapeInvalidXmlChars(src.slice(0,branchStack[0][0].end.column)) + \"</span>\";\n              src = src.slice(branchStack[0][0].end.column);\n              branchStack.shift();\n              if (!cols){\n                return {src: newsrc + escapeInvalidXmlChars(src) ,cols:cols};\n              }\n            }\n            else if (!cols){\n              return {src: newsrc + escapeInvalidXmlChars(src) + \"</span>\",cols:cols};\n            }\n            else{\n              postfix = \"</span>\";\n            }\n          }else if (!cols){\n            return {src: newsrc + escapeInvalidXmlChars(src) ,cols:cols};\n          }\n        }else if(!cols){\n          return {src: newsrc + escapeInvalidXmlChars(src) + \"</span>\",cols:cols};\n        }else{\n          postfix = \"</span>\";\n        }\n      }\n      var thisline = cols[colsIndex];\n      //consequent\n      \n      var cons = thisline.consequent;\n      if (cons.start.line > lineNum){\n        branchStack.unshift([thisline.alternate,thisline]);\n        branchStack.unshift([cons,thisline]);\n        src = escapeInvalidXmlChars(src);\n      }else{\n        var style = \"<span class='\" + (isBranchFollowed(thisline,true) ? 'branchOkay' : 'branchWarning') + \"'>\";\n        newsrc += escapeInvalidXmlChars(src.slice(0,cons.start.column-offset)) + style;\n        \n        if (cols.length > colsIndex+1 &&\n          cols[colsIndex+1].consequent.start.line === lineNum &&\n          cols[colsIndex+1].consequent.start.column-offset < cols[colsIndex].consequent.end.column-offset)\n        {\n          var res = branchReport(colsIndex+1,src.slice(cons.start.column-offset,cons.end.column-offset),cols,cons.start.column-offset,lineNum);\n          newsrc += res.src;\n          cols = res.cols;\n          cols[colsIndex+1] = cols[colsIndex+2];\n          cols.length--;\n        }else{\n          newsrc += escapeInvalidXmlChars(src.slice(cons.start.column-offset,cons.end.column-offset));\n        }\n        newsrc += \"</span>\";\n\n        var alt = thisline.alternate;\n        if (alt.start.line > lineNum){\n          newsrc += escapeInvalidXmlChars(src.slice(cons.end.column-offset));\n          branchStack.unshift([alt,thisline]);\n        }else{\n          newsrc += escapeInvalidXmlChars(src.slice(cons.end.column-offset,alt.start.column-offset));\n          style = \"<span class='\" + (isBranchFollowed(thisline,false) ? 'branchOkay' : 'branchWarning') + \"'>\";\n          newsrc +=  style;\n          if (cols.length > colsIndex+1 &&\n            cols[colsIndex+1].consequent.start.line === lineNum &&\n            cols[colsIndex+1].consequent.start.column-offset < cols[colsIndex].alternate.end.column-offset)\n          {\n            var res2 = branchReport(colsIndex+1,src.slice(alt.start.column-offset,alt.end.column-offset),cols,alt.start.column-offset,lineNum);\n            newsrc += res2.src;\n            cols = res2.cols;\n            cols[colsIndex+1] = cols[colsIndex+2];\n            cols.length--;\n          }else{\n            newsrc += escapeInvalidXmlChars(src.slice(alt.start.column-offset,alt.end.column-offset));\n          }\n          newsrc += \"</span>\";\n          newsrc += escapeInvalidXmlChars(src.slice(alt.end.column-offset));\n          src = newsrc;\n        }\n      }\n      return {src:src+postfix, cols:cols};\n    }\n\n    var isUndefined =  function(item){\n            return typeof item !== 'undefined';\n      };\n\n    var files = coverage.files;\n    var totals = {\n      totalSmts: 0,\n      numberOfFilesCovered: 0,\n      passedBranches: 0,\n      totalBranches: 0,\n      moduleTotalStatements : {},\n      moduleTotalCoveredStatements : {},\n      moduleTotalBranches : {},\n      moduleTotalCoveredBranches : {}   \n    };\n\n    // check if a data-cover-modulepattern was provided for per-module coverage reporting\n    var modulePattern = _blanket.options(\"modulePattern\");\n    var modulePatternRegex = ( modulePattern ? new RegExp(modulePattern) : null );    \n\n    for(var file in files)\n    {\n        fileNumber++;\n\n        var statsForFile = files[file],\n            totalSmts = 0,\n            numberOfFilesCovered = 0,\n            code = [],\n            i;\n        \n\n        var end = [];\n        for(i = 0; i < statsForFile.source.length; i +=1){\n            var src = statsForFile.source[i];\n            \n            if (branchStack.length > 0 ||\n                typeof statsForFile.branchData !== 'undefined')\n            {\n                if (typeof statsForFile.branchData[i+1] !== 'undefined')\n                {\n                  var cols = statsForFile.branchData[i+1].filter(isUndefined);\n                  var colsIndex=0;\n                  \n                    \n                  src = branchReport(colsIndex,src,cols,0,i+1).src;\n                  \n                }else if (branchStack.length){\n                  src = branchReport(0,src,null,0,i+1).src;\n                }else{\n                  src = escapeInvalidXmlChars(src);\n                }\n              }else{\n                src = escapeInvalidXmlChars(src);\n              }\n              var lineClass=\"\";\n              if(statsForFile[i+1]) {\n                numberOfFilesCovered += 1;\n                totalSmts += 1;\n                lineClass = 'hit';\n              }else{\n                if(statsForFile[i+1] === 0){\n                    totalSmts++;\n                    lineClass = 'miss';\n                }\n              }\n              code[i + 1] = \"<div class='\"+lineClass+\"'><span class=''>\"+(i + 1)+\"</span>\"+src+\"</div>\";\n        }\n        totals.totalSmts += totalSmts;\n        totals.numberOfFilesCovered += numberOfFilesCovered;\n        var totalBranches=0;\n        var passedBranches=0;\n        if (typeof statsForFile.branchData !== 'undefined'){\n          for(var j=0;j<statsForFile.branchData.length;j++){\n            if (typeof statsForFile.branchData[j] !== 'undefined'){\n              for(var k=0;k<statsForFile.branchData[j].length;k++){\n                if (typeof statsForFile.branchData[j][k] !== 'undefined'){\n                  totalBranches++;\n                  if (typeof statsForFile.branchData[j][k][0] !== 'undefined' &&\n                    statsForFile.branchData[j][k][0].length > 0 &&\n                    typeof statsForFile.branchData[j][k][1] !== 'undefined' &&\n                    statsForFile.branchData[j][k][1].length > 0){\n                    passedBranches++;\n                  }\n                }\n              }\n            }\n          }\n        }\n        totals.passedBranches += passedBranches;\n        totals.totalBranches += totalBranches;\n\n        // if \"data-cover-modulepattern\" was provided, \n        // track totals per module name as well as globally\n        if (modulePatternRegex) {\n            var moduleName = file.match(modulePatternRegex)[1];\n\n            if(!totals.moduleTotalStatements.hasOwnProperty(moduleName)) {\n                totals.moduleTotalStatements[moduleName] = 0;\n                totals.moduleTotalCoveredStatements[moduleName] = 0;\n            }\n\n            totals.moduleTotalStatements[moduleName] += totalSmts;\n            totals.moduleTotalCoveredStatements[moduleName] += numberOfFilesCovered;\n\n            if(!totals.moduleTotalBranches.hasOwnProperty(moduleName)) {\n                totals.moduleTotalBranches[moduleName] = 0;\n                totals.moduleTotalCoveredBranches[moduleName] = 0;\n            }\n\n            totals.moduleTotalBranches[moduleName] += totalBranches;\n            totals.moduleTotalCoveredBranches[moduleName] += passedBranches;            \n        }\n\n        var result = percentage(numberOfFilesCovered, totalSmts);\n\n        var output = fileTemplate.replace(\"{{file}}\", file)\n                                 .replace(\"{{percentage}}\",result)\n                                 .replace(\"{{numberCovered}}\", numberOfFilesCovered)\n                                 .replace(/\\{\\{fileNumber\\}\\}/g, fileNumber)\n                                 .replace(\"{{totalSmts}}\", totalSmts)\n                                 .replace(\"{{totalBranches}}\", totalBranches)\n                                 .replace(\"{{passedBranches}}\", passedBranches)\n                                 .replace(\"{{source}}\", code.join(\" \"));\n        if(result < successRate)\n        {\n            output = output.replace(\"{{statusclass}}\", \"bl-error\");\n        } else {\n            output = output.replace(\"{{statusclass}}\", \"bl-success\");\n        }\n        bodyContent += output;\n    }\n\n    // create temporary function for use by the global totals reporter, \n    // as well as the per-module totals reporter\n    var createAggregateTotal = function(numSt, numCov, numBranch, numCovBr, moduleName) {\n\n        var totalPercent = percentage(numCov, numSt);\n        var statusClass = totalPercent < successRate ? \"bl-error\" : \"bl-success\";\n        var rowTitle = ( moduleName ? \"Total for module: \" + moduleName : \"Global total\" );\n        var totalsOutput = grandTotalTemplate.replace(\"{{rowTitle}}\", rowTitle)\n            .replace(\"{{percentage}}\", totalPercent)\n            .replace(\"{{numberCovered}}\", numCov)\n            .replace(\"{{totalSmts}}\", numSt)\n            .replace(\"{{passedBranches}}\", numCovBr)\n            .replace(\"{{totalBranches}}\", numBranch)\n            .replace(\"{{statusclass}}\", statusClass);\n\n        bodyContent += totalsOutput;\n    };\n\n    // if \"data-cover-modulepattern\" was provided, \n    // output the per-module totals alongside the global totals    \n    if (modulePatternRegex) {\n        for (var thisModuleName in totals.moduleTotalStatements) {\n            if (totals.moduleTotalStatements.hasOwnProperty(thisModuleName)) {\n\n                var moduleTotalSt = totals.moduleTotalStatements[thisModuleName];\n                var moduleTotalCovSt = totals.moduleTotalCoveredStatements[thisModuleName];\n\n                var moduleTotalBr = totals.moduleTotalBranches[thisModuleName];\n                var moduleTotalCovBr = totals.moduleTotalCoveredBranches[thisModuleName];\n\n                createAggregateTotal(moduleTotalSt, moduleTotalCovSt, moduleTotalBr, moduleTotalCovBr, thisModuleName);\n            }\n        }        \n    }\n\n    createAggregateTotal(totals.totalSmts, totals.numberOfFilesCovered, totals.totalBranches, totals.passedBranches, null);\n    bodyContent += \"</div>\"; //closing main\n\n\n    appendTag('style', head, cssSytle);\n    //appendStyle(body, headerContent);\n    if (document.getElementById(\"blanket-main\")){\n        document.getElementById(\"blanket-main\").innerHTML=\n            bodyContent.slice(23,-6);\n    }else{\n        appendTag('div', body, bodyContent);\n    }\n    //appendHtml(body, '</div>');\n};\n\ndefine(\"blanket\", [\"falafel\",\"mocha\"], (function (global) {\n    return function () {\n        var ret, fn;\n       fn = function (falafel) {\n          var blanket = window.blanket;\n          blanket.parseAndModify = falafel;\n          blanket.options('filter', '/src/');\n          blanket.options('antifilter', '[\"/test/\",\"/lib/\"]');\n          return blanket;\n        };\n        ret = fn.apply(global, arguments);\n        return ret;\n    };\n}(this)));\n\n","blanket.options('existingRequireJS', true);\n\n(function(_blanket){\n_blanket.extend({\n    utils: {\n        normalizeBackslashes: function(str) {\n            return str.replace(/\\\\/g, '/');\n        },\n        matchPatternAttribute: function(filename,pattern){\n            if (typeof pattern === 'string'){\n                if (pattern.indexOf(\"[\") === 0){\n                    //treat as array\n                    var pattenArr = pattern.slice(1,pattern.length-1).split(\",\");\n                    return pattenArr.some(function(elem){\n                        return _blanket.utils.matchPatternAttribute(filename,_blanket.utils.normalizeBackslashes(elem.slice(1,-1)));\n                        //return filename.indexOf(_blanket.utils.normalizeBackslashes(elem.slice(1,-1))) > -1;\n                    });\n                }else if ( pattern.indexOf(\"//\") === 0){\n                    var ex = pattern.slice(2,pattern.lastIndexOf('/'));\n                    var mods = pattern.slice(pattern.lastIndexOf('/')+1);\n                    var regex = new RegExp(ex,mods);\n                    return regex.test(filename);\n                }else if (pattern.indexOf(\"#\") === 0){\n                    return window[pattern.slice(1)].call(window,filename);\n                }else{\n                    return filename.indexOf(_blanket.utils.normalizeBackslashes(pattern)) > -1;\n                }\n            }else if ( pattern instanceof Array ){\n                return pattern.some(function(elem){\n                    return _blanket.utils.matchPatternAttribute(filename,elem);\n                });\n            }else if (pattern instanceof RegExp){\n                return pattern.test(filename);\n            }else if (typeof pattern === \"function\"){\n                return pattern.call(window,filename);\n            }\n        },\n        blanketEval: function(data){\n            _blanket._addScript(data);\n        },\n        collectPageScripts: function(){\n            var toArray = Array.prototype.slice;\n            var scripts = toArray.call(document.scripts);\n            var selectedScripts=[],scriptNames=[];\n            var filter = _blanket.options(\"filter\");\n            if(filter != null){\n                //global filter in place, data-cover-only\n                var antimatch = _blanket.options(\"antifilter\");\n                selectedScripts = toArray.call(document.scripts)\n                                .filter(function(s){\n                                    return toArray.call(s.attributes).filter(function(sn){\n                                        return sn.nodeName === \"src\" && _blanket.utils.matchPatternAttribute(sn.nodeValue,filter) &&\n                                            (typeof antimatch === \"undefined\" || !_blanket.utils.matchPatternAttribute(sn.nodeValue,antimatch));\n                                    }).length === 1;\n                                });\n            }else{\n                selectedScripts = toArray.call(document.querySelectorAll(\"script[data-cover]\"));\n            }\n            scriptNames = selectedScripts.map(function(s){\n                                    return _blanket.utils.qualifyURL(\n                                        toArray.call(s.attributes).filter(\n                                            function(sn){\n                                                return sn.nodeName === \"src\";\n                                            })[0].nodeValue).replace(\".js\",\"\");\n                                    });\n            if (!filter){\n                _blanket.options(\"filter\",\"['\"+scriptNames.join(\"','\")+\"']\");\n            }\n            return scriptNames;\n        },\n        loadAll: function(nextScript,cb,preprocessor){\n            /**\n             * load dependencies\n             * @param {nextScript} factory for priority level\n             * @param {cb} the done callback\n             */\n            var currScript=nextScript();\n            var isLoaded = _blanket.utils.scriptIsLoaded(\n                                currScript,\n                                _blanket.utils.ifOrdered,\n                                nextScript,\n                                cb\n                            );\n            \n            if (!(_blanket.utils.cache[currScript] && _blanket.utils.cache[currScript].loaded)){\n                var attach = function(){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Mark script:\"+currScript+\", as loaded and move to next script.\");}\n                    isLoaded();\n                };\n                var whenDone = function(result){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File loading finished\");}\n                    if (typeof result !== 'undefined'){\n                        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Add file to DOM.\");}\n                        _blanket._addScript(result);\n                    }\n                    attach();\n                };\n\n                _blanket.utils.attachScript(\n                    {\n                        url: currScript\n                    },\n                    function (content){\n                        _blanket.utils.processFile(\n                            content,\n                            currScript,\n                            whenDone,\n                            whenDone\n                        );\n                    }\n                );\n            }else{\n                isLoaded();\n            }\n        },\n        attachScript: function(options,cb){\n           var timeout = _blanket.options(\"timeout\") || 3000;\n           setTimeout(function(){\n                if (!_blanket.utils.cache[options.url].loaded){\n                    throw new Error(\"error loading source script\");\n                }\n           },timeout);\n           _blanket.utils.getFile(\n                options.url,\n                cb, \n                function(){ throw new Error(\"error loading source script\");}\n            );\n        },\n        ifOrdered: function(nextScript,cb){\n            /**\n             * ordered loading callback\n             * @param {nextScript} factory for priority level\n             * @param {cb} the done callback\n             */\n            var currScript = nextScript(true);\n            if (currScript){\n              _blanket.utils.loadAll(nextScript,cb);\n            }else{\n              cb(new Error(\"Error in loading chain.\"));\n            }\n        },\n        scriptIsLoaded: function(url,orderedCb,nextScript,cb){\n            /**\n           * returns a callback that checks a loading list to see if a script is loaded.\n           * @param {orderedCb} callback if ordered loading is being done\n           * @param {nextScript} factory for next priority level\n           * @param {cb} the done callback\n           */\n           if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Returning function\");}\n            return function(){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Marking file as loaded: \"+url);}\n           \n                _blanket.utils.cache[url].loaded=true;\n            \n                if (_blanket.utils.allLoaded()){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-All files loaded\");}\n                    cb();\n                }else if (orderedCb){\n                    //if it's ordered we need to\n                    //traverse down to the next\n                    //priority level\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Load next file.\");}\n                    orderedCb(nextScript,cb);\n                }\n            };\n        },\n        cache: {},\n        allLoaded: function (){\n            /**\n             * check if depdencies are loaded in cache\n             */\n            var cached = Object.keys(_blanket.utils.cache);\n            for (var i=0;i<cached.length;i++){\n                if (!_blanket.utils.cache[cached[i]].loaded){\n                    return false;\n                }\n            }\n            return true;\n        },\n        processFile: function (content,url,cb,oldCb) {\n            var match = _blanket.options(\"filter\");\n            //we check the never matches first\n            var antimatch = _blanket.options(\"antifilter\");\n            if (typeof antimatch !== \"undefined\" &&\n                    _blanket.utils.matchPatternAttribute(url.replace(/\\.js$/,\"\"),antimatch)\n                ){\n                oldCb(content);\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File will never be instrumented:\"+url);}\n                _blanket.requiringFile(url,true);\n            }else if (_blanket.utils.matchPatternAttribute(url.replace(/\\.js$/,\"\"),match)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Attempting instrument of:\"+url);}\n                _blanket.instrument({\n                    inputFile: content,\n                    inputFileName: url\n                },function(instrumented){\n                    try{\n                        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-instrument of:\"+url+\" was successfull.\");}\n                        _blanket.utils.blanketEval(instrumented);\n                        cb();\n                        _blanket.requiringFile(url,true);\n                    }\n                    catch(err){\n                        if (_blanket.options(\"ignoreScriptError\")){\n                            //we can continue like normal if\n                            //we're ignoring script errors,\n                            //but otherwise we don't want\n                            //to completeLoad or the error might be\n                            //missed.\n                            if (_blanket.options(\"debug\")) { console.log(\"BLANKET-There was an error loading the file:\"+url); }\n                            cb(content);\n                            _blanket.requiringFile(url,true);\n                        }else{\n                            throw new Error(\"Error parsing instrumented code: \"+err);\n                        }\n                    }\n                });\n            }else{\n                if (_blanket.options(\"debug\")) { console.log(\"BLANKET-Loading (without instrumenting) the file:\"+url);}\n                oldCb(content);\n                _blanket.requiringFile(url,true);\n            }\n\n        },\n        createXhr: function(){\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n        getFile: function(url, callback, errback, onXhr){\n            var foundInSession = false;\n            if (_blanket.blanketSession){\n                var files = Object.keys(_blanket.blanketSession);\n                for (var i=0; i<files.length;i++ ){\n                    var key = files[i];\n                    if (url.indexOf(key) > -1){\n                        callback(_blanket.blanketSession[key]);\n                        foundInSession=true;\n                        return;\n                    }\n                }\n            }\n            if (!foundInSession){\n                var xhr = _blanket.utils.createXhr();\n                xhr.open('GET', url, true);\n\n                //Allow overrides specified in config\n                if (onXhr) {\n                    onXhr(xhr, url);\n                }\n\n                xhr.onreadystatechange = function (evt) {\n                    var status, err;\n                    \n                    //Do not explicitly handle errors, those should be\n                    //visible via console output in the browser.\n                    if (xhr.readyState === 4) {\n                        status = xhr.status;\n                        if ((status > 399 && status < 600) /*||\n                            (status === 0 &&\n                                navigator.userAgent.toLowerCase().indexOf('firefox') > -1)\n                           */ ) {\n                            //An http 4xx or 5xx error. Signal an error.\n                            err = new Error(url + ' HTTP status: ' + status);\n                            err.xhr = xhr;\n                            errback(err);\n                        } else {\n                            callback(xhr.responseText);\n                        }\n                    }\n                };\n                try{\n                    xhr.send(null);\n                }catch(e){\n                    if (e.code && (e.code === 101 || e.code === 1012) && _blanket.options(\"ignoreCors\") === false){\n                        //running locally and getting error from browser\n                        _blanket.showManualLoader();\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n        }\n    }\n});\n\n(function(){\n    var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n    var requirejs = blanket.options(\"commonJS\") ? blanket._commonjs.requirejs : window.requirejs;\n    if (!_blanket.options(\"engineOnly\") && _blanket.options(\"existingRequireJS\")){\n\n        _blanket.utils.oldloader = requirejs.load;\n\n        requirejs.load = function (context, moduleName, url) {\n            _blanket.requiringFile(url);\n            _blanket.utils.getFile(url, \n                function(content){ \n                    _blanket.utils.processFile(\n                        content,\n                        url,\n                        function newLoader(){\n                            context.completeLoad(moduleName);\n                        },\n                        function oldLoader(){\n                            _blanket.utils.oldloader(context, moduleName, url);\n                        }\n                    );\n                }, function (err) {\n                _blanket.requiringFile();\n                throw err;\n            });\n        };\n    }\n})();\n\n})(blanket);\n\ndefine(\"blanket-require\", function(){});\n\n","// # thehelp-test-coverage\n// This is the file that pulls in all the right components\n// to enable code coverage for a requirejs-based mocha test run.\n\ndefine('thehelp-test-coverage',[\n  'thehelp-test',\n  'falafel',\n  'blanket',\n  'blanket-require'\n], function(\n  test,\n  falafel,\n  blanket,\n  blanketRequire\n) {\n\n  'use strict';\n\n  return {\n    falafel: falafel,\n    blanket: blanket,\n    blanketRequire: blanketRequire\n  };\n});\n\n"]}