{"version":3,"file":"thehelp-core-tz-all.min.js","sources":["src/both/color.js","src/both/general.js","src/both/string.js","lib/vendor/moment.js","src/client/shims/empty.js","lib/vendor/timezone.js","src/both/time-all.js","thehelp-core.js"],"names":[],"mappings":"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","sourcesContent":["// # color\n// This module provides a number of methods for dealing with color.\n\n// [RequireJS](http://requirejs.org/) boilerplate, dependencies and\n// [strict mode](http://mzl.la/1fRhnam)\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module);\n}\n\ndefine('src/both/color',[],function() {\n  'use strict';\n\n  return {\n    // `parse` takes a string `color` and turns it into its\n    // components parts. An object with `red`, `green`, `blue`\n    // (and perhaps `alpha`) keys.\n    parse: function(color) {\n      if (!color) {\n        return;\n      }\n      if (color.substr(0, 1) === '#') {\n        return this.parseHex(color);\n      }\n      else if (color.substr(0, 1) === 'r') {\n        return this.parseRgb(color);\n      }\n      return null;\n    },\n\n    /*\n    `parseRgb` parses an rgb string into its component parts.\n    Like these strings, for example:\n\n    + \"rgba(255, 0, 0, 0.5)\"\n    + \"rgb(255, 0, 0)\"\n    */\n    parseRgb: function(color) {\n      if (!this.rgbRegex) {\n        this.rgbRegex = /rgba?\\((\\d+),\\s?(\\d+),\\s?(\\d+)(,\\s?(0?[.\\d]+))?\\)/;\n      }\n\n      var match = this.rgbRegex.exec(color);\n      if (!match || match.length < 1) {\n        return null;\n      }\n      else {\n        var digits = {\n          red: parseInt(match[1], 10),\n          green: parseInt(match[2], 10),\n          blue: parseInt(match[3], 10)\n        };\n        if (match[5]) {\n          digits.alpha = parseFloat(match[5]);\n        }\n        return digits;\n      }\n    },\n\n    // `rgbToHex` turns an rgb string into its equivalent\n    // hex string. Any alpha channel data will be discarded.\n    rgbToHex: function(rgb) {\n      if (rgb.substr(0, 1) === '#') {\n        return rgb;\n      }\n\n      var digits = this.parseRgb(rgb);\n      return this.makeHex(digits);\n    },\n\n    /*\n    `parseHex` parses a hex string into its component parts.\n    Like these strings, for example:\n\n    + \"#FF0022\"\n    + \"#aa80ff\"\n    */\n    parseHex: function(hex) {\n      if (!this.hexRegex) {\n        this.hexRegex = /\\#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})/;\n      }\n\n      var match = this.hexRegex.exec(hex);\n      if (!match || match.length < 1) {\n        return null;\n      }\n      else {\n        return {\n          red: parseInt(match[1], 16),\n          green: parseInt(match[2], 16),\n          blue: parseInt(match[3], 16)\n        };\n      }\n    },\n\n    // `hexToRgb` turns a hex string into its equivalent\n    // rgb string.\n    hexToRgb: function(hex) {\n      if (hex.substr(0, 1) !== '#') {\n        return hex;\n      }\n\n      var digits = this.parseHex(hex);\n      return this.makeRgb(digits);\n    },\n\n    // `addTransparency` takes a color string (either hex or rgb)\n    // and turns it into an rgba string with the given opacity.\n    addTransparency: function(color, opacity) {\n      var digits = this.parse(color);\n      digits.alpha = opacity;\n      return this.makeRgb(digits);\n    },\n    // `removeTransparency` takes an rgba string and returns\n    // an rgb string with the opacity stripped.\n    removeTransparency: function(color) {\n      var digits = this.parseRgb(color);\n      delete digits.alpha;\n      return this.makeRgb(digits);\n    },\n\n    // `makeRgb` is a helper function to take a digits object\n    // and turn it into an rgb or rgba string.\n    makeRgb: function(digits) {\n      var rgb = 'rgb';\n      if (digits.alpha) {\n        rgb += 'a';\n      }\n      rgb += '(' + digits.red + ', ' + digits.green + ', ' + digits.blue;\n      if (digits.alpha) {\n        rgb += ', ' + digits.alpha;\n      }\n      rgb += ')';\n      return rgb;\n    },\n\n    // `makeHex` is a helper function to take a digits object\n    // and turn it into a hex string.\n    makeHex: function(digits) {\n      /*jslint bitwise: true */\n      var hex = digits.blue | (digits.green << 8) | (digits.red << 16);\n      return '#' + hex.toString(16);\n    }\n  };\n});\n\n","// # general\n// A few quick utility methods useful just about everywhere.\n\n// [RequireJS](http://requirejs.org/) boilerplate, dependencies and\n// [strict mode](http://mzl.la/1fRhnam)\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module);\n}\n\ndefine('src/both/general',['winston', 'util'], function(winston, util) {\n  'use strict';\n\n  return {\n    winston: winston,\n\n    // `isNode` checks for `window`, `module` and `process` to make its decision.\n    // we're on the client.\n    isNode: function() {\n      return typeof window === 'undefined' &&\n        (typeof module !== 'undefined' || process !== 'undefined');\n    },\n\n    // `getHost` the location of this server. On the client, requires\n    // `window.host` to be defined. On the server. the `HOST` environment\n    // variable.\n    getHost: function() {\n      if (this.isNode()) {\n        return process.env.HOST;\n      }\n      else {\n        if (!window.host) {\n          this.winston.warn('window.host not set, returning null!');\n        }\n\n        return window.host;\n      }\n    },\n\n    // `checkError` will log, call a provided (optional) callback and return true\n    // if `err` is truthy. Otherwise it will return false.\n    checkError: function(message, err, cb) {\n      if (err) {\n        this.winston.error(util.inspect(err) + ' - ' + message +\n         '; callstack: ' + err.stack);\n\n        if (cb) {\n          cb(err, null);\n        }\n        return true;\n      }\n      else {\n        return false;\n      }\n    },\n\n    // `checkPrecondition` will call the provided callback with an `Error` if the\n    // condition isn't truthy.\n    checkPrecondition: function(condition, message, cb) {\n      if (condition) {\n        return false;\n      }\n      else {\n        if (cb) {\n          cb(new Error(message), null);\n        }\n        return true;\n      }\n    },\n\n    // `setTimeout` and `setInterval` - because it's annoying to pass the callback as the\n    // first parameter.\n    setTimeout: function(number, cb) {\n      return setTimeout(cb, number);\n    },\n\n    setInterval: function(number, cb) {\n      return setInterval(cb, number);\n    }\n  };\n});\n\n","// # string\n// A few quick string-related utility methods.\n\n// [RequireJS](http://requirejs.org/) boilerplate, dependencies and\n// [strict mode](http://mzl.la/1fRhnam)\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module);\n}\n\ndefine('src/both/string',[],function() {\n  'use strict';\n\n  return {\n    // `splice` inserts one string into another at a specified location.\n    splice: function(source, location, toInsert) {\n      if (location < 0 || location > source.length) {\n        throw new Error('location ' + location + ' out of range');\n      }\n      return source.slice(0, location) + toInsert + source.slice(location);\n    },\n\n    // `capitalize` takes the first character of the provided string and makes it\n    // uppercase.\n    capitalize: function(source) {\n      return source.charAt(0).toUpperCase() + source.slice(1);\n    },\n\n    // `truncate` returns a string with `limit` characters or less. If the original string\n    // was longer than `limit` characters, it will be truncated to fit. Any truncated\n    // string will end with an ellipsis (\"...\") to signify that it's missing info.\n    truncate: function(limit, text) {\n      var result;\n      if (text.length > limit) {\n        result = text.substring(0, limit - 3);\n        result += '...';\n        return result;\n      }\n      return text;\n    },\n\n    // `pluralize` is very simple - it takes a `count` as well as `singular`\n    // and `plural` strings. It then returns a string with both the count and the\n    // appropriate singular or plural label.\n    pluralize: function(count, singular, plural) {\n      if (count === 1) {\n        return count + ' ' + singular;\n      }\n      return count + ' ' + plural;\n    },\n\n    // `normalizePhoneNumber` takes a number like '(800) 555-3333'\n    // and turns it into '+18005553333', which can be used with Twilio.\n    normalizePhoneNumber: function(number) {\n      number = number.replace(/[() +-]/gi, '');\n      if (number.length < 11) {\n        number = '1' + number;\n      }\n      number = '+' + number;\n      return number;\n    },\n\n    // `formatPhoneNumber` takes a normalized phone number and makes it\n    // human-reasonable again.\n    formatPhoneNumber: function(number) {\n      if (number.length !== 12) {\n        return number;\n      }\n      number = this.splice(number, 2, ' (');\n      number = this.splice(number, 7, ') ');\n      number = this.splice(number, 12, '-');\n\n      return number;\n    },\n\n    // `repeat` repeats the first parameter `n` times.\n    repeat: function(target, n) {\n      if (n > 0) {\n        return target + this.repeat(target, n - 1);\n      }\n      else {\n        return '';\n      }\n    }\n  };\n});\n\n\n","//! moment.js\n//! version : 2.4.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"2.4.0\",\n        round = Math.round,\n        i,\n\n        YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n\n        // internal storage for language config files\n        languages = {},\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/,\n\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999\n        parseTokenDigits = /\\d+/, // nonzero number of digits\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n\n        // preliminary iso regex\n        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000)\n        isoRegex = /^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d|Z)?)?$/,\n\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        isoDates = [\n            'YYYY-MM-DD',\n            'GGGG-[W]WW',\n            'GGGG-[W]WW-E',\n            'YYYY-DDD'\n        ],\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n            ['HH', /(T| )\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        unitAliases = {\n            ms : 'millisecond',\n            s : 'second',\n            m : 'minute',\n            h : 'hour',\n            d : 'day',\n            D : 'date',\n            w : 'week',\n            W : 'isoWeek',\n            M : 'month',\n            y : 'year',\n            DDD : 'dayOfYear',\n            e : 'weekday',\n            E : 'isoWeekday',\n            gg: 'weekYear',\n            GG: 'isoWeekYear'\n        },\n\n        camelFunctions = {\n            dayofyear : 'dayOfYear',\n            isoweekday : 'isoWeekday',\n            isoweek : 'isoWeek',\n            weekyear : 'weekYear',\n            isoweekyear : 'isoWeekYear'\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),\n        paddedTokens = 'M D H h m s w W'.split(' '),\n\n        formatTokenFunctions = {\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return this.lang().monthsShort(this, format);\n            },\n            MMMM : function (format) {\n                return this.lang().months(this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                return this.dayOfYear();\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return this.lang().weekdaysMin(this, format);\n            },\n            ddd  : function (format) {\n                return this.lang().weekdaysShort(this, format);\n            },\n            dddd : function (format) {\n                return this.lang().weekdays(this, format);\n            },\n            w    : function () {\n                return this.week();\n            },\n            W    : function () {\n                return this.isoWeek();\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            YYYYY : function () {\n                return leftZeroFill(this.year(), 5);\n            },\n            gg   : function () {\n                return leftZeroFill(this.weekYear() % 100, 2);\n            },\n            gggg : function () {\n                return this.weekYear();\n            },\n            ggggg : function () {\n                return leftZeroFill(this.weekYear(), 5);\n            },\n            GG   : function () {\n                return leftZeroFill(this.isoWeekYear() % 100, 2);\n            },\n            GGGG : function () {\n                return this.isoWeekYear();\n            },\n            GGGGG : function () {\n                return leftZeroFill(this.isoWeekYear(), 5);\n            },\n            e : function () {\n                return this.weekday();\n            },\n            E : function () {\n                return this.isoWeekday();\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return toInt(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(toInt(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            SSSS : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(toInt(a / 60), 2) + \":\" + leftZeroFill(toInt(a) % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(toInt(10 * a / 6), 4);\n            },\n            z : function () {\n                return this.zoneAbbr();\n            },\n            zz : function () {\n                return this.zoneName();\n            },\n            X    : function () {\n                return this.unix();\n            }\n        },\n\n        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func, period) {\n        return function (a) {\n            return this.lang().ordinal(func.call(this, a), period);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    function Language() {\n\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        checkOverflow(config);\n        extend(this, config);\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // store reference to input for deterministic cloning\n        this._input = duration;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            years * 12;\n\n        this._data = {};\n\n        this._bubble();\n    }\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (b.hasOwnProperty(i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (b.hasOwnProperty(\"toString\")) {\n            a.toString = b.toString;\n        }\n\n        if (b.hasOwnProperty(\"valueOf\")) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = duration._days,\n            months = duration._months,\n            minutes,\n            hours;\n\n        if (milliseconds) {\n            mom._d.setTime(+mom._d + milliseconds * isAdding);\n        }\n        // store the minutes and hours so we can restore them\n        if (days || months) {\n            minutes = mom.minute();\n            hours = mom.hour();\n        }\n        if (days) {\n            mom.date(mom.date() + days * isAdding);\n        }\n        if (months) {\n            mom.month(mom.month() + months * isAdding);\n        }\n        if (milliseconds && !ignoreUpdateOffset) {\n            moment.updateOffset(mom);\n        }\n        // restore the minutes and hours after possibly changing dst\n        if (days || months) {\n            mom.minute(minutes);\n            mom.hour(hours);\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isDate(input) {\n        return  Object.prototype.toString.call(input) === '[object Date]' ||\n                input instanceof Date;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function normalizeUnits(units) {\n        if (units) {\n            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');\n            units = unitAliases[units] || camelFunctions[lowered] || lowered;\n        }\n        return units;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop,\n            index;\n\n        for (prop in inputObject) {\n            if (inputObject.hasOwnProperty(prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    function makeList(field) {\n        var count, setter;\n\n        if (field.indexOf('week') === 0) {\n            count = 7;\n            setter = 'day';\n        }\n        else if (field.indexOf('month') === 0) {\n            count = 12;\n            setter = 'month';\n        }\n        else {\n            return;\n        }\n\n        moment[field] = function (format, index) {\n            var i, getter,\n                method = moment.fn._lang[field],\n                results = [];\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            getter = function (i) {\n                var m = moment().utc().set(setter, i);\n                return method.call(moment.fn._lang, m, format || '');\n            };\n\n            if (index != null) {\n                return getter(index);\n            }\n            else {\n                for (i = 0; i < count; i++) {\n                    results.push(getter(i));\n                }\n                return results;\n            }\n        };\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            if (coercedNumber >= 0) {\n                value = Math.floor(coercedNumber);\n            } else {\n                value = Math.ceil(coercedNumber);\n            }\n        }\n\n        return value;\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function checkOverflow(m) {\n        var overflow;\n        if (m._a && m._pf.overflow === -2) {\n            overflow =\n                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :\n                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :\n                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :\n                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :\n                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :\n                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n\n            m._pf.overflow = overflow;\n        }\n    }\n\n    function initializeParsingFlags(config) {\n        config._pf = {\n            empty : false,\n            unusedTokens : [],\n            unusedInput : [],\n            overflow : -2,\n            charsLeftOver : 0,\n            nullInput : false,\n            invalidMonth : null,\n            invalidFormat : false,\n            userInvalidated : false,\n            iso: false\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            m._isValid = !isNaN(m._d.getTime()) &&\n                m._pf.overflow < 0 &&\n                !m._pf.empty &&\n                !m._pf.invalidMonth &&\n                !m._pf.nullInput &&\n                !m._pf.invalidFormat &&\n                !m._pf.userInvalidated;\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    m._pf.charsLeftOver === 0 &&\n                    m._pf.unusedTokens.length === 0;\n            }\n        }\n        return m._isValid;\n    }\n\n    function normalizeLanguage(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    /************************************\n        Languages\n    ************************************/\n\n\n    extend(Language.prototype, {\n\n        set : function (config) {\n            var prop, i;\n            for (i in config) {\n                prop = config[i];\n                if (typeof prop === 'function') {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        },\n\n        _months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        months : function (m) {\n            return this._months[m.month()];\n        },\n\n        _monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        monthsShort : function (m) {\n            return this._monthsShort[m.month()];\n        },\n\n        monthsParse : function (monthName) {\n            var i, mom, regex;\n\n            if (!this._monthsParse) {\n                this._monthsParse = [];\n            }\n\n            for (i = 0; i < 12; i++) {\n                // make the regex if we don't have it already\n                if (!this._monthsParse[i]) {\n                    mom = moment.utc([2000, i]);\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._monthsParse[i].test(monthName)) {\n                    return i;\n                }\n            }\n        },\n\n        _weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdays : function (m) {\n            return this._weekdays[m.day()];\n        },\n\n        _weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysShort : function (m) {\n            return this._weekdaysShort[m.day()];\n        },\n\n        _weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        weekdaysMin : function (m) {\n            return this._weekdaysMin[m.day()];\n        },\n\n        weekdaysParse : function (weekdayName) {\n            var i, mom, regex;\n\n            if (!this._weekdaysParse) {\n                this._weekdaysParse = [];\n            }\n\n            for (i = 0; i < 7; i++) {\n                // make the regex if we don't have it already\n                if (!this._weekdaysParse[i]) {\n                    mom = moment([2000, 1]).day(i);\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._weekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n            }\n        },\n\n        _longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        longDateFormat : function (key) {\n            var output = this._longDateFormat[key];\n            if (!output && this._longDateFormat[key.toUpperCase()]) {\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {\n                    return val.slice(1);\n                });\n                this._longDateFormat[key] = output;\n            }\n            return output;\n        },\n\n        isPM : function (input) {\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n            // Using charAt should be more compatible.\n            return ((input + '').toLowerCase().charAt(0) === 'p');\n        },\n\n        _meridiemParse : /[ap]\\.?m?\\.?/i,\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n\n        _calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[Last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        calendar : function (key, mom) {\n            var output = this._calendar[key];\n            return typeof output === 'function' ? output.apply(mom) : output;\n        },\n\n        _relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        relativeTime : function (number, withoutSuffix, string, isFuture) {\n            var output = this._relativeTime[string];\n            return (typeof output === 'function') ?\n                output(number, withoutSuffix, string, isFuture) :\n                output.replace(/%d/i, number);\n        },\n        pastFuture : function (diff, output) {\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);\n        },\n\n        ordinal : function (number) {\n            return this._ordinal.replace(\"%d\", number);\n        },\n        _ordinal : \"%d\",\n\n        preparse : function (string) {\n            return string;\n        },\n\n        postformat : function (string) {\n            return string;\n        },\n\n        week : function (mom) {\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;\n        },\n\n        _week : {\n            dow : 0, // Sunday is the first day of the week.\n            doy : 6  // The week that contains Jan 1st is the first week of the year.\n        },\n\n        _invalidDate: 'Invalid date',\n        invalidDate: function () {\n            return this._invalidDate;\n        }\n    });\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        values.abbr = key;\n        if (!languages[key]) {\n            languages[key] = new Language();\n        }\n        languages[key].set(values);\n        return languages[key];\n    }\n\n    // Remove a language from the `languages` cache. Mostly useful in tests.\n    function unloadLang(key) {\n        delete languages[key];\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.\n    function getLangDefinition(key) {\n        var i = 0, j, lang, next, split,\n            get = function (k) {\n                if (!languages[k] && hasModule) {\n                    try {\n                        require('./lang/' + k);\n                    } catch (e) { }\n                }\n                return languages[k];\n            };\n\n        if (!key) {\n            return moment.fn._lang;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            lang = get(key);\n            if (lang) {\n                return lang;\n            }\n            key = [key];\n        }\n\n        //pick the language from the array\n        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n        while (i < key.length) {\n            split = normalizeLanguage(key[i]).split('-');\n            j = split.length;\n            next = normalizeLanguage(key[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                lang = get(split.slice(0, j).join('-'));\n                if (lang) {\n                    return lang;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return moment.fn._lang;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n\n        if (!m.isValid()) {\n            return m.lang().invalidDate();\n        }\n\n        format = expandFormat(format, m.lang());\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, lang) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return lang.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token, config) {\n        var a;\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n        case 'GGGG':\n        case 'gggg':\n            return parseTokenFourDigits;\n        case 'YYYYY':\n        case 'GGGGG':\n        case 'ggggg':\n            return parseTokenSixDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n            return parseTokenWord;\n        case 'a':\n        case 'A':\n            return getLangDefinition(config._l)._meridiemParse;\n        case 'X':\n            return parseTokenTimestampMs;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'SSSS':\n            return parseTokenDigits;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'GG':\n        case 'gg':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n        case 'w':\n        case 'ww':\n        case 'W':\n        case 'WW':\n        case 'e':\n        case 'E':\n            return parseTokenOneOrTwoDigits;\n        default :\n            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), \"i\"));\n            return a;\n        }\n    }\n\n    function timezoneMinutesFromString(string) {\n        var tzchunk = (parseTokenTimezone.exec(string) || [])[0],\n            parts = (tzchunk + '').match(parseTimezoneChunker) || ['-', 0, 0],\n            minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? -minutes : minutes;\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, config) {\n        var a, datePartArray = config._a;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            if (input != null) {\n                datePartArray[MONTH] = toInt(input) - 1;\n            }\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            a = getLangDefinition(config._l).monthsParse(input);\n            // if we didn't find a month name, mark the date as invalid.\n            if (a != null) {\n                datePartArray[MONTH] = a;\n            } else {\n                config._pf.invalidMonth = input;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DD\n        case 'DD' :\n            if (input != null) {\n                datePartArray[DATE] = toInt(input);\n            }\n            break;\n        // DAY OF YEAR\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                config._dayOfYear = toInt(input);\n            }\n\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[YEAR] = toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n        case 'YYYYY' :\n            datePartArray[YEAR] = toInt(input);\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config._isPm = getLangDefinition(config._l).isPM(input);\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[HOUR] = toInt(input);\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[MINUTE] = toInt(input);\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[SECOND] = toInt(input);\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n        case 'SSSS' :\n            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);\n            break;\n        // UNIX TIMESTAMP WITH MS\n        case 'X':\n            config._d = new Date(parseFloat(input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config._useUTC = true;\n            config._tzm = timezoneMinutesFromString(input);\n            break;\n        case 'w':\n        case 'ww':\n        case 'W':\n        case 'WW':\n        case 'd':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n        case 'e':\n        case 'E':\n            token = token.substr(0, 1);\n            /* falls through */\n        case 'gg':\n        case 'gggg':\n        case 'GG':\n        case 'GGGG':\n        case 'GGGGG':\n            token = token.substr(0, 2);\n            if (input) {\n                config._w = config._w || {};\n                config._w[token] = input;\n            }\n            break;\n        }\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromConfig(config) {\n        var i, date, input = [], currentDate,\n            yearToUse, fixYear, w, temp, lang, weekday, week;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            fixYear = function (val) {\n                return val ?\n                  (val.length < 3 ? (parseInt(val, 10) > 68 ? '19' + val : '20' + val) : val) :\n                  (config._a[YEAR] == null ? moment().weekYear() : config._a[YEAR]);\n            };\n\n            w = config._w;\n            if (w.GG != null || w.W != null || w.E != null) {\n                temp = dayOfYearFromWeeks(fixYear(w.GG), w.W || 1, w.E, 4, 1);\n            }\n            else {\n                lang = getLangDefinition(config._l);\n                weekday = w.d != null ?  parseWeekday(w.d, lang) :\n                  (w.e != null ?  parseInt(w.e, 10) + lang._week.dow : 0);\n\n                week = parseInt(w.w, 10) || 1;\n\n                //if we're parsing 'd', then the low day numbers may be next week\n                if (w.d != null && weekday < lang._week.dow) {\n                    week++;\n                }\n\n                temp = dayOfYearFromWeeks(fixYear(w.gg), week, weekday, lang._week.doy, lang._week.dow);\n            }\n\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = config._a[YEAR] == null ? currentDate[YEAR] : config._a[YEAR];\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                config._pf._overflowDayOfYear = true;\n            }\n\n            date = makeUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid\n        input[HOUR] += toInt((config._tzm || 0) / 60);\n        input[MINUTE] += toInt((config._tzm || 0) % 60);\n\n        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);\n    }\n\n    function dateFromObject(config) {\n        var normalizedInput;\n\n        if (config._d) {\n            return;\n        }\n\n        normalizedInput = normalizeObjectUnits(config._i);\n        config._a = [\n            normalizedInput.year,\n            normalizedInput.month,\n            normalizedInput.day,\n            normalizedInput.hour,\n            normalizedInput.minute,\n            normalizedInput.second,\n            normalizedInput.millisecond\n        ];\n\n        dateFromConfig(config);\n    }\n\n    function currentDateArray(config) {\n        var now = new Date();\n        if (config._useUTC) {\n            return [\n                now.getUTCFullYear(),\n                now.getUTCMonth(),\n                now.getUTCDate()\n            ];\n        } else {\n            return [now.getFullYear(), now.getMonth(), now.getDate()];\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(config) {\n\n        config._a = [];\n        config._pf.empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var lang = getLangDefinition(config._l),\n            string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    config._pf.unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    config._pf.empty = false;\n                }\n                else {\n                    config._pf.unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                config._pf.unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        config._pf.charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            config._pf.unusedInput.push(string);\n        }\n\n        // handle am pm\n        if (config._isPm && config._a[HOUR] < 12) {\n            config._a[HOUR] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config._isPm === false && config._a[HOUR] === 12) {\n            config._a[HOUR] = 0;\n        }\n\n        dateFromConfig(config);\n        checkOverflow(config);\n    }\n\n    function unescapeFormat(s) {\n        return s.replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        });\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function regexpEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            config._pf.invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = extend({}, config);\n            initializeParsingFlags(tempConfig);\n            tempConfig._f = config._f[i];\n            makeDateFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += tempConfig._pf.charsLeftOver;\n\n            //or tokens\n            currentScore += tempConfig._pf.unusedTokens.length * 10;\n\n            tempConfig._pf.score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    // date from iso format\n    function makeDateFromString(config) {\n        var i,\n            string = config._i,\n            match = isoRegex.exec(string);\n\n        if (match) {\n            config._pf.iso = true;\n            for (i = 4; i > 0; i--) {\n                if (match[i]) {\n                    // match[5] should be \"T\" or undefined\n                    config._f = isoDates[i - 1] + (match[6] || \" \");\n                    break;\n                }\n            }\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    config._f += isoTimes[i][0];\n                    break;\n                }\n            }\n            if (parseTokenTimezone.exec(string)) {\n                config._f += \"Z\";\n            }\n            makeDateFromStringAndFormat(config);\n        }\n        else {\n            config._d = new Date(string);\n        }\n    }\n\n    function makeDateFromInput(config) {\n        var input = config._i,\n            matched = aspNetJsonRegex.exec(input);\n\n        if (input === undefined) {\n            config._d = new Date();\n        } else if (matched) {\n            config._d = new Date(+matched[1]);\n        } else if (typeof input === 'string') {\n            makeDateFromString(config);\n        } else if (isArray(input)) {\n            config._a = input.slice(0);\n            dateFromConfig(config);\n        } else if (isDate(input)) {\n            config._d = new Date(+input);\n        } else if (typeof(input) === 'object') {\n            dateFromObject(config);\n        } else {\n            config._d = new Date(input);\n        }\n    }\n\n    function makeDate(y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor doesn't accept years < 1970\n        if (y < 1970) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function makeUTCDate(y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n        if (y < 1970) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    function parseWeekday(input, language) {\n        if (typeof input === 'string') {\n            if (!isNaN(input)) {\n                input = parseInt(input, 10);\n            }\n            else {\n                input = language.weekdaysParse(input);\n                if (typeof input !== 'number') {\n                    return null;\n                }\n            }\n        }\n        return input;\n    }\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Week of Year\n    ************************************/\n\n\n    // firstDayOfWeek       0 = sun, 6 = sat\n    //                      the day of the week that starts the week\n    //                      (usually sunday or monday)\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat\n    //                      the first week is the week that contains the first\n    //                      of this day of the week\n    //                      (eg. ISO weeks use thursday (4))\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n            adjustedMoment;\n\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7;\n        }\n\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7;\n        }\n\n        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);\n        return {\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),\n            year: adjustedMoment.year()\n        };\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {\n        var d = new Date(Date.UTC(year, 0)).getUTCDay(),\n            daysToAdd, dayOfYear;\n\n        weekday = weekday != null ? weekday : firstDayOfWeek;\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0);\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;\n\n        return {\n            year: dayOfYear > 0 ? year : year - 1,\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear\n        };\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    function makeMoment(config) {\n        var input = config._i,\n            format = config._f;\n\n        if (typeof config._pf === 'undefined') {\n            initializeParsingFlags(config);\n        }\n\n        if (input === null) {\n            return moment.invalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = getLangDefinition().preparse(input);\n        }\n\n        if (moment.isMoment(input)) {\n            config = extend({}, input);\n\n            config._d = new Date(+input._d);\n        } else if (format) {\n            if (isArray(format)) {\n                makeDateFromStringAndArray(config);\n            } else {\n                makeDateFromStringAndFormat(config);\n            }\n        } else {\n            makeDateFromInput(config);\n        }\n\n        return new Moment(config);\n    }\n\n    moment = function (input, format, lang, strict) {\n        if (typeof(lang) === \"boolean\") {\n            strict = lang;\n            lang = undefined;\n        }\n        return makeMoment({\n            _i : input,\n            _f : format,\n            _l : lang,\n            _strict : strict,\n            _isUTC : false\n        });\n    };\n\n    // creating with utc\n    moment.utc = function (input, format, lang, strict) {\n        var m;\n\n        if (typeof(lang) === \"boolean\") {\n            strict = lang;\n            lang = undefined;\n        }\n        m = makeMoment({\n            _useUTC : true,\n            _isUTC : true,\n            _l : lang,\n            _i : input,\n            _f : format,\n            _strict : strict\n        }).utc();\n\n        return m;\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._input : (isNumber ? {} : input)),\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            parseIso,\n            timeEmpty,\n            dateTimeEmpty;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {\n            sign = (match[1] === \"-\") ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoDurationRegex.exec(input))) {\n            sign = (match[1] === \"-\") ? -1 : 1;\n            parseIso = function (inp) {\n                // We'd normally use ~~inp for this, but unfortunately it also\n                // converts floats to ints.\n                // inp may be undefined, so careful calling replace on it.\n                var res = inp && parseFloat(inp.replace(',', '.'));\n                // apply sign while we're at it\n                return (isNaN(res) ? 0 : res) * sign;\n            };\n            duration = {\n                y: parseIso(match[2]),\n                M: parseIso(match[3]),\n                d: parseIso(match[4]),\n                h: parseIso(match[5]),\n                m: parseIso(match[6]),\n                s: parseIso(match[7]),\n                w: parseIso(match[8])\n            };\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration && input.hasOwnProperty('_lang')) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    moment.updateOffset = function () {};\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        var r;\n        if (!key) {\n            return moment.fn._lang._abbr;\n        }\n        if (values) {\n            loadLang(normalizeLanguage(key), values);\n        } else if (values === null) {\n            unloadLang(key);\n            key = 'en';\n        } else if (!languages[key]) {\n            getLangDefinition(key);\n        }\n        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);\n        return r._abbr;\n    };\n\n    // returns language data\n    moment.langData = function (key) {\n        if (key && key._lang && key._lang._abbr) {\n            key = key._lang._abbr;\n        }\n        return getLangDefinition(key);\n    };\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n    for (i = lists.length - 1; i >= 0; --i) {\n        makeList(lists[i]);\n    }\n\n    moment.normalizeUnits = function (units) {\n        return normalizeUnits(units);\n    };\n\n    moment.invalid = function (flags) {\n        var m = moment.utc(NaN);\n        if (flags != null) {\n            extend(m._pf, flags);\n        }\n        else {\n            m._pf.userInvalidated = true;\n        }\n\n        return m;\n    };\n\n    moment.parseZone = function (input) {\n        return moment(input).parseZone();\n    };\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    extend(moment.fn = Moment.prototype, {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d + ((this._offset || 0) * 60000);\n        },\n\n        unix : function () {\n            return Math.floor(+this / 1000);\n        },\n\n        toString : function () {\n            return this.clone().lang('en').format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n        },\n\n        toDate : function () {\n            return this._offset ? new Date(+this) : this._d;\n        },\n\n        toISOString : function () {\n            return formatMoment(moment(this).utc(), 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds()\n            ];\n        },\n\n        isValid : function () {\n            return isValid(this);\n        },\n\n        isDSTShifted : function () {\n\n            if (this._a) {\n                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;\n            }\n\n            return false;\n        },\n\n        parsingFlags : function () {\n            return extend({}, this._pf);\n        },\n\n        invalidAt: function () {\n            return this._pf.overflow;\n        },\n\n        utc : function () {\n            return this.zone(0);\n        },\n\n        local : function () {\n            this.zone(0);\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            var output = formatMoment(this, inputString || moment.defaultFormat);\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            var dur;\n            // switch args to support add('s', 1) and add(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur;\n            // switch args to support subtract('s', 1) and subtract(1, 's')\n            if (typeof input === 'string') {\n                dur = moment.duration(+val, input);\n            } else {\n                dur = moment.duration(input, val);\n            }\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, units, asFloat) {\n            var that = this._isUTC ? moment(input).zone(this._offset || 0) : moment(input).local(),\n                zoneDiff = (this.zone() - that.zone()) * 6e4,\n                diff, output;\n\n            units = normalizeUnits(units);\n\n            if (units === 'year' || units === 'month') {\n                // average number of days in the months in the given dates\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2\n                // difference in months\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());\n                // adjust by taking difference in days, average number of days\n                // and dst in the given months.\n                output += ((this - moment(this).startOf('month')) -\n                        (that - moment(that).startOf('month'))) / diff;\n                // same as above but with zones, to negate all dst\n                output -= ((this.zone() - moment(this).startOf('month').zone()) -\n                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;\n                if (units === 'year') {\n                    output = output / 12;\n                }\n            } else {\n                diff = (this - that);\n                output = units === 'second' ? diff / 1e3 : // 1000\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                    diff;\n            }\n            return asFloat ? output : absRound(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().zone(this.zone()).startOf('day'), 'days', true),\n                format = diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n            return this.format(this.lang().calendar(format, this));\n        },\n\n        isLeapYear : function () {\n            return isLeapYear(this.year());\n        },\n\n        isDST : function () {\n            return (this.zone() < this.clone().month(0).zone() ||\n                this.zone() < this.clone().month(5).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            if (input != null) {\n                input = parseWeekday(input, this.lang());\n                return this.add({ d : input - day });\n            } else {\n                return day;\n            }\n        },\n\n        month : function (input) {\n            var utc = this._isUTC ? 'UTC' : '',\n                dayOfMonth;\n\n            if (input != null) {\n                if (typeof input === 'string') {\n                    input = this.lang().monthsParse(input);\n                    if (typeof input !== 'number') {\n                        return this;\n                    }\n                }\n\n                dayOfMonth = this.date();\n                this.date(1);\n                this._d['set' + utc + 'Month'](input);\n                this.date(Math.min(dayOfMonth, this.daysInMonth()));\n\n                moment.updateOffset(this);\n                return this;\n            } else {\n                return this._d['get' + utc + 'Month']();\n            }\n        },\n\n        startOf: function (units) {\n            units = normalizeUnits(units);\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n\n            // weeks are a special case\n            if (units === 'week') {\n                this.weekday(0);\n            } else if (units === 'isoWeek') {\n                this.isoWeekday(1);\n            }\n\n            return this;\n        },\n\n        endOf: function (units) {\n            units = normalizeUnits(units);\n            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);\n        },\n\n        isAfter: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) > +moment(input).startOf(units);\n        },\n\n        isBefore: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) < +moment(input).startOf(units);\n        },\n\n        isSame: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) === +moment(input).startOf(units);\n        },\n\n        min: function (other) {\n            other = moment.apply(null, arguments);\n            return other < this ? this : other;\n        },\n\n        max: function (other) {\n            other = moment.apply(null, arguments);\n            return other > this ? this : other;\n        },\n\n        zone : function (input) {\n            var offset = this._offset || 0;\n            if (input != null) {\n                if (typeof input === \"string\") {\n                    input = timezoneMinutesFromString(input);\n                }\n                if (Math.abs(input) < 16) {\n                    input = input * 60;\n                }\n                this._offset = input;\n                this._isUTC = true;\n                if (offset !== input) {\n                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);\n                }\n            } else {\n                return this._isUTC ? offset : this._d.getTimezoneOffset();\n            }\n            return this;\n        },\n\n        zoneAbbr : function () {\n            return this._isUTC ? \"UTC\" : \"\";\n        },\n\n        zoneName : function () {\n            return this._isUTC ? \"Coordinated Universal Time\" : \"\";\n        },\n\n        parseZone : function () {\n            if (typeof this._i === 'string') {\n                this.zone(this._i);\n            }\n            return this;\n        },\n\n        hasAlignedHourOffset : function (input) {\n            if (!input) {\n                input = 0;\n            }\n            else {\n                input = moment(input).zone();\n            }\n\n            return (this.zone() - input) % 60 === 0;\n        },\n\n        daysInMonth : function () {\n            return daysInMonth(this.year(), this.month());\n        },\n\n        dayOfYear : function (input) {\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;\n            return input == null ? dayOfYear : this.add(\"d\", (input - dayOfYear));\n        },\n\n        weekYear : function (input) {\n            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;\n            return input == null ? year : this.add(\"y\", (input - year));\n        },\n\n        isoWeekYear : function (input) {\n            var year = weekOfYear(this, 1, 4).year;\n            return input == null ? year : this.add(\"y\", (input - year));\n        },\n\n        week : function (input) {\n            var week = this.lang().week(this);\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        isoWeek : function (input) {\n            var week = weekOfYear(this, 1, 4).week;\n            return input == null ? week : this.add(\"d\", (input - week) * 7);\n        },\n\n        weekday : function (input) {\n            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;\n            return input == null ? weekday : this.add(\"d\", input - weekday);\n        },\n\n        isoWeekday : function (input) {\n            // behaves the same as moment#day except\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n            // as a setter, sunday should belong to the previous week.\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units]();\n        },\n\n        set : function (units, value) {\n            units = normalizeUnits(units);\n            if (typeof this[units] === 'function') {\n                this[units](value);\n            }\n            return this;\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (key) {\n            if (key === undefined) {\n                return this._lang;\n            } else {\n                this._lang = getLangDefinition(key);\n                return this;\n            }\n        }\n    });\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = moment.fn[name + 's'] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                moment.updateOffset(this);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n    // add plural methods\n    moment.fn.days = moment.fn.day;\n    moment.fn.months = moment.fn.month;\n    moment.fn.weeks = moment.fn.week;\n    moment.fn.isoWeeks = moment.fn.isoWeek;\n\n    // add aliased format methods\n    moment.fn.toJSON = moment.fn.toISOString;\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    extend(moment.duration.fn = Duration.prototype, {\n\n        _bubble : function () {\n            var milliseconds = this._milliseconds,\n                days = this._days,\n                months = this._months,\n                data = this._data,\n                seconds, minutes, hours, years;\n\n            // The following code bubbles up values, see the tests for\n            // examples of what that means.\n            data.milliseconds = milliseconds % 1000;\n\n            seconds = absRound(milliseconds / 1000);\n            data.seconds = seconds % 60;\n\n            minutes = absRound(seconds / 60);\n            data.minutes = minutes % 60;\n\n            hours = absRound(minutes / 60);\n            data.hours = hours % 24;\n\n            days += absRound(hours / 24);\n            data.days = days % 30;\n\n            months += absRound(days / 30);\n            data.months = months % 12;\n\n            years = absRound(months / 12);\n            data.years = years;\n        },\n\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              (this._months % 12) * 2592e6 +\n              toInt(this._months / 12) * 31536e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                output = relativeTime(difference, !withSuffix, this.lang());\n\n            if (withSuffix) {\n                output = this.lang().pastFuture(difference, output);\n            }\n\n            return this.lang().postformat(output);\n        },\n\n        add : function (input, val) {\n            // supports only 2.0-style add(1, 's') or add(moment)\n            var dur = moment.duration(input, val);\n\n            this._milliseconds += dur._milliseconds;\n            this._days += dur._days;\n            this._months += dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = moment.duration(input, val);\n\n            this._milliseconds -= dur._milliseconds;\n            this._days -= dur._days;\n            this._months -= dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units.toLowerCase() + 's']();\n        },\n\n        as : function (units) {\n            units = normalizeUnits(units);\n            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();\n        },\n\n        lang : moment.fn.lang,\n\n        toIsoString : function () {\n            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n            var years = Math.abs(this.years()),\n                months = Math.abs(this.months()),\n                days = Math.abs(this.days()),\n                hours = Math.abs(this.hours()),\n                minutes = Math.abs(this.minutes()),\n                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);\n\n            if (!this.asSeconds()) {\n                // this is the same as C#'s (Noda) and python (isodate)...\n                // but not other JS (goog.date)\n                return 'P0D';\n            }\n\n            return (this.asSeconds() < 0 ? '-' : '') +\n                'P' +\n                (years ? years + 'Y' : '') +\n                (months ? months + 'M' : '') +\n                (days ? days + 'D' : '') +\n                ((hours || minutes || seconds) ? 'T' : '') +\n                (hours ? hours + 'H' : '') +\n                (minutes ? minutes + 'M' : '') +\n                (seconds ? seconds + 'S' : '');\n        }\n    });\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n    moment.duration.fn.asMonths = function () {\n        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;\n    };\n\n\n    /************************************\n        Default Lang\n    ************************************/\n\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    /* EMBED_LANGUAGES */\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n    function makeGlobal(deprecate) {\n        var warned = false, local_moment = moment;\n        /*global ender:false */\n        if (typeof ender !== 'undefined') {\n            return;\n        }\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        if (deprecate) {\n            this.moment = function () {\n                if (!warned && console && console.warn) {\n                    warned = true;\n                    console.warn(\n                            \"Accessing Moment through the global scope is \" +\n                            \"deprecated, and will be removed in an upcoming \" +\n                            \"release.\");\n                }\n                return local_moment.apply(null, arguments);\n            };\n        } else {\n            this['moment'] = moment;\n        }\n    }\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n        makeGlobal(true);\n    } else if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", ['require','exports','module'],function (require, exports, module) {\n            if (module.config().noGlobal !== true) {\n                // If user provided noGlobal, he is aware of global\n                makeGlobal(module.config().noGlobal === undefined);\n            }\n\n            return moment;\n        });\n    } else {\n        makeGlobal();\n    }\n}).call(this);\n\n","// Used for things that are `require()`'d on on the client side but never used.\n// For example, [`ModelHelpers`](../../../both/model_helpers.html) loads\n// `jugglingdb-postgres` on the client but actually uses a web-appropriate adapter.\ndefine('fs',[],function() {\n  'use strict';\n\n  return {};\n});\n\n","// -----\n// The `timezoneJS.Date` object gives you full-blown timezone support, independent from the timezone set on the end-user's machine running the browser. It uses the Olson zoneinfo files for its timezone data.\n//\n// The constructor function and setter methods use proxy JavaScript Date objects behind the scenes, so you can use strings like '10/22/2006' with the constructor. You also get the same sensible wraparound behavior with numeric parameters (like setting a value of 14 for the month wraps around to the next March).\n//\n// The other significant difference from the built-in JavaScript Date is that `timezoneJS.Date` also has named properties that store the values of year, month, date, etc., so it can be directly serialized to JSON and used for data transfer.\n\n/*\n * Copyright 2010 Matthew Eernisse (mde@fleegix.org)\n * and Open Source Applications Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Credits: Ideas included from incomplete JS implementation of Olson\n * parser, \"XMLDAte\" by Philippe Goetz (philippe.goetz@wanadoo.fr)\n *\n * Contributions:\n * Jan Niehusmann\n * Ricky Romero\n * Preston Hunt (prestonhunt@gmail.com)\n * Dov. B Katz (dov.katz@morganstanley.com)\n * Peter Bergström (pbergstr@mac.com)\n * Long Ho\n */\n\n /*jslint laxcomma:true, laxbreak:true, expr:true*/\n(function () {\n  // Standard initialization stuff to make sure the library is\n  // usable on both client and server (node) side.\n  \"use strict\";\n  var root = this;\n\n  var timezoneJS;\n  if (typeof exports !== 'undefined') {\n    timezoneJS = exports;\n  } else {\n    timezoneJS = root.timezoneJS = {};\n  }\n\n  timezoneJS.VERSION = '0.4.4';\n\n  // Grab the ajax library from global context.\n  // This can be jQuery, Zepto or fleegix.\n  // You can also specify your own transport mechanism by declaring\n  // `timezoneJS.timezone.transport` to a `function`. More details will follow\n  var $ = root.$ || root.jQuery || root.Zepto\n    , fleegix = root.fleegix\n    // Declare constant list of days and months. Unfortunately this doesn't leave room for i18n due to the Olson data being in English itself\n    , DAYS = timezoneJS.Days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    , MONTHS = timezoneJS.Months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    , SHORT_MONTHS = {}\n    , SHORT_DAYS = {}\n    , EXACT_DATE_TIME = {}\n    , TZ_REGEXP = new RegExp('^[a-zA-Z]+/');\n\n  //`{ \"Jan\": 0, \"Feb\": 1, \"Mar\": 2, \"Apr\": 3, \"May\": 4, \"Jun\": 5, \"Jul\": 6, \"Aug\": 7, \"Sep\": 8, \"Oct\": 9, \"Nov\": 10, \"Dec\": 11 }`\n  for (var i = 0; i < MONTHS.length; i++) {\n    SHORT_MONTHS[MONTHS[i].substr(0, 3)] = i;\n  }\n\n  //`{ \"Sun\": 0, \"Mon\": 1, \"Tue\": 2, \"Wed\": 3, \"Thu\": 4, \"Fri\": 5, \"Sat\": 6 }`\n  for (i = 0; i < DAYS.length; i++) {\n    SHORT_DAYS[DAYS[i].substr(0, 3)] = i;\n  }\n\n\n  //Handle array indexOf in IE\n  //From https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\n  //Extending Array prototype causes IE to iterate thru extra element\n  var _arrIndexOf = Array.prototype.indexOf || function (el) {\n    if (this === null) {\n      throw new TypeError();\n    }\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (len === 0) {\n      return -1;\n    }\n    var n = 0;\n    if (arguments.length > 1) {\n      n = Number(arguments[1]);\n      if (n != n) { // shortcut for verifying if it's NaN\n        n = 0;\n      } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n      }\n    }\n    if (n >= len) {\n      return -1;\n    }\n    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n    for (; k < len; k++) {\n      if (k in t && t[k] === el) {\n        return k;\n      }\n    }\n    return -1;\n  };\n\n  // Format a number to the length = digits. For ex:\n  //\n  // `_fixWidth(2, 2) = '02'`\n  //\n  // `_fixWidth(1998, 2) = '98'`\n  //\n  // This is used to pad numbers in converting date to string in ISO standard.\n  var _fixWidth = function (number, digits) {\n    if (typeof number !== \"number\") { throw \"not a number: \" + number; }\n    var s = number.toString();\n    if (number.length > digits) {\n      return number.substr(number.length - digits, number.length);\n    }\n    while (s.length < digits) {\n      s = '0' + s;\n    }\n    return s;\n  };\n\n  // Abstraction layer for different transport layers, including fleegix/jQuery/Zepto\n  //\n  // Object `opts` include\n  //\n  // - `url`: url to ajax query\n  //\n  // - `async`: true for asynchronous, false otherwise. If false, return value will be response from URL. This is true by default\n  //\n  // - `success`: success callback function\n  //\n  // - `error`: error callback function\n  // Returns response from URL if async is false, otherwise the AJAX request object itself\n  var _transport = function (opts) {\n    if ((!fleegix || typeof fleegix.xhr === 'undefined') && (!jQuery || typeof jQuery.ajax === 'undefined')) {\n      throw new Error('Please use the Fleegix.js XHR module, jQuery ajax, Zepto ajax, or define your own transport mechanism for downloading zone files.');\n    }\n    if (!opts) return;\n    if (!opts.url) throw new Error ('URL must be specified');\n    if (!('async' in opts)) opts.async = true;\n    if (!opts.async) {\n      return fleegix && fleegix.xhr\n      ? fleegix.xhr.doReq({ url: opts.url, async: false })\n      : jQuery.ajax({ url : opts.url, async : false, dataType: 'text' }).responseText;\n    }\n    return fleegix && fleegix.xhr\n    ? fleegix.xhr.send({\n      url : opts.url,\n      method : 'get',\n      handleSuccess : opts.success,\n      handleErr : opts.error\n    })\n    : jQuery.ajax({\n      url : opts.url,\n      dataType: 'text',\n      method : 'GET',\n      error : opts.error,\n      success : opts.success\n    });\n  };\n\n  // Constructor, which is similar to that of the native Date object itself\n  timezoneJS.Date = function () {\n    var args = Array.prototype.slice.apply(arguments)\n    , dt = null\n    , tz = null\n    , arr = [];\n\n\n    //We support several different constructors, including all the ones from `Date` object\n    // with a timezone string at the end.\n    //\n    //- `[tz]`: Returns object with time in `tz` specified.\n    //\n    // - `utcMillis`, `[tz]`: Return object with UTC time = `utcMillis`, in `tz`.\n    //\n    // - `Date`, `[tz]`: Returns object with UTC time = `Date.getTime()`, in `tz`.\n    //\n    // - `year, month, [date,] [hours,] [minutes,] [seconds,] [millis,] [tz]: Same as `Date` object\n    // with tz.\n    //\n    // - `Array`: Can be any combo of the above.\n    //\n    //If 1st argument is an array, we can use it as a list of arguments itself\n    if (Object.prototype.toString.call(args[0]) === '[object Array]') {\n      args = args[0];\n    }\n    if (typeof args[args.length - 1] === 'string' && TZ_REGEXP.test(args[args.length - 1])) {\n      tz = args.pop();\n    }\n    var is_dt_local = false;\n    switch (args.length) {\n      case 0:\n        dt = new Date();\n        break;\n      case 1:\n        dt = new Date(args[0]);\n        // Date strings are local if they do not contain 'Z', 'T' or timezone offsets like '+0200'\n        //  - more info below\n        if (typeof args[0] == 'string' && args[0].search(/[+-][0-9]{4}/) == -1\n                && args[0].search(/Z/) == -1 && args[0].search(/T/) == -1) {\n            is_dt_local = true;\n        }\n        break;\n      default:\n        for (var i = 0; i < 7; i++) {\n          arr[i] = args[i] || 0;\n        }\n        dt = new Date(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]);\n        is_dt_local = true;\n        break;\n    }\n\n    this._useCache = false;\n    this._tzInfo = {};\n    this._day = 0;\n    this.year = 0;\n    this.month = 0;\n    this.date = 0;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n    this.timezone = tz || null;\n    // Tricky part:\n    // The date is either given as unambiguous UTC date or otherwise the date is assumed\n    // to be a date in timezone `tz` or a locale date if `tz` is not provided. Thus, to\n    // determine how to use `dt` we distinguish between the following cases:\n    //  - UTC   (is_dt_local = false)\n    //    `timezoneJS.Date(millis, [tz])`\n    //    `timezoneJS.Date(Date, [tz])`\n    //    `timezoneJS.Date(dt_str_tz, [tz])`\n    //  - local/timezone `tz`   (is_dt_local = true)\n    //    `timezoneJS.Date(year, mon, day, [hour], [min], [second], [tz])`\n    //    `timezoneJS.Date(dt_str, [tz])`\n    //\n    // `dt_str_tz` is a date string containing timezone information, i.e. containing 'Z', 'T' or\n    // /[+-][0-9]{4}/ (e.g. '+0200'), while `dt_str` is a string which does not contain \n    // timezone information. See: http://dygraphs.com/date-formats.html\n    if (is_dt_local) {\n       this.setFromDateObjProxy(dt);\n    } else {\n       this.setFromTimeProxy(dt.getTime(), tz);\n    }\n  };\n\n  // Implements most of the native Date object\n  timezoneJS.Date.prototype = {\n    getDate: function () { return this.date; },\n    getDay: function () { return this._day; },\n    getFullYear: function () { return this.year; },\n    getMonth: function () { return this.month; },\n    getYear: function () { return this.year - 1900; },\n    getHours: function () { return this.hours; },\n    getMilliseconds: function () { return this.milliseconds; },\n    getMinutes: function () { return this.minutes; },\n    getSeconds: function () { return this.seconds; },\n    getUTCDate: function () { return this.getUTCDateProxy().getUTCDate(); },\n    getUTCDay: function () { return this.getUTCDateProxy().getUTCDay(); },\n    getUTCFullYear: function () { return this.getUTCDateProxy().getUTCFullYear(); },\n    getUTCHours: function () { return this.getUTCDateProxy().getUTCHours(); },\n    getUTCMilliseconds: function () { return this.getUTCDateProxy().getUTCMilliseconds(); },\n    getUTCMinutes: function () { return this.getUTCDateProxy().getUTCMinutes(); },\n    getUTCMonth: function () { return this.getUTCDateProxy().getUTCMonth(); },\n    getUTCSeconds: function () { return this.getUTCDateProxy().getUTCSeconds(); },\n    // Time adjusted to user-specified timezone\n    getTime: function () {\n      return this._timeProxy + (this.getTimezoneOffset() * 60 * 1000);\n    },\n    getTimezone: function () { return this.timezone; },\n    getTimezoneOffset: function () { return this.getTimezoneInfo().tzOffset; },\n    getTimezoneAbbreviation: function () { return this.getTimezoneInfo().tzAbbr; },\n    getTimezoneInfo: function () {\n      if (this._useCache) return this._tzInfo;\n      var res;\n      // If timezone is specified, get the correct timezone info based on the Date given\n      if (this.timezone) {\n        res = this.timezone === 'Etc/UTC' || this.timezone === 'Etc/GMT'\n          ? { tzOffset: 0, tzAbbr: 'UTC' }\n          : timezoneJS.timezone.getTzInfo(this._timeProxy, this.timezone);\n      }\n      // If no timezone was specified, use the local browser offset\n      else {\n        res = { tzOffset: this.getLocalOffset(), tzAbbr: null };\n      }\n      this._tzInfo = res;\n      this._useCache = true;\n      return res;\n    },\n    getUTCDateProxy: function () {\n      var dt = new Date(this._timeProxy);\n      dt.setUTCMinutes(dt.getUTCMinutes() + this.getTimezoneOffset());\n      return dt;\n    },\n    setDate: function (date) {\n      this.setAttribute('date', date);\n      return this.getTime();\n    },\n    setFullYear: function (year, month, date) {\n      if (date !== undefined) { this.setAttribute('date', 1); }\n      this.setAttribute('year', year);\n      if (month !== undefined) { this.setAttribute('month', month); }\n      if (date !== undefined) { this.setAttribute('date', date); }\n      return this.getTime();\n    },\n    setMonth: function (month, date) {\n      this.setAttribute('month', month);\n      if (date !== undefined) { this.setAttribute('date', date); }\n      return this.getTime();\n    },\n    setYear: function (year) {\n      year = Number(year);\n      if (0 <= year && year <= 99) { year += 1900; }\n      this.setUTCAttribute('year', year);\n      return this.getTime();\n    },\n    setHours: function (hours, minutes, seconds, milliseconds) {\n      this.setAttribute('hours', hours);\n      if (minutes !== undefined) { this.setAttribute('minutes', minutes); }\n      if (seconds !== undefined) { this.setAttribute('seconds', seconds); }\n      if (milliseconds !== undefined) { this.setAttribute('milliseconds', milliseconds); }\n      return this.getTime();\n    },\n    setMinutes: function (minutes, seconds, milliseconds) {\n      this.setAttribute('minutes', minutes);\n      if (seconds !== undefined) { this.setAttribute('seconds', seconds); }\n      if (milliseconds !== undefined) { this.setAttribute('milliseconds', milliseconds); }\n      return this.getTime();\n    },\n    setSeconds: function (seconds, milliseconds) {\n      this.setAttribute('seconds', seconds);\n      if (milliseconds !== undefined) { this.setAttribute('milliseconds', milliseconds); }\n      return this.getTime();\n    },\n    setMilliseconds: function (milliseconds) {\n      this.setAttribute('milliseconds', milliseconds);\n      return this.getTime();\n    },\n    setTime: function (n) {\n      if (isNaN(n)) { throw new Error('Units must be a number.'); }\n      this.setFromTimeProxy(n, this.timezone);\n      return this.getTime();\n    },\n    setUTCFullYear: function (year, month, date) {\n      if (date !== undefined) { this.setUTCAttribute('date', 1); }\n      this.setUTCAttribute('year', year);\n      if (month !== undefined) { this.setUTCAttribute('month', month); }\n      if (date !== undefined) { this.setUTCAttribute('date', date); }\n      return this.getTime();\n    },\n    setUTCMonth: function (month, date) {\n      this.setUTCAttribute('month', month);\n      if (date !== undefined) { this.setUTCAttribute('date', date); }\n      return this.getTime();\n    },\n    setUTCDate: function (date) {\n      this.setUTCAttribute('date', date);\n      return this.getTime();\n    },\n    setUTCHours: function (hours, minutes, seconds, milliseconds) {\n      this.setUTCAttribute('hours', hours);\n      if (minutes !== undefined) { this.setUTCAttribute('minutes', minutes); }\n      if (seconds !== undefined) { this.setUTCAttribute('seconds', seconds); }\n      if (milliseconds !== undefined) { this.setUTCAttribute('milliseconds', milliseconds); }\n      return this.getTime();\n    },\n    setUTCMinutes: function (minutes, seconds, milliseconds) {\n      this.setUTCAttribute('minutes', minutes);\n      if (seconds !== undefined) { this.setUTCAttribute('seconds', seconds); }\n      if (milliseconds !== undefined) { this.setUTCAttribute('milliseconds', milliseconds); }\n      return this.getTime();\n    },\n    setUTCSeconds: function (seconds, milliseconds) {\n      this.setUTCAttribute('seconds', seconds);\n      if (milliseconds !== undefined) { this.setUTCAttribute('milliseconds', milliseconds); }\n      return this.getTime();\n    },\n    setUTCMilliseconds: function (milliseconds) {\n      this.setUTCAttribute('milliseconds', milliseconds);\n      return this.getTime();\n    },\n    setFromDateObjProxy: function (dt) {\n      this.year = dt.getFullYear();\n      this.month = dt.getMonth();\n      this.date = dt.getDate();\n      this.hours = dt.getHours();\n      this.minutes = dt.getMinutes();\n      this.seconds = dt.getSeconds();\n      this.milliseconds = dt.getMilliseconds();\n      this._day = dt.getDay();\n      this._dateProxy = dt;\n      this._timeProxy = Date.UTC(this.year, this.month, this.date, this.hours, this.minutes, this.seconds, this.milliseconds);\n      this._useCache = false;\n    },\n    setFromTimeProxy: function (utcMillis, tz) {\n      var dt = new Date(utcMillis);\n      var tzOffset = tz ? timezoneJS.timezone.getTzInfo(utcMillis, tz, true).tzOffset : dt.getTimezoneOffset();\n      dt.setTime(utcMillis + (dt.getTimezoneOffset() - tzOffset) * 60000);\n      this.setFromDateObjProxy(dt);\n    },\n    setAttribute: function (unit, n) {\n      if (isNaN(n)) { throw new Error('Units must be a number.'); }\n      var dt = this._dateProxy;\n      var meth = unit === 'year' ? 'FullYear' : unit.substr(0, 1).toUpperCase() + unit.substr(1);\n      dt['set' + meth](n);\n      this.setFromDateObjProxy(dt);\n    },\n    setUTCAttribute: function (unit, n) {\n      if (isNaN(n)) { throw new Error('Units must be a number.'); }\n      var meth = unit === 'year' ? 'FullYear' : unit.substr(0, 1).toUpperCase() + unit.substr(1);\n      var dt = this.getUTCDateProxy();\n      dt['setUTC' + meth](n);\n      dt.setUTCMinutes(dt.getUTCMinutes() - this.getTimezoneOffset());\n      this.setFromTimeProxy(dt.getTime() + this.getTimezoneOffset() * 60000, this.timezone);\n    },\n    setTimezone: function (tz) {\n      var previousOffset = this.getTimezoneInfo().tzOffset;\n      this.timezone = tz;\n      this._useCache = false;\n      // Set UTC minutes offsets by the delta of the two timezones\n      this.setUTCMinutes(this.getUTCMinutes() - this.getTimezoneInfo().tzOffset + previousOffset);\n    },\n    removeTimezone: function () {\n      this.timezone = null;\n      this._useCache = false;\n    },\n    valueOf: function () { return this.getTime(); },\n    clone: function () {\n      return this.timezone ? new timezoneJS.Date(this.getTime(), this.timezone) : new timezoneJS.Date(this.getTime());\n    },\n    toGMTString: function () { return this.toString('EEE, dd MMM yyyy HH:mm:ss Z', 'Etc/GMT'); },\n    toLocaleString: function () {},\n    toLocaleDateString: function () {},\n    toLocaleTimeString: function () {},\n    toSource: function () {},\n    toISOString: function () { return this.toString('yyyy-MM-ddTHH:mm:ss.SSS', 'Etc/UTC') + 'Z'; },\n    toJSON: function () { return this.toISOString(); },\n    // Allows different format following ISO8601 format:\n    toString: function (format, tz) {\n      // Default format is the same as toISOString\n      if (!format) format = 'yyyy-MM-dd HH:mm:ss';\n      var result = format;\n      var tzInfo = tz ? timezoneJS.timezone.getTzInfo(this.getTime(), tz) : this.getTimezoneInfo();\n      var _this = this;\n      // If timezone is specified, get a clone of the current Date object and modify it\n      if (tz) {\n        _this = this.clone();\n        _this.setTimezone(tz);\n      }\n      var hours = _this.getHours();\n      return result\n      // fix the same characters in Month names\n      .replace(/a+/g, function () { return 'k'; })\n      // `y`: year\n      .replace(/y+/g, function (token) { return _fixWidth(_this.getFullYear(), token.length); })\n      // `d`: date\n      .replace(/d+/g, function (token) { return _fixWidth(_this.getDate(), token.length); })\n      // `m`: minute\n      .replace(/m+/g, function (token) { return _fixWidth(_this.getMinutes(), token.length); })\n      // `s`: second\n      .replace(/s+/g, function (token) { return _fixWidth(_this.getSeconds(), token.length); })\n      // `S`: millisecond\n      .replace(/S+/g, function (token) { return _fixWidth(_this.getMilliseconds(), token.length); })\n      // 'h': 12 hour format\n      .replace(/h+/g, function (token) { return _fixWidth( ((hours%12) === 0) ? 12 : (hours % 12), token.length); })\n      // `M`: month. Note: `MM` will be the numeric representation (e.g February is 02) but `MMM` will be text representation (e.g February is Feb)\n      .replace(/M+/g, function (token) {\n        var _month = _this.getMonth(),\n        _len = token.length;\n        if (_len > 3) {\n          return timezoneJS.Months[_month];\n        } else if (_len > 2) {\n          return timezoneJS.Months[_month].substring(0, _len);\n        }\n        return _fixWidth(_month + 1, _len);\n      })\n      // `k`: AM/PM\n      .replace(/k+/g, function () {\n        if (hours >= 12) {\n          if (hours > 12) {\n            hours -= 12;\n          }\n          return 'PM';\n        }\n        return 'AM';\n      })\n      // `H`: hour\n      .replace(/H+/g, function (token) { return _fixWidth(hours, token.length); })\n      // `E`: day\n      .replace(/E+/g, function (token) { return DAYS[_this.getDay()].substring(0, token.length); })\n      // `Z`: timezone abbreviation\n      .replace(/Z+/gi, function () { return tzInfo.tzAbbr; });\n    },\n    toUTCString: function () { return this.toGMTString(); },\n    civilToJulianDayNumber: function (y, m, d) {\n      var a;\n      // Adjust for zero-based JS-style array\n      m++;\n      if (m > 12) {\n        a = parseInt(m/12, 10);\n        m = m % 12;\n        y += a;\n      }\n      if (m <= 2) {\n        y -= 1;\n        m += 12;\n      }\n      a = Math.floor(y / 100);\n      var b = 2 - a + Math.floor(a / 4)\n        , jDt = Math.floor(365.25 * (y + 4716)) + Math.floor(30.6001 * (m + 1)) + d + b - 1524;\n      return jDt;\n    },\n    getLocalOffset: function () {\n      return this._dateProxy.getTimezoneOffset();\n    }\n  };\n\n\n  timezoneJS.timezone = new function () {\n    var _this = this\n      , regionMap = {'Etc':'etcetera','EST':'northamerica','MST':'northamerica','HST':'northamerica','EST5EDT':'northamerica','CST6CDT':'northamerica','MST7MDT':'northamerica','PST8PDT':'northamerica','America':'northamerica','Pacific':'australasia','Atlantic':'europe','Africa':'africa','Indian':'africa','Antarctica':'antarctica','Asia':'asia','Australia':'australasia','Europe':'europe','WET':'europe','CET':'europe','MET':'europe','EET':'europe'}\n      , regionExceptions = {'Pacific/Honolulu':'northamerica','Atlantic/Bermuda':'northamerica','Atlantic/Cape_Verde':'africa','Atlantic/St_Helena':'africa','Indian/Kerguelen':'antarctica','Indian/Chagos':'asia','Indian/Maldives':'asia','Indian/Christmas':'australasia','Indian/Cocos':'australasia','America/Danmarkshavn':'europe','America/Scoresbysund':'europe','America/Godthab':'europe','America/Thule':'europe','Asia/Istanbul':'europe','Asia/Yekaterinburg':'europe','Asia/Omsk':'europe','Asia/Novosibirsk':'europe','Asia/Krasnoyarsk':'europe','Asia/Irkutsk':'europe','Asia/Yakutsk':'europe','Asia/Vladivostok':'europe','Asia/Sakhalin':'europe','Asia/Magadan':'europe','Asia/Kamchatka':'europe','Asia/Anadyr':'europe','Africa/Ceuta':'europe','America/Argentina/Buenos_Aires':'southamerica','America/Argentina/San_Luis':'southamerica','America/Argentina/Cordoba':'southamerica','America/Argentina/Tucuman':'southamerica','America/Argentina/La_Rioja':'southamerica','America/Argentina/San_Juan':'southamerica','America/Argentina/Jujuy':'southamerica','America/Argentina/Catamarca':'southamerica','America/Argentina/Mendoza':'southamerica','America/Argentina/Rio_Gallegos':'southamerica','America/Argentina/Ushuaia':'southamerica','America/Aruba':'southamerica','America/La_Paz':'southamerica','America/Noronha':'southamerica','America/Belem':'southamerica','America/Fortaleza':'southamerica','America/Recife':'southamerica','America/Araguaina':'southamerica','America/Maceio':'southamerica','America/Bahia':'southamerica','America/Sao_Paulo':'southamerica','America/Campo_Grande':'southamerica','America/Cuiaba':'southamerica','America/Porto_Velho':'southamerica','America/Boa_Vista':'southamerica','America/Manaus':'southamerica','America/Eirunepe':'southamerica','America/Rio_Branco':'southamerica','America/Santiago':'southamerica','Pacific/Easter':'southamerica','America/Bogota':'southamerica','America/Curacao':'southamerica','America/Guayaquil':'southamerica','Pacific/Galapagos':'southamerica','Atlantic/Stanley':'southamerica','America/Cayenne':'southamerica','America/Guyana':'southamerica','America/Asuncion':'southamerica','America/Lima':'southamerica','Atlantic/South_Georgia':'southamerica','America/Paramaribo':'southamerica','America/Port_of_Spain':'southamerica','America/Montevideo':'southamerica','America/Caracas':'southamerica'};\n    function invalidTZError(t) { throw new Error('Timezone \"' + t + '\" is either incorrect, or not loaded in the timezone registry.'); }\n    function builtInLoadZoneFile(fileName, opts) {\n      var url = _this.zoneFileBasePath + '/' + fileName;\n      return !opts || !opts.async\n      ? _this.parseZones(_this.transport({ url : url, async : false }))\n      : _this.transport({\n        async: true,\n        url : url,\n        success : function (str) {\n          return _this.parseZones(str) && typeof opts.callback === 'function' && opts.callback();\n        },\n        error : function () {\n          throw new Error('Error retrieving \"' + url + '\" zoneinfo files');\n        }\n      });\n    }\n    function getRegionForTimezone(tz) {\n      var exc = regionExceptions[tz]\n        , reg\n        , ret;\n      if (exc) return exc;\n      reg = tz.split('/')[0];\n      ret = regionMap[reg];\n      // If there's nothing listed in the main regions for this TZ, check the 'backward' links\n      if (ret) return ret;\n      var link = _this.zones[tz];\n      if (typeof link === 'string') {\n        return getRegionForTimezone(link);\n      }\n      // Backward-compat file hasn't loaded yet, try looking in there\n      if (!_this.loadedZones.backward) {\n        // This is for obvious legacy zones (e.g., Iceland) that don't even have a prefix like \"America/\" that look like normal zones\n        _this.loadZoneFile('backward');\n        return getRegionForTimezone(tz);\n      }\n      invalidTZError(tz);\n    }\n    //str has format hh:mm, can be negative\n    function parseTimeString(str) {\n      var pat = /(\\d+)(?::0*(\\d*))?(?::0*(\\d*))?([wsugz])?$/;\n      var hms = str.match(pat);\n      hms[1] = parseInt(hms[1], 10);\n      hms[2] = hms[2] ? parseInt(hms[2], 10) : 0;\n      hms[3] = hms[3] ? parseInt(hms[3], 10) : 0;\n      return hms.slice(1, 5);\n    }\n    //z is something like `[ '-3:44:40', '-', 'LMT', '1911', 'May', '15', '' ]` or `[ '-5:00', '-', 'EST', '1974', 'Apr', '28', '2:00' ]`\n    function processZone(z) {\n      if (!z[3]) { return; }\n      var yea = parseInt(z[3], 10)\n        , mon = 11\n        , dat = 31;\n      //If month is there\n      if (z[4]) {\n        mon = SHORT_MONTHS[z[4].substr(0, 3)];\n        dat = parseInt(z[5], 10) || 1;\n      }\n      var t = z[6] ? parseTimeString(z[6]) : [0, 0, 0];\n      return [yea, mon, dat, t[0], t[1], t[2]];\n    }\n    function getZone(dt, tz) {\n      var utcMillis = typeof dt === 'number' ? dt : new Date(dt).getTime();\n      var t = tz;\n      var zoneList = _this.zones[t];\n      // Follow links to get to an actual zone\n      while (typeof zoneList === \"string\") {\n        t = zoneList;\n        zoneList = _this.zones[t];\n      }\n      if (!zoneList) {\n        // Backward-compat file hasn't loaded yet, try looking in there\n        if (!_this.loadedZones.backward) {\n          //This is for backward entries like \"America/Fort_Wayne\" that\n          // getRegionForTimezone *thinks* it has a region file and zone\n          // for (e.g., America => 'northamerica'), but in reality it's a\n          // legacy zone we need the backward file for.\n          _this.loadZoneFile('backward');\n          return getZone(dt, tz);\n        }\n        invalidTZError(t);\n      }\n      if (zoneList.length === 0) {\n        throw new Error('No Zone found for \"' + tz + '\" on ' + dt);\n      }\n      //Do backwards lookup since most use cases deal with newer dates.\n      for (var i = zoneList.length - 1; i >= 0; i--) {\n        var z = zoneList[i];\n        if (z[3] && utcMillis > z[3]) break;\n      }\n      return zoneList[i+1];\n    }\n    function getBasicOffset(time) {\n      var off = parseTimeString(time)\n        , adj = time.charAt(0) === '-' ? -1 : 1;\n      off = adj * (((off[0] * 60 + off[1]) * 60 + off[2]) * 1000);\n      return off/60/1000;\n    }\n    function getAdjustedOffset(off, min) {\n      return -Math.ceil(min - off);\n    }\n\n    //if isUTC is true, date is given in UTC, otherwise it's given\n    // in local time (ie. date.getUTC*() returns local time components)\n    function getRule(dt, zone, isUTC) {\n      var date = typeof dt === 'number' ? new Date(dt) : dt;\n      var ruleset = zone[1];\n      var basicOffset = zone[0];\n\n      // If the zone has a DST rule like '1:00', create a rule and return it\n      // instead of looking it up in the parsed rules\n      var staticDstMatch = ruleset.match(/^([0-9]):([0-9][0-9])$/);\n      if (staticDstMatch) {\n        return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], parseInt(staticDstMatch[1],10) * 60 + parseInt(staticDstMatch[2], 10), '-'];\n      }\n\n      //Convert a date to UTC. Depending on the 'type' parameter, the date\n      // parameter may be:\n      //\n      // - `u`, `g`, `z`: already UTC (no adjustment).\n      //\n      // - `s`: standard time (adjust for time zone offset but not for DST)\n      //\n      // - `w`: wall clock time (adjust for both time zone and DST offset).\n      //\n      // DST adjustment is done using the rule given as third argument.\n      var convertDateToUTC = function (date, type, rule) {\n        var offset = 0;\n\n        if (type === 'u' || type === 'g' || type === 'z') { // UTC\n          offset = 0;\n        } else if (type === 's') { // Standard Time\n          offset = basicOffset;\n        } else if (type === 'w' || !type) { // Wall Clock Time\n          offset = getAdjustedOffset(basicOffset, rule[6]);\n        } else {\n          throw new Error(\"unknown type \" + type);\n        }\n        offset *= 60 * 1000; // to millis\n\n        return new Date(date.getTime() + offset);\n      };\n\n      //Step 1:  Find applicable rules for this year.\n      //\n      //Step 2:  Sort the rules by effective date.\n      //\n      //Step 3:  Check requested date to see if a rule has yet taken effect this year.  If not,\n      //\n      //Step 4:  Get the rules for the previous year.  If there isn't an applicable rule for last year, then\n      // there probably is no current time offset since they seem to explicitly turn off the offset\n      // when someone stops observing DST.\n      //\n      // FIXME if this is not the case and we'll walk all the way back (ugh).\n      //\n      //Step 5:  Sort the rules by effective date.\n      //Step 6:  Apply the most recent rule before the current time.\n      var convertRuleToExactDateAndTime = function (yearAndRule, prevRule) {\n        var year = yearAndRule[0]\n          , rule = yearAndRule[1];\n          // Assume that the rule applies to the year of the given date.\n\n        var hms = rule[5];\n        var effectiveDate;\n\n        if (!EXACT_DATE_TIME[year])\n          EXACT_DATE_TIME[year] = {};\n\n        // Result for given parameters is already stored\n        if (EXACT_DATE_TIME[year][rule])\n          effectiveDate = EXACT_DATE_TIME[year][rule];\n        else {\n          //If we have a specific date, use that!\n          if (!isNaN(rule[4])) {\n            effectiveDate = new Date(Date.UTC(year, SHORT_MONTHS[rule[3]], rule[4], hms[0], hms[1], hms[2], 0));\n          }\n          //Let's hunt for the date.\n          else {\n            var targetDay\n              , operator;\n            //Example: `lastThu`\n            if (rule[4].substr(0, 4) === \"last\") {\n              // Start at the last day of the month and work backward.\n              effectiveDate = new Date(Date.UTC(year, SHORT_MONTHS[rule[3]] + 1, 1, hms[0] - 24, hms[1], hms[2], 0));\n              targetDay = SHORT_DAYS[rule[4].substr(4, 3)];\n              operator = \"<=\";\n            }\n            //Example: `Sun>=15`\n            else {\n              //Start at the specified date.\n              effectiveDate = new Date(Date.UTC(year, SHORT_MONTHS[rule[3]], rule[4].substr(5), hms[0], hms[1], hms[2], 0));\n              targetDay = SHORT_DAYS[rule[4].substr(0, 3)];\n              operator = rule[4].substr(3, 2);\n            }\n            var ourDay = effectiveDate.getUTCDay();\n            //Go forwards.\n            if (operator === \">=\") {\n              effectiveDate.setUTCDate(effectiveDate.getUTCDate() + (targetDay - ourDay + ((targetDay < ourDay) ? 7 : 0)));\n            }\n            //Go backwards.  Looking for the last of a certain day, or operator is \"<=\" (less likely).\n            else {\n              effectiveDate.setUTCDate(effectiveDate.getUTCDate() + (targetDay - ourDay - ((targetDay > ourDay) ? 7 : 0)));\n            }\n          }\n          EXACT_DATE_TIME[year][rule] = effectiveDate;\n        }\n\n\n        //If previous rule is given, correct for the fact that the starting time of the current\n        // rule may be specified in local time.\n        if (prevRule) {\n          effectiveDate = convertDateToUTC(effectiveDate, hms[3], prevRule);\n        }\n        return effectiveDate;\n      };\n\n      var findApplicableRules = function (year, ruleset) {\n        var applicableRules = [];\n        for (var i = 0; ruleset && i < ruleset.length; i++) {\n          //Exclude future rules.\n          if (ruleset[i][0] <= year &&\n              (\n                // Date is in a set range.\n                ruleset[i][1] >= year ||\n                // Date is in an \"only\" year.\n                  (ruleset[i][0] === year && ruleset[i][1] === \"only\") ||\n                //We're in a range from the start year to infinity.\n                    ruleset[i][1] === \"max\"\n          )\n             ) {\n               //It's completely okay to have any number of matches here.\n               // Normally we should only see two, but that doesn't preclude other numbers of matches.\n               // These matches are applicable to this year.\n               applicableRules.push([year, ruleset[i]]);\n             }\n        }\n        return applicableRules;\n      };\n\n      var compareDates = function (a, b, prev) {\n        var year, rule;\n        if (!(a instanceof Date)) {\n          year = a[0];\n          rule = a[1];\n          a = (!prev && EXACT_DATE_TIME[year] && EXACT_DATE_TIME[year][rule])\n            ? EXACT_DATE_TIME[year][rule]\n            : convertRuleToExactDateAndTime(a, prev);\n        } else if (prev) {\n          a = convertDateToUTC(a, isUTC ? 'u' : 'w', prev);\n        }\n        if (!(b instanceof Date)) {\n          year = b[0];\n          rule = b[1];\n          b = (!prev && EXACT_DATE_TIME[year] && EXACT_DATE_TIME[year][rule]) ? EXACT_DATE_TIME[year][rule]\n            : convertRuleToExactDateAndTime(b, prev);\n        } else if (prev) {\n          b = convertDateToUTC(b, isUTC ? 'u' : 'w', prev);\n        }\n        a = Number(a);\n        b = Number(b);\n        return a - b;\n      };\n\n      var year = date.getUTCFullYear();\n      var applicableRules;\n\n      applicableRules = findApplicableRules(year, _this.rules[ruleset]);\n      applicableRules.push(date);\n      //While sorting, the time zone in which the rule starting time is specified\n      // is ignored. This is ok as long as the timespan between two DST changes is\n      // larger than the DST offset, which is probably always true.\n      // As the given date may indeed be close to a DST change, it may get sorted\n      // to a wrong position (off by one), which is corrected below.\n      applicableRules.sort(compareDates);\n\n      //If there are not enough past DST rules...\n      if (_arrIndexOf.call(applicableRules, date) < 2) {\n        applicableRules = applicableRules.concat(findApplicableRules(year-1, _this.rules[ruleset]));\n        applicableRules.sort(compareDates);\n      }\n      var pinpoint = _arrIndexOf.call(applicableRules, date);\n      if (pinpoint > 1 && compareDates(date, applicableRules[pinpoint-1], applicableRules[pinpoint-2][1]) < 0) {\n        //The previous rule does not really apply, take the one before that.\n        return applicableRules[pinpoint - 2][1];\n      } else if (pinpoint > 0 && pinpoint < applicableRules.length - 1 && compareDates(date, applicableRules[pinpoint+1], applicableRules[pinpoint-1][1]) > 0) {\n\n        //The next rule does already apply, take that one.\n        return applicableRules[pinpoint + 1][1];\n      } else if (pinpoint === 0) {\n        //No applicable rule found in this and in previous year.\n        return null;\n      }\n      return applicableRules[pinpoint - 1][1];\n    }\n    function getAbbreviation(zone, rule) {\n      var base = zone[2];\n      if (base.indexOf('%s') > -1) {\n        var repl;\n        if (rule) {\n          repl = rule[7] === '-' ? '' : rule[7];\n        }\n        //FIXME: Right now just falling back to Standard --\n        // apparently ought to use the last valid rule,\n        // although in practice that always ought to be Standard\n        else {\n          repl = 'S';\n        }\n        return base.replace('%s', repl);\n      } else if (base.indexOf('/') > -1) {\n        //Chose one of two alternative strings.\n        return base.split(\"/\", 2)[rule[6] ? 1 : 0];\n      }\n      return base;\n    }\n\n    this.zoneFileBasePath = null;\n    this.zoneFiles = ['africa', 'antarctica', 'asia', 'australasia', 'backward', 'etcetera', 'europe', 'northamerica', 'pacificnew', 'southamerica'];\n    this.loadingSchemes = {\n      PRELOAD_ALL: 'preloadAll',\n      LAZY_LOAD: 'lazyLoad',\n      MANUAL_LOAD: 'manualLoad'\n    };\n    this.getRegionForTimezone = getRegionForTimezone;\n    this.loadingScheme = this.loadingSchemes.LAZY_LOAD;\n    this.loadedZones = {};\n    this.zones = {};\n    this.rules = {};\n\n    this.init = function (o) {\n      var opts = { async: true }\n        , def = this.loadingScheme === this.loadingSchemes.PRELOAD_ALL\n          ? this.zoneFiles\n          : (this.defaultZoneFile || 'northamerica')\n        , done = 0\n        , callbackFn;\n      //Override default with any passed-in opts\n      for (var p in o) {\n        opts[p] = o[p];\n      }\n      if (typeof def === 'string') {\n        return this.loadZoneFile(def, opts);\n      }\n      //Wraps callback function in another one that makes\n      // sure all files have been loaded.\n      callbackFn = opts.callback;\n      opts.callback = function () {\n        done++;\n        (done === def.length) && typeof callbackFn === 'function' && callbackFn();\n      };\n      for (var i = 0; i < def.length; i++) {\n        this.loadZoneFile(def[i], opts);\n      }\n    };\n\n    //Get the zone files via XHR -- if the sync flag\n    // is set to true, it's being called by the lazy-loading\n    // mechanism, so the result needs to be returned inline.\n    this.loadZoneFile = function (fileName, opts) {\n      if (typeof this.zoneFileBasePath === 'undefined') {\n        throw new Error('Please define a base path to your zone file directory -- timezoneJS.timezone.zoneFileBasePath.');\n      }\n      //Ignore already loaded zones.\n      if (this.loadedZones[fileName]) {\n        return;\n      }\n      this.loadedZones[fileName] = true;\n      return builtInLoadZoneFile(fileName, opts);\n    };\n    this.loadZoneJSONData = function (url, sync) {\n      var processData = function (data) {\n        data = eval('('+ data +')');\n        for (var z in data.zones) {\n          _this.zones[z] = data.zones[z];\n        }\n        for (var r in data.rules) {\n          _this.rules[r] = data.rules[r];\n        }\n      };\n      return sync\n      ? processData(_this.transport({ url : url, async : false }))\n      : _this.transport({ url : url, success : processData });\n    };\n    this.loadZoneDataFromObject = function (data) {\n      if (!data) { return; }\n      for (var z in data.zones) {\n        _this.zones[z] = data.zones[z];\n      }\n      for (var r in data.rules) {\n        _this.rules[r] = data.rules[r];\n      }\n    };\n    this.getAllZones = function () {\n      var arr = [];\n      for (var z in this.zones) { arr.push(z); }\n      return arr.sort();\n    };\n    this.parseZones = function (str) {\n      var lines = str.split('\\n')\n        , arr = []\n        , chunk = ''\n        , l\n        , zone = null\n        , rule = null;\n      for (var i = 0; i < lines.length; i++) {\n        l = lines[i];\n        if (l.match(/^\\s/)) {\n          l = \"Zone \" + zone + l;\n        }\n        l = l.split(\"#\")[0];\n        if (l.length > 3) {\n          arr = l.split(/\\s+/);\n          chunk = arr.shift();\n          //Ignore Leap.\n          switch (chunk) {\n            case 'Zone':\n              zone = arr.shift();\n              if (!_this.zones[zone]) {\n                _this.zones[zone] = [];\n              }\n              if (arr.length < 3) break;\n              //Process zone right here and replace 3rd element with the processed array.\n              arr.splice(3, arr.length, processZone(arr));\n              if (arr[3]) arr[3] = Date.UTC.apply(null, arr[3]);\n              arr[0] = -getBasicOffset(arr[0]);\n              _this.zones[zone].push(arr);\n              break;\n            case 'Rule':\n              rule = arr.shift();\n              if (!_this.rules[rule]) {\n                _this.rules[rule] = [];\n              }\n              //Parse int FROM year and TO year\n              arr[0] = parseInt(arr[0], 10);\n              arr[1] = parseInt(arr[1], 10) || arr[1];\n              //Parse time string AT\n              arr[5] = parseTimeString(arr[5]);\n              //Parse offset SAVE\n              arr[6] = getBasicOffset(arr[6]);\n              _this.rules[rule].push(arr);\n              break;\n            case 'Link':\n              //No zones for these should already exist.\n              if (_this.zones[arr[1]]) {\n                throw new Error('Error with Link ' + arr[1] + '. Cannot create link of a preexisted zone.');\n              }\n              //Create the link.\n              _this.zones[arr[1]] = arr[0];\n              break;\n          }\n        }\n      }\n      return true;\n    };\n    //Expose transport mechanism and allow overwrite.\n    this.transport = _transport;\n    this.getTzInfo = function (dt, tz, isUTC) {\n      //Lazy-load any zones not yet loaded.\n      if (this.loadingScheme === this.loadingSchemes.LAZY_LOAD) {\n        //Get the correct region for the zone.\n        var zoneFile = getRegionForTimezone(tz);\n        if (!zoneFile) {\n          throw new Error('Not a valid timezone ID.');\n        }\n        if (!this.loadedZones[zoneFile]) {\n          //Get the file and parse it -- use synchronous XHR.\n          this.loadZoneFile(zoneFile);\n        }\n      }\n      var z = getZone(dt, tz);\n      var off = z[0];\n      //See if the offset needs adjustment.\n      var rule = getRule(dt, z, isUTC);\n      if (rule) {\n        off = getAdjustedOffset(off, rule[6]);\n      }\n      var abbr = getAbbreviation(z, rule);\n      return { tzOffset: off, tzAbbr: abbr };\n    };\n  };\n}).call(this);\n\ndefine(\"timezone-js\", (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.window.timezoneJS;\n    };\n}(this)));\n\n","/*\n# time\nAll things time. Uses [Moment](http://momentjs.com/) and\n[TimezoneJS](https://github.com/mde/timezone-js) to present a number of simple\ntime-related methods.\n\n__Server__: On the server side, timezone data is loaded from either 'lib/vendor/tz' or a\ndirectory you specify with the TIME\\_ZONE\\_DATA environment variable.\n\n__Browser__: To make browser usage easier, this project has a\n[grunt task](../../Gruntfile.html) which injects time zone data into the file itself.\n_NOTE: If you don't end up using one of these versions of 'thehelp-core', `timezone-js`\nwill need to use AJAX to pull in time zone data. This will require Fleegix, jQuery or\nZepto as well as `window.tzUrl` set to the location of the JSON file containing timezone\ninfo._\n\n__NOTE:__ In this file, when we talk about times being in the _default timezone_,\nwe mean that they are \"correct\", the right UTC time. When they are \"in a\nlocal timezone\" they are no longer correct, and should not be used for anything\nbut display. They have been shifted so as to be printed out correctly, but their\nUTC values are are no longer correct.\n*/\n\n// [RequireJS](http://requirejs.org/) boilerplate, dependencies and\n// [strict mode](http://mzl.la/1fRhnam)\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module);\n}\n\ndefine('src/both/time',['moment', 'winston', 'util', 'fs', 'timezone-js', './string'],\n  function(moment, winston, util, fs, timezonejs, string) {\n  'use strict';\n\n  // Setup\n  // --------\n\n  // In the browser we synchronously load timezone data from `window.tzUrl`.\n  var tz = timezonejs.timezone;\n  if (typeof window !== 'undefined') {\n    var json = '{\"zones\":{\"Africa/Algiers\":[[-12.2,\"-\",\"LMT\",-2486678340000],[-9.35,\"-\",\"PMT\",-1855958400000],[0,\"Algeria\",\"WE%sT\",-942012000000],[-60,\"Algeria\",\"CE%sT\",-733276800000],[0,\"-\",\"WET\",-439430400000],[-60,\"-\",\"CET\",-212025600000],[0,\"Algeria\",\"WE%sT\",246240000000],[-60,\"Algeria\",\"CE%sT\",309744000000],[0,\"Algeria\",\"WE%sT\",357523200000],[-60,\"-\",\"CET\",null]],\"Africa/Luanda\":[[-52.93333333333334,\"-\",\"LMT\",-2429913600000],[-52.06666666666666,\"-\",\"AOT\",-1849392000000],[-60,\"-\",\"WAT\",null]],\"Africa/Porto-Novo\":[[-10.466666666666667,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",-1131235200000],[-60,\"-\",\"WAT\",null]],\"Africa/Gaborone\":[[-103.66666666666667,\"-\",\"LMT\",-2650838400000],[-90,\"-\",\"SAST\",-2109283200000],[-120,\"-\",\"CAT\",-829519200000],[-120,\"1:00\",\"CAST\",-813794400000],[-120,\"-\",\"CAT\",null]],\"Africa/Ouagadougou\":[[6.066666666666667,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",null]],\"Africa/Bujumbura\":[[-117.46666666666667,\"-\",\"LMT\",-2493072000000],[-120,\"-\",\"CAT\",null]],\"Africa/Douala\":[[-38.8,\"-\",\"LMT\",-1798848000000],[-60,\"-\",\"WAT\",null]],\"Atlantic/Cape_Verde\":[[94.06666666666668,\"-\",\"LMT\",-1956700800000],[120,\"-\",\"CVT\",-862617600000],[120,\"1:00\",\"CVST\",-764121600000],[120,\"-\",\"CVT\",186112800000],[60,\"-\",\"CVT\",null]],\"Africa/Bangui\":[[-74.33333333333333,\"-\",\"LMT\",-1798848000000],[-60,\"-\",\"WAT\",null]],\"Africa/Ndjamena\":[[-60.2,\"-\",\"LMT\",-1798848000000],[-60,\"-\",\"WAT\",308707200000],[-60,\"1:00\",\"WAST\",321321600000],[-60,\"-\",\"WAT\",null]],\"Indian/Comoro\":[[-173.06666666666666,\"-\",\"LMT\",-1846281600000],[-180,\"-\",\"EAT\",null]],\"Africa/Kinshasa\":[[-61.2,\"-\",\"LMT\",-2276640000000],[-60,\"-\",\"WAT\",null]],\"Africa/Lubumbashi\":[[-109.86666666666667,\"-\",\"LMT\",-2276640000000],[-120,\"-\",\"CAT\",null]],\"Africa/Brazzaville\":[[-61.13333333333333,\"-\",\"LMT\",-1798848000000],[-60,\"-\",\"WAT\",null]],\"Africa/Abidjan\":[[16.133333333333333,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",null]],\"Africa/Djibouti\":[[-172.6,\"-\",\"LMT\",-1846281600000],[-180,\"-\",\"EAT\",null]],\"Africa/Cairo\":[[-125.15,\"-\",\"LMT\",-2185401600000],[-120,\"Egypt\",\"EE%sT\",null]],\"Africa/Malabo\":[[-35.13333333333333,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",-190857600000],[-60,\"-\",\"WAT\",null]],\"Africa/Asmara\":[[-155.53333333333333,\"-\",\"LMT\",-3124224000000],[-155.53333333333333,\"-\",\"AMT\",-2493072000000],[-155.33333333333334,\"-\",\"ADMT\",-1062201600000],[-180,\"-\",\"EAT\",null]],\"Africa/Addis_Ababa\":[[-154.8,\"-\",\"LMT\",-3124224000000],[-155.33333333333334,\"-\",\"ADMT\",-1062201600000],[-180,\"-\",\"EAT\",null]],\"Africa/Libreville\":[[-37.8,\"-\",\"LMT\",-1798848000000],[-60,\"-\",\"WAT\",null]],\"Africa/Banjul\":[[66.6,\"-\",\"LMT\",-1798848000000],[66.6,\"-\",\"BMT\",-1073088000000],[60,\"-\",\"WAT\",-157852800000],[0,\"-\",\"GMT\",null]],\"Africa/Accra\":[[0.8666666666666666,\"-\",\"LMT\",-1609545600000],[0,\"Ghana\",\"%s\",null]],\"Africa/Conakry\":[[54.86666666666667,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",-1131235200000],[60,\"-\",\"WAT\",-284083200000],[0,\"-\",\"GMT\",null]],\"Africa/Bissau\":[[62.333333333333336,\"-\",\"LMT\",-1849392000000],[60,\"-\",\"WAT\",189216000000],[0,\"-\",\"GMT\",null]],\"Africa/Nairobi\":[[-147.26666666666665,\"-\",\"LMT\",-1309737600000],[-180,\"-\",\"EAT\",-1230854400000],[-150,\"-\",\"BEAT\",-915235200000],[-165,\"-\",\"BEAUT\",-284083200000],[-180,\"-\",\"EAT\",null]],\"Africa/Maseru\":[[-110,\"-\",\"LMT\",-2109283200000],[-120,\"-\",\"SAST\",-829519200000],[-120,\"1:00\",\"SAST\",-813794400000],[-120,\"-\",\"SAST\",null]],\"Africa/Monrovia\":[[43.13333333333333,\"-\",\"LMT\",-2745532800000],[43.13333333333333,\"-\",\"MMT\",-1604361600000],[44.5,\"-\",\"LRT\",73526400000],[0,\"-\",\"GMT\",null]],\"Africa/Tripoli\":[[-52.733333333333334,\"-\",\"LMT\",-1546387200000],[-60,\"Libya\",\"CE%sT\",-315705600000],[-120,\"-\",\"EET\",410140800000],[-60,\"Libya\",\"CE%sT\",641779200000],[-120,\"-\",\"EET\",844041600000],[-60,\"Libya\",\"CE%sT\",875923200000],[-120,\"-\",\"EET\",1352512800000],[-60,\"Libya\",\"CE%sT\",null]],\"Indian/Antananarivo\":[[-190.06666666666666,\"-\",\"LMT\",-1846281600000],[-180,\"-\",\"EAT\",-499914000000],[-180,\"1:00\",\"EAST\",-492051600000],[-180,\"-\",\"EAT\",null]],\"Africa/Blantyre\":[[-140,\"-\",\"LMT\",-2109283200000],[-120,\"-\",\"CAT\",null]],\"Africa/Bamako\":[[32,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",-1131235200000],[60,\"-\",\"WAT\",-300844800000],[0,\"-\",\"GMT\",null]],\"Africa/Nouakchott\":[[63.8,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",-1131235200000],[60,\"-\",\"WAT\",-286934400000],[0,\"-\",\"GMT\",null]],\"Indian/Mauritius\":[[-230,\"-\",\"LMT\",-1956700800000],[-240,\"Mauritius\",\"MU%sT\",null]],\"Indian/Mayotte\":[[-180.93333333333334,\"-\",\"LMT\",-1846281600000],[-180,\"-\",\"EAT\",null]],\"Africa/Casablanca\":[[30.333333333333332,\"-\",\"LMT\",-1773014400000],[0,\"Morocco\",\"WE%sT\",448243200000],[-60,\"-\",\"CET\",536371200000],[0,\"Morocco\",\"WE%sT\",null]],\"Africa/El_Aaiun\":[[52.8,\"-\",\"LMT\",-1136073600000],[60,\"-\",\"WAT\",198288000000],[0,\"-\",\"WET\",null]],\"Africa/Maputo\":[[-130.33333333333331,\"-\",\"LMT\",-2109283200000],[-120,\"-\",\"CAT\",null]],\"Africa/Windhoek\":[[-68.4,\"-\",\"LMT\",-2458166400000],[-90,\"-\",\"SWAT\",-2109283200000],[-120,\"-\",\"SAST\",-860968800000],[-120,\"1:00\",\"SAST\",-845244000000],[-120,\"-\",\"SAST\",637977600000],[-120,\"-\",\"CAT\",765331200000],[-60,\"Namibia\",\"WA%sT\",null]],\"Africa/Niamey\":[[-8.466666666666667,\"-\",\"LMT\",-1798848000000],[60,\"-\",\"WAT\",-1131235200000],[0,\"-\",\"GMT\",-284083200000],[-60,\"-\",\"WAT\",null]],\"Africa/Lagos\":[[-13.6,\"-\",\"LMT\",-1588464000000],[-60,\"-\",\"WAT\",null]],\"Indian/Reunion\":[[-221.86666666666665,\"-\",\"LMT\",-1848873600000],[-240,\"-\",\"RET\",null]],\"Africa/Kigali\":[[-120.26666666666667,\"-\",\"LMT\",-1091491200000],[-120,\"-\",\"CAT\",null]],\"Atlantic/St_Helena\":[[22.8,\"-\",\"LMT\",-2493072000000],[22.8,\"-\",\"JMT\",-568166400000],[0,\"-\",\"GMT\",null]],\"Africa/Sao_Tome\":[[-26.933333333333334,\"-\",\"LMT\",-2682374400000],[36.53333333333334,\"-\",\"LMT\",-1798848000000],[0,\"-\",\"GMT\",null]],\"Africa/Dakar\":[[69.73333333333333,\"-\",\"LMT\",-1798848000000],[60,\"-\",\"WAT\",-902102400000],[0,\"-\",\"GMT\",null]],\"Indian/Mahe\":[[-221.8,\"-\",\"LMT\",-2006640000000],[-240,\"-\",\"SCT\",null]],\"Africa/Freetown\":[[53,\"-\",\"LMT\",-2745532800000],[53,\"-\",\"FMT\",-1785715200000],[60,\"SL\",\"%s\",-378777600000],[0,\"SL\",\"%s\",null]],\"Africa/Mogadishu\":[[-181.46666666666667,\"-\",\"LMT\",-2403561600000],[-180,\"-\",\"EAT\",-1199318400000],[-150,\"-\",\"BEAT\",-378777600000],[-180,\"-\",\"EAT\",null]],\"Africa/Johannesburg\":[[-112,\"-\",\"LMT\",-2458166400000],[-90,\"-\",\"SAST\",-2109283200000],[-120,\"SA\",\"SAST\",null]],\"Africa/Khartoum\":[[-130.13333333333333,\"-\",\"LMT\",-1199318400000],[-120,\"Sudan\",\"CA%sT\",947937600000],[-180,\"-\",\"EAT\",null]],\"Africa/Juba\":[[-126.4,\"-\",\"LMT\",-1199318400000],[-120,\"Sudan\",\"CA%sT\",947937600000],[-180,\"-\",\"EAT\",null]],\"Africa/Mbabane\":[[-124.4,\"-\",\"LMT\",-2109283200000],[-120,\"-\",\"SAST\",null]],\"Africa/Dar_es_Salaam\":[[-157.13333333333335,\"-\",\"LMT\",-1199318400000],[-180,\"-\",\"EAT\",-662774400000],[-165,\"-\",\"BEAUT\",-252547200000],[-180,\"-\",\"EAT\",null]],\"Africa/Lome\":[[-4.866666666666667,\"-\",\"LMT\",-2398377600000],[0,\"-\",\"GMT\",null]],\"Africa/Tunis\":[[-40.733333333333334,\"-\",\"LMT\",-2797200000000],[-9.35,\"-\",\"PMT\",-1855958400000],[-60,\"Tunisia\",\"CE%sT\",null]],\"Africa/Kampala\":[[-129.66666666666669,\"-\",\"LMT\",-1309737600000],[-180,\"-\",\"EAT\",-1230854400000],[-150,\"-\",\"BEAT\",-662774400000],[-165,\"-\",\"BEAUT\",-378777600000],[-180,\"-\",\"EAT\",null]],\"Africa/Lusaka\":[[-113.13333333333333,\"-\",\"LMT\",-2109283200000],[-120,\"-\",\"CAT\",null]],\"Africa/Harare\":[[-124.2,\"-\",\"LMT\",-2109283200000],[-120,\"-\",\"CAT\",null]],\"Antarctica/Casey\":[[0,\"-\",\"zzz\",-86400000],[-480,\"-\",\"WST\",1255831200000],[-660,\"-\",\"CAST\",1267754400000],[-480,\"-\",\"WST\",1319767200000],[-660,\"-\",\"CAST\",1329843600000],[-480,\"-\",\"WST\",null]],\"Antarctica/Davis\":[[0,\"-\",\"zzz\",-409190400000],[-420,\"-\",\"DAVT\",-163036800000],[0,\"-\",\"zzz\",-28857600000],[-420,\"-\",\"DAVT\",1255831200000],[-300,\"-\",\"DAVT\",1268251200000],[-420,\"-\",\"DAVT\",1319767200000],[-300,\"-\",\"DAVT\",1329854400000],[-420,\"-\",\"DAVT\",null]],\"Antarctica/Mawson\":[[0,\"-\",\"zzz\",-501206400000],[-360,\"-\",\"MAWT\",1255831200000],[-300,\"-\",\"MAWT\",null]],\"Indian/Kerguelen\":[[0,\"-\",\"zzz\",-599702400000],[-300,\"-\",\"TFT\",null]],\"Antarctica/DumontDUrville\":[[0,\"-\",\"zzz\",-694396800000],[-600,\"-\",\"PMT\",-566956800000],[0,\"-\",\"zzz\",-415497600000],[-600,\"-\",\"DDUT\",null]],\"Antarctica/Syowa\":[[0,\"-\",\"zzz\",-407808000000],[-180,\"-\",\"SYOT\",null]],\"Antarctica/Vostok\":[[0,\"-\",\"zzz\",-380073600000],[-360,\"-\",\"VOST\",null]],\"Antarctica/Rothera\":[[0,\"-\",\"zzz\",218246400000],[180,\"-\",\"ROTT\",null]],\"Antarctica/Palmer\":[[0,\"-\",\"zzz\",-126316800000],[240,\"ArgAQ\",\"AR%sT\",-7603200000],[180,\"ArgAQ\",\"AR%sT\",389059200000],[240,\"ChileAQ\",\"CL%sT\",null]],\"Antarctica/McMurdo\":[[0,\"-\",\"zzz\",-410313600000],[-720,\"NZAQ\",\"NZ%sT\",null]],\"Antarctica/South_Pole\":\"Antarctica/McMurdo\",\"Asia/Kabul\":[[-276.8,\"-\",\"LMT\",-2493072000000],[-240,\"-\",\"AFT\",-757468800000],[-270,\"-\",\"AFT\",null]],\"Asia/Yerevan\":[[-178,\"-\",\"LMT\",-1441152000000],[-180,\"-\",\"YERT\",-405129600000],[-240,\"RussiaAsia\",\"YER%sT\",670384800000],[-180,\"1:00\",\"YERST\",685584000000],[-180,\"RussiaAsia\",\"AM%sT\",811908000000],[-240,\"-\",\"AMT\",883526400000],[-240,\"RussiaAsia\",\"AM%sT\",1332640800000],[-240,\"-\",\"AMT\",null]],\"Asia/Baku\":[[-199.4,\"-\",\"LMT\",-1441152000000],[-180,\"-\",\"BAKT\",-405129600000],[-240,\"RussiaAsia\",\"BAK%sT\",670384800000],[-180,\"1:00\",\"BAKST\",683510400000],[-180,\"RussiaAsia\",\"AZ%sT\",715388400000],[-240,\"-\",\"AZT\",851990400000],[-240,\"EUAsia\",\"AZ%sT\",883526400000],[-240,\"Azer\",\"AZ%sT\",null]],\"Asia/Bahrain\":[[-202.33333333333334,\"-\",\"LMT\",-1546387200000],[-240,\"-\",\"GST\",76204800000],[-180,\"-\",\"AST\",null]],\"Asia/Dhaka\":[[-361.6666666666667,\"-\",\"LMT\",-2493072000000],[-353.3333333333333,\"-\",\"HMT\",-891561600000],[-390,\"-\",\"BURT\",-872035200000],[-330,\"-\",\"IST\",-862617600000],[-390,\"-\",\"BURT\",-576115200000],[-360,\"-\",\"DACT\",38793600000],[-360,\"-\",\"BDT\",1262217600000],[-360,\"Dhaka\",\"BD%sT\",null]],\"Asia/Thimphu\":[[-358.6,\"-\",\"LMT\",-706320000000],[-330,\"-\",\"IST\",560044800000],[-360,\"-\",\"BTT\",null]],\"Indian/Chagos\":[[-289.6666666666667,\"-\",\"LMT\",-1956700800000],[-300,\"-\",\"IOT\",851990400000],[-360,\"-\",\"IOT\",null]],\"Asia/Brunei\":[[-459.6666666666667,\"-\",\"LMT\",-1383436800000],[-450,\"-\",\"BNT\",-1136160000000],[-480,\"-\",\"BNT\",null]],\"Asia/Rangoon\":[[-384.6666666666667,\"-\",\"LMT\",-2808604800000],[-384.6666666666667,\"-\",\"RMT\",-1546387200000],[-390,\"-\",\"BURT\",-873244800000],[-540,\"-\",\"JST\",-778377600000],[-390,\"-\",\"MMT\",null]],\"Asia/Phnom_Penh\":[[-419.6666666666667,\"-\",\"LMT\",-2005948800000],[-426.3333333333333,\"-\",\"SMT\",-1855958340000],[-420,\"-\",\"ICT\",-1819929600000],[-480,\"-\",\"ICT\",-1220400000000],[-420,\"-\",\"ICT\",null]],\"Asia/Harbin\":[[-506.7333333333333,\"-\",\"LMT\",-1293926400000],[-510,\"-\",\"CHAT\",-1194048000000],[-480,\"-\",\"CST\",-915235200000],[-540,\"-\",\"CHAT\",-115862400000],[-510,\"-\",\"CHAT\",325987200000],[-480,\"PRC\",\"C%sT\",null]],\"Asia/Shanghai\":[[-485.95,\"-\",\"LMT\",-1293926400000],[-480,\"Shang\",\"C%sT\",-631238400000],[-480,\"PRC\",\"C%sT\",null]],\"Asia/Chongqing\":[[-426.3333333333333,\"-\",\"LMT\",-1293926400000],[-420,\"-\",\"LONT\",325987200000],[-480,\"PRC\",\"C%sT\",null]],\"Asia/Urumqi\":[[-350.3333333333333,\"-\",\"LMT\",-1293926400000],[-360,\"-\",\"URUT\",325987200000],[-480,\"PRC\",\"C%sT\",null]],\"Asia/Kashgar\":[[-303.93333333333334,\"-\",\"LMT\",-1293926400000],[-330,\"-\",\"KAST\",-915235200000],[-300,\"-\",\"KAST\",325987200000],[-480,\"PRC\",\"C%sT\",null]],\"Asia/Hong_Kong\":[[-456.7,\"-\",\"LMT\",-2056665600000],[-480,\"HK\",\"HK%sT\",-884217600000],[-540,\"-\",\"JST\",-766713600000],[-480,\"HK\",\"HK%sT\",null]],\"Asia/Taipei\":[[-486,\"-\",\"LMT\",-2303683200000],[-480,\"Taiwan\",\"C%sT\",null]],\"Asia/Macau\":[[-454.3333333333333,\"-\",\"LMT\",-1798848000000],[-480,\"Macau\",\"MO%sT\",945648000000],[-480,\"PRC\",\"C%sT\",null]],\"Asia/Nicosia\":[[-133.46666666666667,\"-\",\"LMT\",-1518912000000],[-120,\"Cyprus\",\"EE%sT\",904608000000],[-120,\"EUAsia\",\"EE%sT\",null]],\"Europe/Nicosia\":\"Asia/Nicosia\",\"Asia/Tbilisi\":[[-179.26666666666665,\"-\",\"LMT\",-2808604800000],[-179.26666666666665,\"-\",\"TBMT\",-1441152000000],[-180,\"-\",\"TBIT\",-405129600000],[-240,\"RussiaAsia\",\"TBI%sT\",670384800000],[-180,\"1:00\",\"TBIST\",671155200000],[-180,\"RussiaAsia\",\"GE%sT\",725760000000],[-180,\"E-EurAsia\",\"GE%sT\",778377600000],[-240,\"E-EurAsia\",\"GE%sT\",844128000000],[-240,\"1:00\",\"GEST\",857174400000],[-240,\"E-EurAsia\",\"GE%sT\",1088294400000],[-180,\"RussiaAsia\",\"GE%sT\",1109642400000],[-240,\"-\",\"GET\",null]],\"Asia/Dili\":[[-502.3333333333333,\"-\",\"LMT\",-1798848000000],[-480,\"-\",\"TLT\",-879123600000],[-540,\"-\",\"JST\",-766022400000],[-540,\"-\",\"TLT\",199929600000],[-480,\"-\",\"CIT\",969148800000],[-540,\"-\",\"TLT\",null]],\"Asia/Kolkata\":[[-353.4666666666667,\"-\",\"LMT\",-2808604800000],[-353.3333333333333,\"-\",\"HMT\",-891561600000],[-390,\"-\",\"BURT\",-872035200000],[-330,\"-\",\"IST\",-862617600000],[-330,\"1:00\",\"IST\",-764121600000],[-330,\"-\",\"IST\",null]],\"Asia/Jakarta\":[[-427.2,\"-\",\"LMT\",-3231273600000],[-427.2,\"-\",\"JMT\",-1451693568000],[-440,\"-\",\"JAVT\",-1172880000000],[-450,\"-\",\"WIT\",-876614400000],[-540,\"-\",\"JST\",-766022400000],[-450,\"-\",\"WIT\",-683856000000],[-480,\"-\",\"WIT\",-620784000000],[-450,\"-\",\"WIT\",-157852800000],[-420,\"-\",\"WIT\",null]],\"Asia/Pontianak\":[[-437.3333333333333,\"-\",\"LMT\",-1946160000000],[-437.3333333333333,\"-\",\"PMT\",-1172880000000],[-450,\"-\",\"WIT\",-881193600000],[-540,\"-\",\"JST\",-766022400000],[-450,\"-\",\"WIT\",-683856000000],[-480,\"-\",\"WIT\",-620784000000],[-450,\"-\",\"WIT\",-157852800000],[-480,\"-\",\"CIT\",567993600000],[-420,\"-\",\"WIT\",null]],\"Asia/Makassar\":[[-477.6,\"-\",\"LMT\",-1546387200000],[-477.6,\"-\",\"MMT\",-1172880000000],[-480,\"-\",\"CIT\",-880243200000],[-540,\"-\",\"JST\",-766022400000],[-480,\"-\",\"CIT\",null]],\"Asia/Jayapura\":[[-562.8,\"-\",\"LMT\",-1172880000000],[-540,\"-\",\"EIT\",-799459200000],[-570,\"-\",\"CST\",-157852800000],[-540,\"-\",\"EIT\",null]],\"Asia/Tehran\":[[-205.73333333333335,\"-\",\"LMT\",-1672617600000],[-205.73333333333335,\"-\",\"TMT\",-725932800000],[-210,\"-\",\"IRST\",247190400000],[-240,\"Iran\",\"IR%sT\",315446400000],[-210,\"Iran\",\"IR%sT\",null]],\"Asia/Baghdad\":[[-177.66666666666666,\"-\",\"LMT\",-2493072000000],[-177.6,\"-\",\"BMT\",-1609545600000],[-180,\"-\",\"AST\",389059200000],[-180,\"Iraq\",\"A%sT\",null]],\"Asia/Jerusalem\":[[-140.9,\"-\",\"LMT\",-2808604800000],[-140.66666666666666,\"-\",\"JMT\",-1609545600000],[-120,\"Zion\",\"I%sT\",null]],\"Asia/Tokyo\":[[-558.9833333333333,\"-\",\"LMT\",-2587712400000],[-540,\"-\",\"JST\",-2303683200000],[-540,\"-\",\"CJT\",-978393600000],[-540,\"Japan\",\"J%sT\",null]],\"Asia/Amman\":[[-143.73333333333335,\"-\",\"LMT\",-1199318400000],[-120,\"Jordan\",\"EE%sT\",null]],\"Asia/Almaty\":[[-307.8,\"-\",\"LMT\",-1441152000000],[-300,\"-\",\"ALMT\",-1247529600000],[-360,\"RussiaAsia\",\"ALM%sT\",694137600000],[-360,\"-\",\"ALMT\",725760000000],[-360,\"RussiaAsia\",\"ALM%sT\",1110844800000],[-360,\"-\",\"ALMT\",null]],\"Asia/Qyzylorda\":[[-261.8666666666667,\"-\",\"LMT\",-1441152000000],[-240,\"-\",\"KIZT\",-1247529600000],[-300,\"-\",\"KIZT\",354931200000],[-300,\"1:00\",\"KIZST\",370742400000],[-360,\"-\",\"KIZT\",386467200000],[-300,\"RussiaAsia\",\"KIZ%sT\",694137600000],[-300,\"-\",\"KIZT\",692841600000],[-300,\"-\",\"QYZT\",695786400000],[-360,\"RussiaAsia\",\"QYZ%sT\",1110844800000],[-360,\"-\",\"QYZT\",null]],\"Asia/Aqtobe\":[[-228.66666666666666,\"-\",\"LMT\",-1441152000000],[-240,\"-\",\"AKTT\",-1247529600000],[-300,\"-\",\"AKTT\",354931200000],[-300,\"1:00\",\"AKTST\",370742400000],[-360,\"-\",\"AKTT\",386467200000],[-300,\"RussiaAsia\",\"AKT%sT\",694137600000],[-300,\"-\",\"AKTT\",692841600000],[-300,\"RussiaAsia\",\"AQT%sT\",1110844800000],[-300,\"-\",\"AQTT\",null]],\"Asia/Aqtau\":[[-201.06666666666666,\"-\",\"LMT\",-1441152000000],[-240,\"-\",\"FORT\",-1247529600000],[-300,\"-\",\"FORT\",-189475200000],[-300,\"-\",\"SHET\",370742400000],[-360,\"-\",\"SHET\",386467200000],[-300,\"RussiaAsia\",\"SHE%sT\",694137600000],[-300,\"-\",\"SHET\",692841600000],[-300,\"RussiaAsia\",\"AQT%sT\",794023200000],[-240,\"RussiaAsia\",\"AQT%sT\",1110844800000],[-300,\"-\",\"AQTT\",null]],\"Asia/Oral\":[[-205.4,\"-\",\"LMT\",-1441152000000],[-240,\"-\",\"URAT\",-1247529600000],[-300,\"-\",\"URAT\",354931200000],[-300,\"1:00\",\"URAST\",370742400000],[-360,\"-\",\"URAT\",386467200000],[-300,\"RussiaAsia\",\"URA%sT\",606880800000],[-240,\"RussiaAsia\",\"URA%sT\",694137600000],[-240,\"-\",\"URAT\",692841600000],[-240,\"RussiaAsia\",\"ORA%sT\",1110844800000],[-300,\"-\",\"ORAT\",null]],\"Asia/Bishkek\":[[-298.4,\"-\",\"LMT\",-1441152000000],[-300,\"-\",\"FRUT\",-1247529600000],[-360,\"RussiaAsia\",\"FRU%sT\",670384800000],[-300,\"1:00\",\"FRUST\",683604000000],[-300,\"Kyrgyz\",\"KG%sT\",1123804800000],[-360,\"-\",\"KGT\",null]],\"Asia/Seoul\":[[-507.8666666666667,\"-\",\"LMT\",-2493072000000],[-510,\"-\",\"KST\",-2053900800000],[-540,\"-\",\"KST\",-1293926400000],[-510,\"-\",\"KST\",-1167696000000],[-540,\"-\",\"KST\",-498096000000],[-480,\"ROK\",\"K%sT\",-264902400000],[-510,\"-\",\"KST\",-39484800000],[-540,\"ROK\",\"K%sT\",null]],\"Asia/Pyongyang\":[[-503,\"-\",\"LMT\",-2493072000000],[-510,\"-\",\"KST\",-2053900800000],[-540,\"-\",\"KST\",-1293926400000],[-510,\"-\",\"KST\",-1167696000000],[-540,\"-\",\"KST\",-498096000000],[-480,\"-\",\"KST\",-264902400000],[-540,\"-\",\"KST\",null]],\"Asia/Kuwait\":[[-191.93333333333334,\"-\",\"LMT\",-599702400000],[-180,\"-\",\"AST\",null]],\"Asia/Vientiane\":[[-410.4,\"-\",\"LMT\",-2005948800000],[-426.3333333333333,\"-\",\"SMT\",-1855958340000],[-420,\"-\",\"ICT\",-1819929600000],[-480,\"-\",\"ICT\",-1220400000000],[-420,\"-\",\"ICT\",null]],\"Asia/Beirut\":[[-142,\"-\",\"LMT\",-2808604800000],[-120,\"Lebanon\",\"EE%sT\",null]],\"Asia/Kuala_Lumpur\":[[-406.7666666666667,\"-\",\"LMT\",-2177452800000],[-415.4166666666667,\"-\",\"SMT\",-2038176000000],[-420,\"-\",\"MALT\",-1167609600000],[-420,\"0:20\",\"MALST\",-1073001600000],[-440,\"-\",\"MALT\",-894153600000],[-450,\"-\",\"MALT\",-879638400000],[-540,\"-\",\"JST\",-766972800000],[-450,\"-\",\"MALT\",378691200000],[-480,\"-\",\"MYT\",null]],\"Asia/Kuching\":[[-441.3333333333333,\"-\",\"LMT\",-1383436800000],[-450,\"-\",\"BORT\",-1136160000000],[-480,\"NBorneo\",\"BOR%sT\",-879638400000],[-540,\"-\",\"JST\",-766972800000],[-480,\"-\",\"BORT\",378691200000],[-480,\"-\",\"MYT\",null]],\"Indian/Maldives\":[[-294,\"-\",\"LMT\",-2808604800000],[-294,\"-\",\"MMT\",-284083200000],[-300,\"-\",\"MVT\",null]],\"Asia/Hovd\":[[-366.6,\"-\",\"LMT\",-2032905600000],[-360,\"-\",\"HOVT\",283910400000],[-420,\"Mongol\",\"HOV%sT\",null]],\"Asia/Ulaanbaatar\":[[-427.5333333333333,\"-\",\"LMT\",-2032905600000],[-420,\"-\",\"ULAT\",283910400000],[-480,\"Mongol\",\"ULA%sT\",null]],\"Asia/Choibalsan\":[[-458,\"-\",\"LMT\",-2032905600000],[-420,\"-\",\"ULAT\",283910400000],[-480,\"-\",\"ULAT\",418003200000],[-540,\"Mongol\",\"CHO%sT\",1206921600000],[-480,\"Mongol\",\"CHO%sT\",null]],\"Asia/Kathmandu\":[[-341.2666666666667,\"-\",\"LMT\",-1546387200000],[-330,\"-\",\"IST\",536371200000],[-345,\"-\",\"NPT\",null]],\"Asia/Muscat\":[[-234.4,\"-\",\"LMT\",-1546387200000],[-240,\"-\",\"GST\",null]],\"Asia/Karachi\":[[-268.2,\"-\",\"LMT\",-1956700800000],[-330,\"-\",\"IST\",-862617600000],[-330,\"1:00\",\"IST\",-764121600000],[-330,\"-\",\"IST\",-576115200000],[-300,\"-\",\"KART\",38793600000],[-300,\"Pakistan\",\"PK%sT\",null]],\"Asia/Gaza\":[[-137.86666666666665,\"-\",\"LMT\",-2185401600000],[-120,\"Zion\",\"EET\",-682646400000],[-120,\"EgyptAsia\",\"EE%sT\",-81302400000],[-120,\"Zion\",\"I%sT\",851990400000],[-120,\"Jordan\",\"EE%sT\",946598400000],[-120,\"Palestine\",\"EE%sT\",1219968000000],[-120,\"-\",\"EET\",1220227200000],[-120,\"Palestine\",\"EE%sT\",1293753600000],[-120,\"-\",\"EET\",1269648060000],[-120,\"Palestine\",\"EE%sT\",1312156800000],[-120,\"-\",\"EET\",1356912000000],[-120,\"Palestine\",\"EE%sT\",null]],\"Asia/Hebron\":[[-140.38333333333335,\"-\",\"LMT\",-2185401600000],[-120,\"Zion\",\"EET\",-682646400000],[-120,\"EgyptAsia\",\"EE%sT\",-81302400000],[-120,\"Zion\",\"I%sT\",851990400000],[-120,\"Jordan\",\"EE%sT\",946598400000],[-120,\"Palestine\",\"EE%sT\",null]],\"Asia/Manila\":[[956,\"-\",\"LMT\",-3944678400000],[-484,\"-\",\"LMT\",-2229292800000],[-480,\"Phil\",\"PH%sT\",-873244800000],[-540,\"-\",\"JST\",-794188800000],[-480,\"Phil\",\"PH%sT\",null]],\"Asia/Qatar\":[[-206.13333333333335,\"-\",\"LMT\",-1546387200000],[-240,\"-\",\"GST\",76204800000],[-180,\"-\",\"AST\",null]],\"Asia/Riyadh\":[[-186.86666666666665,\"-\",\"LMT\",-599702400000],[-180,\"-\",\"AST\",null]],\"Asia/Singapore\":[[-415.4166666666667,\"-\",\"LMT\",-2177452800000],[-415.4166666666667,\"-\",\"SMT\",-2038176000000],[-420,\"-\",\"MALT\",-1167609600000],[-420,\"0:20\",\"MALST\",-1073001600000],[-440,\"-\",\"MALT\",-894153600000],[-450,\"-\",\"MALT\",-879638400000],[-540,\"-\",\"JST\",-766972800000],[-450,\"-\",\"MALT\",-138758400000],[-450,\"-\",\"SGT\",378691200000],[-480,\"-\",\"SGT\",null]],\"Asia/Colombo\":[[-319.4,\"-\",\"LMT\",-2808604800000],[-319.5333333333333,\"-\",\"MMT\",-1988236800000],[-330,\"-\",\"IST\",-883267200000],[-330,\"0:30\",\"IHST\",-862617600000],[-330,\"1:00\",\"IST\",-764028000000],[-330,\"-\",\"IST\",832982400000],[-390,\"-\",\"LKT\",846289800000],[-360,\"-\",\"LKT\",1145061000000],[-330,\"-\",\"IST\",null]],\"Asia/Damascus\":[[-145.2,\"-\",\"LMT\",-1546387200000],[-120,\"Syria\",\"EE%sT\",null]],\"Asia/Dushanbe\":[[-275.2,\"-\",\"LMT\",-1441152000000],[-300,\"-\",\"DUST\",-1247529600000],[-360,\"RussiaAsia\",\"DUS%sT\",670384800000],[-300,\"1:00\",\"DUSST\",684381600000],[-300,\"-\",\"TJT\",null]],\"Asia/Bangkok\":[[-402.06666666666666,\"-\",\"LMT\",-2808604800000],[-402.06666666666666,\"-\",\"BMT\",-1570060800000],[-420,\"-\",\"ICT\",null]],\"Asia/Ashgabat\":[[-233.53333333333333,\"-\",\"LMT\",-1441152000000],[-240,\"-\",\"ASHT\",-1247529600000],[-300,\"RussiaAsia\",\"ASH%sT\",670384800000],[-240,\"RussiaAsia\",\"ASH%sT\",688521600000],[-240,\"RussiaAsia\",\"TM%sT\",695786400000],[-300,\"-\",\"TMT\",null]],\"Asia/Dubai\":[[-221.2,\"-\",\"LMT\",-1546387200000],[-240,\"-\",\"GST\",null]],\"Asia/Samarkand\":[[-267.2,\"-\",\"LMT\",-1441152000000],[-240,\"-\",\"SAMT\",-1247529600000],[-300,\"-\",\"SAMT\",354931200000],[-300,\"1:00\",\"SAMST\",370742400000],[-360,\"-\",\"TAST\",386467200000],[-300,\"RussiaAsia\",\"SAM%sT\",683683200000],[-300,\"RussiaAsia\",\"UZ%sT\",725760000000],[-300,\"-\",\"UZT\",null]],\"Asia/Tashkent\":[[-277.2,\"-\",\"LMT\",-1441152000000],[-300,\"-\",\"TAST\",-1247529600000],[-360,\"RussiaAsia\",\"TAS%sT\",670384800000],[-300,\"RussiaAsia\",\"TAS%sT\",683683200000],[-300,\"RussiaAsia\",\"UZ%sT\",725760000000],[-300,\"-\",\"UZT\",null]],\"Asia/Ho_Chi_Minh\":[[-426.6666666666667,\"-\",\"LMT\",-2005948800000],[-426.3333333333333,\"-\",\"SMT\",-1855958340000],[-420,\"-\",\"ICT\",-1819929600000],[-480,\"-\",\"ICT\",-1220400000000],[-420,\"-\",\"ICT\",null]],\"Asia/Aden\":[[-179.9,\"-\",\"LMT\",-599702400000],[-180,\"-\",\"AST\",null]],\"Australia/Darwin\":[[-523.3333333333333,\"-\",\"LMT\",-2364076800000],[-540,\"-\",\"CST\",-2230156800000],[-570,\"Aus\",\"CST\",null]],\"Australia/Perth\":[[-463.4,\"-\",\"LMT\",-2337897600000],[-480,\"Aus\",\"WST\",-836438400000],[-480,\"AW\",\"WST\",null]],\"Australia/Eucla\":[[-515.4666666666667,\"-\",\"LMT\",-2337897600000],[-525,\"Aus\",\"CWST\",-836438400000],[-525,\"AW\",\"CWST\",null]],\"Australia/Brisbane\":[[-612.1333333333333,\"-\",\"LMT\",-2335305600000],[-600,\"Aus\",\"EST\",62985600000],[-600,\"AQ\",\"EST\",null]],\"Australia/Lindeman\":[[-595.9333333333334,\"-\",\"LMT\",-2335305600000],[-600,\"Aus\",\"EST\",62985600000],[-600,\"AQ\",\"EST\",709948800000],[-600,\"Holiday\",\"EST\",null]],\"Australia/Adelaide\":[[-554.3333333333334,\"-\",\"LMT\",-2364076800000],[-540,\"-\",\"CST\",-2230156800000],[-570,\"Aus\",\"CST\",62985600000],[-570,\"AS\",\"CST\",null]],\"Australia/Hobart\":[[-589.2666666666667,\"-\",\"LMT\",-2345760000000],[-600,\"-\",\"EST\",-1680472800000],[-600,\"1:00\",\"EST\",-1669852800000],[-600,\"Aus\",\"EST\",-63244800000],[-600,\"AT\",\"EST\",null]],\"Australia/Currie\":[[-575.4666666666666,\"-\",\"LMT\",-2345760000000],[-600,\"-\",\"EST\",-1680472800000],[-600,\"1:00\",\"EST\",-1669852800000],[-600,\"Aus\",\"EST\",47174400000],[-600,\"AT\",\"EST\",null]],\"Australia/Melbourne\":[[-579.8666666666667,\"-\",\"LMT\",-2364076800000],[-600,\"Aus\",\"EST\",62985600000],[-600,\"AV\",\"EST\",null]],\"Australia/Sydney\":[[-604.8666666666667,\"-\",\"LMT\",-2364076800000],[-600,\"Aus\",\"EST\",62985600000],[-600,\"AN\",\"EST\",null]],\"Australia/Broken_Hill\":[[-565.8,\"-\",\"LMT\",-2364076800000],[-600,\"-\",\"EST\",-2314915200000],[-540,\"-\",\"CST\",-2230156800000],[-570,\"Aus\",\"CST\",62985600000],[-570,\"AN\",\"CST\",978220800000],[-570,\"AS\",\"CST\",null]],\"Australia/Lord_Howe\":[[-636.3333333333334,\"-\",\"LMT\",-2364076800000],[-600,\"-\",\"EST\",352252800000],[-630,\"LH\",\"LHST\",null]],\"Antarctica/Macquarie\":[[0,\"-\",\"zzz\",-2214259200000],[-600,\"-\",\"EST\",-1680472800000],[-600,\"1:00\",\"EST\",-1669852800000],[-600,\"Aus\",\"EST\",-1601683200000],[0,\"-\",\"zzz\",-687052800000],[-600,\"Aus\",\"EST\",-63244800000],[-600,\"AT\",\"EST\",1270350000000],[-660,\"-\",\"MIST\",null]],\"Indian/Christmas\":[[-422.8666666666667,\"-\",\"LMT\",-2364076800000],[-420,\"-\",\"CXT\",null]],\"Pacific/Rarotonga\":[[639.0666666666666,\"-\",\"LMT\",-2146003200000],[630,\"-\",\"CKT\",279676800000],[600,\"Cook\",\"CK%sT\",null]],\"Indian/Cocos\":[[-387.6666666666667,\"-\",\"LMT\",-2177539200000],[-390,\"-\",\"CCT\",null]],\"Pacific/Fiji\":[[-715.7333333333333,\"-\",\"LMT\",-1709942400000],[-720,\"Fiji\",\"FJ%sT\",null]],\"Pacific/Gambier\":[[539.8,\"-\",\"LMT\",-1806710400000],[540,\"-\",\"GAMT\",null]],\"Pacific/Marquesas\":[[558,\"-\",\"LMT\",-1806710400000],[570,\"-\",\"MART\",null]],\"Pacific/Tahiti\":[[598.2666666666667,\"-\",\"LMT\",-1806710400000],[600,\"-\",\"TAHT\",null]],\"Pacific/Guam\":[[861,\"-\",\"LMT\",-3944678400000],[-579,\"-\",\"LMT\",-2146003200000],[-600,\"-\",\"GST\",977529600000],[-600,\"-\",\"ChST\",null]],\"Pacific/Tarawa\":[[-692.0666666666666,\"-\",\"LMT\",-2146003200000],[-720,\"-\",\"GILT\",null]],\"Pacific/Enderbury\":[[684.3333333333334,\"-\",\"LMT\",-2146003200000],[720,\"-\",\"PHOT\",307584000000],[660,\"-\",\"PHOT\",820368000000],[-780,\"-\",\"PHOT\",null]],\"Pacific/Kiritimati\":[[629.3333333333334,\"-\",\"LMT\",-2146003200000],[640,\"-\",\"LINT\",307584000000],[600,\"-\",\"LINT\",820368000000],[-840,\"-\",\"LINT\",null]],\"Pacific/Saipan\":[[857,\"-\",\"LMT\",-3944678400000],[-583,\"-\",\"LMT\",-2146003200000],[-540,\"-\",\"MPT\",-7948800000],[-600,\"-\",\"MPT\",977529600000],[-600,\"-\",\"ChST\",null]],\"Pacific/Majuro\":[[-684.8,\"-\",\"LMT\",-2146003200000],[-660,\"-\",\"MHT\",-7948800000],[-720,\"-\",\"MHT\",null]],\"Pacific/Kwajalein\":[[-669.3333333333334,\"-\",\"LMT\",-2146003200000],[-660,\"-\",\"MHT\",-7948800000],[720,\"-\",\"KWAT\",745804800000],[-720,\"-\",\"MHT\",null]],\"Pacific/Chuuk\":[[-607.1333333333333,\"-\",\"LMT\",-2146003200000],[-600,\"-\",\"CHUT\",null]],\"Pacific/Pohnpei\":[[-632.8666666666667,\"-\",\"LMT\",-2146003200000],[-660,\"-\",\"PONT\",null]],\"Pacific/Kosrae\":[[-651.9333333333334,\"-\",\"LMT\",-2146003200000],[-660,\"-\",\"KOST\",-7948800000],[-720,\"-\",\"KOST\",946598400000],[-660,\"-\",\"KOST\",null]],\"Pacific/Nauru\":[[-667.6666666666666,\"-\",\"LMT\",-1545091200000],[-690,\"-\",\"NRT\",-877305600000],[-540,\"-\",\"JST\",-800928000000],[-690,\"-\",\"NRT\",294364800000],[-720,\"-\",\"NRT\",null]],\"Pacific/Noumea\":[[-665.8,\"-\",\"LMT\",-1829347200000],[-660,\"NC\",\"NC%sT\",null]],\"Pacific/Auckland\":[[-699.0666666666666,\"-\",\"LMT\",-3192393600000],[-690,\"NZ\",\"NZ%sT\",-757382400000],[-720,\"NZ\",\"NZ%sT\",null]],\"Pacific/Chatham\":[[-733.8,\"-\",\"LMT\",-410227200000],[-765,\"Chatham\",\"CHA%sT\",null]],\"Pacific/Niue\":[[679.6666666666666,\"-\",\"LMT\",-2146003200000],[680,\"-\",\"NUT\",-568166400000],[690,\"-\",\"NUT\",276048000000],[660,\"-\",\"NUT\",null]],\"Pacific/Norfolk\":[[-671.8666666666667,\"-\",\"LMT\",-2146003200000],[-672,\"-\",\"NMT\",-568166400000],[-690,\"-\",\"NFT\",null]],\"Pacific/Palau\":[[-537.9333333333334,\"-\",\"LMT\",-2146003200000],[-540,\"-\",\"PWT\",null]],\"Pacific/Port_Moresby\":[[-588.6666666666666,\"-\",\"LMT\",-2808604800000],[-588.5333333333334,\"-\",\"PMMT\",-2335305600000],[-600,\"-\",\"PGT\",null]],\"Pacific/Pitcairn\":[[520.3333333333333,\"-\",\"LMT\",-2146003200000],[510,\"-\",\"PNT\",893635200000],[480,\"-\",\"PST\",null]],\"Pacific/Pago_Pago\":[[-757.2,\"-\",\"LMT\",-2855692800000],[682.8,\"-\",\"LMT\",-1830470400000],[690,\"-\",\"SAMT\",-599702400000],[660,\"-\",\"NST\",-86918400000],[660,\"-\",\"BST\",438998400000],[660,\"-\",\"SST\",null]],\"Pacific/Apia\":[[-753.0666666666666,\"-\",\"LMT\",-2855692800000],[686.9333333333334,\"-\",\"LMT\",-1830470400000],[690,\"-\",\"SAMT\",-599702400000],[660,\"-\",\"WST\",1285459200000],[660,\"1:00\",\"WSDT\",1301716800000],[660,\"-\",\"WST\",1316833200000],[660,\"1:00\",\"WSDT\",1325203200000],[-780,\"1:00\",\"WSDT\",1333252800000],[-780,\"WS\",\"WS%sT\",null]],\"Pacific/Guadalcanal\":[[-639.8,\"-\",\"LMT\",-1806710400000],[-660,\"-\",\"SBT\",null]],\"Pacific/Fakaofo\":[[684.9333333333334,\"-\",\"LMT\",-2146003200000],[660,\"-\",\"TKT\",1325203200000],[-780,\"-\",\"TKT\",null]],\"Pacific/Tongatapu\":[[-739.3333333333334,\"-\",\"LMT\",-2146003200000],[-740,\"-\",\"TOT\",-883699200000],[-780,\"-\",\"TOT\",946598400000],[-780,\"Tonga\",\"TO%sT\",null]],\"Pacific/Funafuti\":[[-716.8666666666667,\"-\",\"LMT\",-2146003200000],[-720,\"-\",\"TVT\",null]],\"Pacific/Johnston\":[[600,\"-\",\"HST\",null]],\"Pacific/Midway\":[[709.4666666666666,\"-\",\"LMT\",-2146003200000],[660,\"-\",\"NST\",-428544000000],[660,\"1:00\",\"NDT\",-420681600000],[660,\"-\",\"NST\",-86918400000],[660,\"-\",\"BST\",438998400000],[660,\"-\",\"SST\",null]],\"Pacific/Wake\":[[-666.4666666666666,\"-\",\"LMT\",-2146003200000],[-720,\"-\",\"WAKT\",null]],\"Pacific/Efate\":[[-673.2666666666667,\"-\",\"LMT\",-1829347200000],[-660,\"Vanuatu\",\"VU%sT\",null]],\"Pacific/Wallis\":[[-735.3333333333334,\"-\",\"LMT\",-2146003200000],[-720,\"-\",\"WFT\",null]],\"Africa/Asmera\":\"Africa/Asmara\",\"Africa/Timbuktu\":\"Africa/Bamako\",\"America/Argentina/ComodRivadavia\":\"America/Argentina/Catamarca\",\"America/Atka\":\"America/Adak\",\"America/Buenos_Aires\":\"America/Argentina/Buenos_Aires\",\"America/Catamarca\":\"America/Argentina/Catamarca\",\"America/Coral_Harbour\":\"America/Atikokan\",\"America/Cordoba\":\"America/Argentina/Cordoba\",\"America/Ensenada\":\"America/Tijuana\",\"America/Fort_Wayne\":\"America/Indiana/Indianapolis\",\"America/Indianapolis\":\"America/Indiana/Indianapolis\",\"America/Jujuy\":\"America/Argentina/Jujuy\",\"America/Knox_IN\":\"America/Indiana/Knox\",\"America/Louisville\":\"America/Kentucky/Louisville\",\"America/Mendoza\":\"America/Argentina/Mendoza\",\"America/Porto_Acre\":\"America/Rio_Branco\",\"America/Rosario\":\"America/Argentina/Cordoba\",\"America/Virgin\":\"America/St_Thomas\",\"Asia/Ashkhabad\":\"Asia/Ashgabat\",\"Asia/Chungking\":\"Asia/Chongqing\",\"Asia/Dacca\":\"Asia/Dhaka\",\"Asia/Katmandu\":\"Asia/Kathmandu\",\"Asia/Calcutta\":\"Asia/Kolkata\",\"Asia/Macao\":\"Asia/Macau\",\"Asia/Tel_Aviv\":\"Asia/Jerusalem\",\"Asia/Saigon\":\"Asia/Ho_Chi_Minh\",\"Asia/Thimbu\":\"Asia/Thimphu\",\"Asia/Ujung_Pandang\":\"Asia/Makassar\",\"Asia/Ulan_Bator\":\"Asia/Ulaanbaatar\",\"Atlantic/Faeroe\":\"Atlantic/Faroe\",\"Atlantic/Jan_Mayen\":\"Europe/Oslo\",\"Australia/ACT\":\"Australia/Sydney\",\"Australia/Canberra\":\"Australia/Sydney\",\"Australia/LHI\":\"Australia/Lord_Howe\",\"Australia/NSW\":\"Australia/Sydney\",\"Australia/North\":\"Australia/Darwin\",\"Australia/Queensland\":\"Australia/Brisbane\",\"Australia/South\":\"Australia/Adelaide\",\"Australia/Tasmania\":\"Australia/Hobart\",\"Australia/Victoria\":\"Australia/Melbourne\",\"Australia/West\":\"Australia/Perth\",\"Australia/Yancowinna\":\"Australia/Broken_Hill\",\"Brazil/Acre\":\"America/Rio_Branco\",\"Brazil/DeNoronha\":\"America/Noronha\",\"Brazil/East\":\"America/Sao_Paulo\",\"Brazil/West\":\"America/Manaus\",\"Canada/Atlantic\":\"America/Halifax\",\"Canada/Central\":\"America/Winnipeg\",\"Canada/East-Saskatchewan\":\"America/Regina\",\"Canada/Eastern\":\"America/Toronto\",\"Canada/Mountain\":\"America/Edmonton\",\"Canada/Newfoundland\":\"America/St_Johns\",\"Canada/Pacific\":\"America/Vancouver\",\"Canada/Saskatchewan\":\"America/Regina\",\"Canada/Yukon\":\"America/Whitehorse\",\"Chile/Continental\":\"America/Santiago\",\"Chile/EasterIsland\":\"Pacific/Easter\",\"Cuba\":\"America/Havana\",\"Egypt\":\"Africa/Cairo\",\"Eire\":\"Europe/Dublin\",\"Europe/Belfast\":\"Europe/London\",\"Europe/Tiraspol\":\"Europe/Chisinau\",\"GB\":\"Europe/London\",\"GB-Eire\":\"Europe/London\",\"GMT+0\":\"Etc/GMT\",\"GMT-0\":\"Etc/GMT\",\"GMT0\":\"Etc/GMT\",\"Greenwich\":\"Etc/GMT\",\"Hongkong\":\"Asia/Hong_Kong\",\"Iceland\":\"Atlantic/Reykjavik\",\"Iran\":\"Asia/Tehran\",\"Israel\":\"Asia/Jerusalem\",\"Jamaica\":\"America/Jamaica\",\"Japan\":\"Asia/Tokyo\",\"Kwajalein\":\"Pacific/Kwajalein\",\"Libya\":\"Africa/Tripoli\",\"Mexico/BajaNorte\":\"America/Tijuana\",\"Mexico/BajaSur\":\"America/Mazatlan\",\"Mexico/General\":\"America/Mexico_City\",\"NZ\":\"Pacific/Auckland\",\"NZ-CHAT\":\"Pacific/Chatham\",\"Navajo\":\"America/Denver\",\"PRC\":\"Asia/Shanghai\",\"Pacific/Samoa\":\"Pacific/Pago_Pago\",\"Pacific/Yap\":\"Pacific/Chuuk\",\"Pacific/Truk\":\"Pacific/Chuuk\",\"Pacific/Ponape\":\"Pacific/Pohnpei\",\"Poland\":\"Europe/Warsaw\",\"Portugal\":\"Europe/Lisbon\",\"ROC\":\"Asia/Taipei\",\"ROK\":\"Asia/Seoul\",\"Singapore\":\"Asia/Singapore\",\"Turkey\":\"Europe/Istanbul\",\"UCT\":\"Etc/UCT\",\"US/Alaska\":\"America/Anchorage\",\"US/Aleutian\":\"America/Adak\",\"US/Arizona\":\"America/Phoenix\",\"US/Central\":\"America/Chicago\",\"US/East-Indiana\":\"America/Indiana/Indianapolis\",\"US/Eastern\":\"America/New_York\",\"US/Hawaii\":\"Pacific/Honolulu\",\"US/Indiana-Starke\":\"America/Indiana/Knox\",\"US/Michigan\":\"America/Detroit\",\"US/Mountain\":\"America/Denver\",\"US/Pacific\":\"America/Los_Angeles\",\"US/Samoa\":\"Pacific/Pago_Pago\",\"UTC\":\"Etc/UTC\",\"Universal\":\"Etc/UTC\",\"W-SU\":\"Europe/Moscow\",\"Zulu\":\"Etc/UTC\",\"Etc/GMT\":[[0,\"-\",\"GMT\",null]],\"Etc/UTC\":[[0,\"-\",\"UTC\",null]],\"Etc/UCT\":[[0,\"-\",\"UCT\",null]],\"GMT\":\"Etc/GMT\",\"Etc/Universal\":\"Etc/UTC\",\"Etc/Zulu\":\"Etc/UTC\",\"Etc/Greenwich\":\"Etc/GMT\",\"Etc/GMT-0\":\"Etc/GMT\",\"Etc/GMT+0\":\"Etc/GMT\",\"Etc/GMT0\":\"Etc/GMT\",\"Etc/GMT-14\":[[-840,\"-\",\"GMT-14\",null]],\"Etc/GMT-13\":[[-780,\"-\",\"GMT-13\",null]],\"Etc/GMT-12\":[[-720,\"-\",\"GMT-12\",null]],\"Etc/GMT-11\":[[-660,\"-\",\"GMT-11\",null]],\"Etc/GMT-10\":[[-600,\"-\",\"GMT-10\",null]],\"Etc/GMT-9\":[[-540,\"-\",\"GMT-9\",null]],\"Etc/GMT-8\":[[-480,\"-\",\"GMT-8\",null]],\"Etc/GMT-7\":[[-420,\"-\",\"GMT-7\",null]],\"Etc/GMT-6\":[[-360,\"-\",\"GMT-6\",null]],\"Etc/GMT-5\":[[-300,\"-\",\"GMT-5\",null]],\"Etc/GMT-4\":[[-240,\"-\",\"GMT-4\",null]],\"Etc/GMT-3\":[[-180,\"-\",\"GMT-3\",null]],\"Etc/GMT-2\":[[-120,\"-\",\"GMT-2\",null]],\"Etc/GMT-1\":[[-60,\"-\",\"GMT-1\",null]],\"Etc/GMT+1\":[[60,\"-\",\"GMT+1\",null]],\"Etc/GMT+2\":[[120,\"-\",\"GMT+2\",null]],\"Etc/GMT+3\":[[180,\"-\",\"GMT+3\",null]],\"Etc/GMT+4\":[[240,\"-\",\"GMT+4\",null]],\"Etc/GMT+5\":[[300,\"-\",\"GMT+5\",null]],\"Etc/GMT+6\":[[360,\"-\",\"GMT+6\",null]],\"Etc/GMT+7\":[[420,\"-\",\"GMT+7\",null]],\"Etc/GMT+8\":[[480,\"-\",\"GMT+8\",null]],\"Etc/GMT+9\":[[540,\"-\",\"GMT+9\",null]],\"Etc/GMT+10\":[[600,\"-\",\"GMT+10\",null]],\"Etc/GMT+11\":[[660,\"-\",\"GMT+11\",null]],\"Etc/GMT+12\":[[720,\"-\",\"GMT+12\",null]],\"Europe/London\":[[1.25,\"-\",\"LMT\",-3852662400000],[0,\"GB-Eire\",\"%s\",-37238400000],[-60,\"-\",\"BST\",57722400000],[0,\"GB-Eire\",\"%s\",851990400000],[0,\"EU\",\"GMT/BST\",null]],\"Europe/Jersey\":\"Europe/London\",\"Europe/Guernsey\":\"Europe/London\",\"Europe/Isle_of_Man\":\"Europe/London\",\"Europe/Dublin\":[[25,\"-\",\"LMT\",-2821651200000],[25.35,\"-\",\"DMT\",-1691964000000],[25.35,\"1:00\",\"IST\",-1680472800000],[0,\"GB-Eire\",\"%s\",-1517011200000],[0,\"GB-Eire\",\"GMT/IST\",-942012000000],[0,\"1:00\",\"IST\",-733356000000],[0,\"-\",\"GMT\",-719445600000],[0,\"1:00\",\"IST\",-699487200000],[0,\"-\",\"GMT\",-684972000000],[0,\"GB-Eire\",\"GMT/IST\",-37238400000],[-60,\"-\",\"IST\",57722400000],[0,\"GB-Eire\",\"GMT/IST\",851990400000],[0,\"EU\",\"GMT/IST\",null]],\"WET\":[[0,\"EU\",\"WE%sT\",null]],\"CET\":[[-60,\"C-Eur\",\"CE%sT\",null]],\"MET\":[[-60,\"C-Eur\",\"ME%sT\",null]],\"EET\":[[-120,\"EU\",\"EE%sT\",null]],\"Europe/Tirane\":[[-79.33333333333333,\"-\",\"LMT\",-1735776000000],[-60,\"-\",\"CET\",-932342400000],[-60,\"Albania\",\"CE%sT\",457488000000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Andorra\":[[-6.066666666666667,\"-\",\"LMT\",-2146003200000],[0,\"-\",\"WET\",-733881600000],[-60,\"-\",\"CET\",481082400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Vienna\":[[-65.35,\"-\",\"LMT\",-2422051200000],[-60,\"C-Eur\",\"CE%sT\",-1546387200000],[-60,\"Austria\",\"CE%sT\",-938901600000],[-60,\"C-Eur\",\"CE%sT\",-781048800000],[-60,\"1:00\",\"CEST\",-780184800000],[-60,\"-\",\"CET\",-725932800000],[-60,\"Austria\",\"CE%sT\",378604800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Minsk\":[[-110.26666666666667,\"-\",\"LMT\",-2808604800000],[-110,\"-\",\"MMT\",-1441152000000],[-120,\"-\",\"EET\",-1247529600000],[-180,\"-\",\"MSK\",-899769600000],[-60,\"C-Eur\",\"CE%sT\",-804643200000],[-180,\"Russia\",\"MSK/MSD\",662601600000],[-180,\"-\",\"MSK\",670384800000],[-120,\"1:00\",\"EEST\",686109600000],[-120,\"-\",\"EET\",701827200000],[-120,\"1:00\",\"EEST\",717552000000],[-120,\"Russia\",\"EE%sT\",1301191200000],[-180,\"-\",\"FET\",null]],\"Europe/Brussels\":[[-17.5,\"-\",\"LMT\",-2808604800000],[-17.5,\"-\",\"BMT\",-2450952000000],[0,\"-\",\"WET\",-1740355200000],[-60,\"-\",\"CET\",-1693699200000],[-60,\"C-Eur\",\"CE%sT\",-1613826000000],[0,\"Belgium\",\"WE%sT\",-934668000000],[-60,\"C-Eur\",\"CE%sT\",-799286400000],[-60,\"Belgium\",\"CE%sT\",252374400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Sofia\":[[-93.26666666666667,\"-\",\"LMT\",-2808604800000],[-116.93333333333332,\"-\",\"IMT\",-2369520000000],[-120,\"-\",\"EET\",-857250000000],[-60,\"C-Eur\",\"CE%sT\",-757468800000],[-60,\"-\",\"CET\",-781045200000],[-120,\"-\",\"EET\",291769200000],[-120,\"Bulg\",\"EE%sT\",401853600000],[-120,\"C-Eur\",\"EE%sT\",694137600000],[-120,\"E-Eur\",\"EE%sT\",883526400000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Prague\":[[-57.733333333333334,\"-\",\"LMT\",-3755376000000],[-57.733333333333334,\"-\",\"PMT\",-2469398400000],[-60,\"C-Eur\",\"CE%sT\",-798069600000],[-60,\"Czech\",\"CE%sT\",315446400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Copenhagen\":[[-50.333333333333336,\"-\",\"LMT\",-2493072000000],[-50.333333333333336,\"-\",\"CMT\",-2398291200000],[-60,\"Denmark\",\"CE%sT\",-857253600000],[-60,\"C-Eur\",\"CE%sT\",-781048800000],[-60,\"Denmark\",\"CE%sT\",347068800000],[-60,\"EU\",\"CE%sT\",null]],\"Atlantic/Faroe\":[[27.066666666666666,\"-\",\"LMT\",-1955750400000],[0,\"-\",\"WET\",378604800000],[0,\"EU\",\"WE%sT\",null]],\"America/Danmarkshavn\":[[74.66666666666667,\"-\",\"LMT\",-1686096000000],[180,\"-\",\"WGT\",323834400000],[180,\"EU\",\"WG%sT\",851990400000],[0,\"-\",\"GMT\",null]],\"America/Scoresbysund\":[[87.86666666666667,\"-\",\"LMT\",-1686096000000],[120,\"-\",\"CGT\",323834400000],[120,\"C-Eur\",\"CG%sT\",354672000000],[60,\"EU\",\"EG%sT\",null]],\"America/Godthab\":[[206.93333333333334,\"-\",\"LMT\",-1686096000000],[180,\"-\",\"WGT\",323834400000],[180,\"EU\",\"WG%sT\",null]],\"America/Thule\":[[275.1333333333333,\"-\",\"LMT\",-1686096000000],[240,\"Thule\",\"A%sT\",null]],\"Europe/Tallinn\":[[-99,\"-\",\"LMT\",-2808604800000],[-99,\"-\",\"TMT\",-1638316800000],[-60,\"C-Eur\",\"CE%sT\",-1593820800000],[-99,\"-\",\"TMT\",-1535932800000],[-120,\"-\",\"EET\",-927936000000],[-180,\"-\",\"MSK\",-892944000000],[-60,\"C-Eur\",\"CE%sT\",-797644800000],[-180,\"Russia\",\"MSK/MSD\",606880800000],[-120,\"1:00\",\"EEST\",622605600000],[-120,\"C-Eur\",\"EE%sT\",906422400000],[-120,\"EU\",\"EE%sT\",941414400000],[-120,\"-\",\"EET\",1014249600000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Helsinki\":[[-99.86666666666667,\"-\",\"LMT\",-2890252800000],[-99.86666666666667,\"-\",\"HMT\",-1535932800000],[-120,\"Finland\",\"EE%sT\",441676800000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Mariehamn\":\"Europe/Helsinki\",\"Europe/Paris\":[[-9.35,\"-\",\"LMT\",-2486678340000],[-9.35,\"-\",\"PMT\",-1855958340000],[0,\"France\",\"WE%sT\",-932432400000],[-60,\"C-Eur\",\"CE%sT\",-800064000000],[0,\"France\",\"WE%sT\",-766616400000],[-60,\"France\",\"CE%sT\",252374400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Berlin\":[[-53.46666666666666,\"-\",\"LMT\",-2422051200000],[-60,\"C-Eur\",\"CE%sT\",-776556000000],[-60,\"SovietZone\",\"CE%sT\",-725932800000],[-60,\"Germany\",\"CE%sT\",347068800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Busingen\":\"Europe/Zurich\",\"Europe/Gibraltar\":[[21.4,\"-\",\"LMT\",-2821651200000],[0,\"GB-Eire\",\"%s\",-401320800000],[-60,\"-\",\"CET\",410140800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Athens\":[[-94.86666666666667,\"-\",\"LMT\",-2344636800000],[-94.86666666666667,\"-\",\"AMT\",-1686095940000],[-120,\"Greece\",\"EE%sT\",-904867200000],[-60,\"Greece\",\"CE%sT\",-812419200000],[-120,\"Greece\",\"EE%sT\",378604800000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Budapest\":[[-76.33333333333333,\"-\",\"LMT\",-2500934400000],[-60,\"C-Eur\",\"CE%sT\",-1609545600000],[-60,\"Hungary\",\"CE%sT\",-906933600000],[-60,\"C-Eur\",\"CE%sT\",-757468800000],[-60,\"Hungary\",\"CE%sT\",338954400000],[-60,\"EU\",\"CE%sT\",null]],\"Atlantic/Reykjavik\":[[87.4,\"-\",\"LMT\",-4165603200000],[87.8,\"-\",\"RMT\",-1925078400000],[60,\"Iceland\",\"IS%sT\",-54774000000],[0,\"-\",\"GMT\",null]],\"Europe/Rome\":[[-49.93333333333334,\"-\",\"LMT\",-3259094400000],[-49.93333333333334,\"-\",\"RMT\",-2403561600000],[-60,\"Italy\",\"CE%sT\",-857253600000],[-60,\"C-Eur\",\"CE%sT\",-804816000000],[-60,\"Italy\",\"CE%sT\",347068800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Vatican\":\"Europe/Rome\",\"Europe/San_Marino\":\"Europe/Rome\",\"Europe/Riga\":[[-96.4,\"-\",\"LMT\",-2808604800000],[-96.4,\"-\",\"RMT\",-1632002400000],[-96.4,\"1:00\",\"LST\",-1618693200000],[-96.4,\"-\",\"RMT\",-1601676000000],[-96.4,\"1:00\",\"LST\",-1597266000000],[-96.4,\"-\",\"RMT\",-1377302400000],[-120,\"-\",\"EET\",-928022400000],[-180,\"-\",\"MSK\",-899510400000],[-60,\"C-Eur\",\"CE%sT\",-795830400000],[-180,\"Russia\",\"MSK/MSD\",604720800000],[-120,\"1:00\",\"EEST\",620618400000],[-120,\"Latvia\",\"EE%sT\",853804800000],[-120,\"EU\",\"EE%sT\",951782400000],[-120,\"-\",\"EET\",978393600000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Vaduz\":[[-38.06666666666666,\"-\",\"LMT\",-2385244800000],[-60,\"-\",\"CET\",378604800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Vilnius\":[[-101.26666666666667,\"-\",\"LMT\",-2808604800000],[-84,\"-\",\"WMT\",-1641081600000],[-95.6,\"-\",\"KMT\",-1585094400000],[-60,\"-\",\"CET\",-1561248000000],[-120,\"-\",\"EET\",-1553558400000],[-60,\"-\",\"CET\",-928195200000],[-180,\"-\",\"MSK\",-900115200000],[-60,\"C-Eur\",\"CE%sT\",-802137600000],[-180,\"Russia\",\"MSK/MSD\",670384800000],[-120,\"1:00\",\"EEST\",686109600000],[-120,\"C-Eur\",\"EE%sT\",915062400000],[-120,\"-\",\"EET\",891133200000],[-60,\"EU\",\"CE%sT\",941331600000],[-120,\"-\",\"EET\",1041379200000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Luxembourg\":[[-24.6,\"-\",\"LMT\",-2069712000000],[-60,\"Lux\",\"CE%sT\",-1612656000000],[0,\"Lux\",\"WE%sT\",-1269813600000],[0,\"Belgium\",\"WE%sT\",-935182800000],[-60,\"C-Eur\",\"WE%sT\",-797979600000],[-60,\"Belgium\",\"CE%sT\",252374400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Malta\":[[-58.06666666666666,\"-\",\"LMT\",-2403475200000],[-60,\"Italy\",\"CE%sT\",-857253600000],[-60,\"C-Eur\",\"CE%sT\",-781048800000],[-60,\"Italy\",\"CE%sT\",102384000000],[-60,\"Malta\",\"CE%sT\",378604800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Chisinau\":[[-115.33333333333333,\"-\",\"LMT\",-2808604800000],[-115,\"-\",\"CMT\",-1637107200000],[-104.4,\"-\",\"BMT\",-1213142400000],[-120,\"Romania\",\"EE%sT\",-927158400000],[-120,\"1:00\",\"EEST\",-898128000000],[-60,\"C-Eur\",\"CE%sT\",-800150400000],[-180,\"Russia\",\"MSK/MSD\",662601600000],[-180,\"-\",\"MSK\",641952000000],[-120,\"-\",\"EET\",694137600000],[-120,\"Russia\",\"EE%sT\",725760000000],[-120,\"E-Eur\",\"EE%sT\",883526400000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Monaco\":[[-29.53333333333333,\"-\",\"LMT\",-2486678400000],[-9.35,\"-\",\"PMT\",-1855958400000],[0,\"France\",\"WE%sT\",-766616400000],[-60,\"France\",\"CE%sT\",252374400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Amsterdam\":[[-19.53333333333333,\"-\",\"LMT\",-4228761600000],[-19.53333333333333,\"Neth\",\"%s\",-1025740800000],[-20,\"Neth\",\"NE%sT\",-935020800000],[-60,\"C-Eur\",\"CE%sT\",-781048800000],[-60,\"Neth\",\"CE%sT\",252374400000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Oslo\":[[-43,\"-\",\"LMT\",-2366755200000],[-60,\"Norway\",\"CE%sT\",-927507600000],[-60,\"C-Eur\",\"CE%sT\",-781048800000],[-60,\"Norway\",\"CE%sT\",347068800000],[-60,\"EU\",\"CE%sT\",null]],\"Arctic/Longyearbyen\":\"Europe/Oslo\",\"Europe/Warsaw\":[[-84,\"-\",\"LMT\",-2808604800000],[-84,\"-\",\"WMT\",-1717027200000],[-60,\"C-Eur\",\"CE%sT\",-1618693200000],[-120,\"Poland\",\"EE%sT\",-1501718400000],[-60,\"Poland\",\"CE%sT\",-931730400000],[-60,\"C-Eur\",\"CE%sT\",-796867200000],[-60,\"Poland\",\"CE%sT\",252374400000],[-60,\"W-Eur\",\"CE%sT\",599529600000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Lisbon\":[[36.53333333333334,\"-\",\"LMT\",-2682374400000],[36.53333333333334,\"-\",\"LMT\",-1830384000000],[0,\"Port\",\"WE%sT\",-118274400000],[-60,\"-\",\"CET\",212547600000],[0,\"Port\",\"WE%sT\",433299600000],[0,\"W-Eur\",\"WE%sT\",717555600000],[-60,\"EU\",\"CE%sT\",828234000000],[0,\"EU\",\"WE%sT\",null]],\"Atlantic/Azores\":[[102.66666666666667,\"-\",\"LMT\",-2682374400000],[114.53333333333333,\"-\",\"HMT\",-1849564800000],[120,\"Port\",\"AZO%sT\",-118274400000],[60,\"Port\",\"AZO%sT\",433299600000],[60,\"W-Eur\",\"AZO%sT\",717555600000],[0,\"EU\",\"WE%sT\",733280400000],[60,\"EU\",\"AZO%sT\",null]],\"Atlantic/Madeira\":[[67.6,\"-\",\"LMT\",-2682374400000],[67.6,\"-\",\"FMT\",-1849564800000],[60,\"Port\",\"MAD%sT\",-118274400000],[0,\"Port\",\"WE%sT\",433299600000],[0,\"EU\",\"WE%sT\",null]],\"Europe/Bucharest\":[[-104.4,\"-\",\"LMT\",-2469398400000],[-104.4,\"-\",\"BMT\",-1213142400000],[-120,\"Romania\",\"EE%sT\",354679200000],[-120,\"C-Eur\",\"EE%sT\",694137600000],[-120,\"Romania\",\"EE%sT\",788832000000],[-120,\"E-Eur\",\"EE%sT\",883526400000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Kaliningrad\":[[-82,\"-\",\"LMT\",-2422051200000],[-60,\"C-Eur\",\"CE%sT\",-757468800000],[-120,\"Poland\",\"CE%sT\",-725932800000],[-180,\"Russia\",\"MSK/MSD\",670384800000],[-120,\"Russia\",\"EE%sT\",1301191200000],[-180,\"-\",\"FET\",null]],\"Europe/Moscow\":[[-150.33333333333334,\"-\",\"LMT\",-2808604800000],[-150,\"-\",\"MMT\",-1688256000000],[-150.8,\"Russia\",\"%s\",-1593813600000],[-180,\"Russia\",\"MSK/MSD\",-1491177600000],[-120,\"-\",\"EET\",-1247529600000],[-180,\"Russia\",\"MSK/MSD\",670384800000],[-120,\"Russia\",\"EE%sT\",695786400000],[-180,\"Russia\",\"MSK/MSD\",1301191200000],[-240,\"-\",\"MSK\",null]],\"Europe/Volgograd\":[[-177.66666666666666,\"-\",\"LMT\",-1577750400000],[-180,\"-\",\"TSAT\",-1411862400000],[-180,\"-\",\"STAT\",-1247529600000],[-240,\"-\",\"STAT\",-256867200000],[-240,\"Russia\",\"VOL%sT\",606880800000],[-180,\"Russia\",\"VOL%sT\",670384800000],[-240,\"-\",\"VOLT\",701834400000],[-180,\"Russia\",\"VOL%sT\",1301191200000],[-240,\"-\",\"VOLT\",null]],\"Europe/Samara\":[[-200.6,\"-\",\"LMT\",-1593813600000],[-180,\"-\",\"SAMT\",-1247529600000],[-240,\"-\",\"SAMT\",-1102291200000],[-240,\"Russia\",\"KUY%sT\",606880800000],[-180,\"Russia\",\"KUY%sT\",670384800000],[-120,\"Russia\",\"KUY%sT\",686109600000],[-180,\"-\",\"KUYT\",687927600000],[-240,\"Russia\",\"SAM%sT\",1269741600000],[-180,\"Russia\",\"SAM%sT\",1301191200000],[-240,\"-\",\"SAMT\",null]],\"Asia/Yekaterinburg\":[[-242.4,\"-\",\"LMT\",-1592596800000],[-240,\"-\",\"SVET\",-1247529600000],[-300,\"Russia\",\"SVE%sT\",670384800000],[-240,\"Russia\",\"SVE%sT\",695786400000],[-300,\"Russia\",\"YEK%sT\",1301191200000],[-360,\"-\",\"YEKT\",null]],\"Asia/Omsk\":[[-293.6,\"-\",\"LMT\",-1582070400000],[-300,\"-\",\"OMST\",-1247529600000],[-360,\"Russia\",\"OMS%sT\",670384800000],[-300,\"Russia\",\"OMS%sT\",695786400000],[-360,\"Russia\",\"OMS%sT\",1301191200000],[-420,\"-\",\"OMST\",null]],\"Asia/Novosibirsk\":[[-331.6666666666667,\"-\",\"LMT\",-1579456800000],[-360,\"-\",\"NOVT\",-1247529600000],[-420,\"Russia\",\"NOV%sT\",670384800000],[-360,\"Russia\",\"NOV%sT\",695786400000],[-420,\"Russia\",\"NOV%sT\",738115200000],[-360,\"Russia\",\"NOV%sT\",1301191200000],[-420,\"-\",\"NOVT\",null]],\"Asia/Novokuznetsk\":[[-348.8,\"-\",\"NMT\",-1577491200000],[-360,\"-\",\"KRAT\",-1247529600000],[-420,\"Russia\",\"KRA%sT\",670384800000],[-360,\"Russia\",\"KRA%sT\",695786400000],[-420,\"Russia\",\"KRA%sT\",1269741600000],[-360,\"Russia\",\"NOV%sT\",1301191200000],[-420,\"-\",\"NOVT\",null]],\"Asia/Krasnoyarsk\":[[-371.3333333333333,\"-\",\"LMT\",-1577491200000],[-360,\"-\",\"KRAT\",-1247529600000],[-420,\"Russia\",\"KRA%sT\",670384800000],[-360,\"Russia\",\"KRA%sT\",695786400000],[-420,\"Russia\",\"KRA%sT\",1301191200000],[-480,\"-\",\"KRAT\",null]],\"Asia/Irkutsk\":[[-417.3333333333333,\"-\",\"LMT\",-2808604800000],[-417.3333333333333,\"-\",\"IMT\",-1575849600000],[-420,\"-\",\"IRKT\",-1247529600000],[-480,\"Russia\",\"IRK%sT\",670384800000],[-420,\"Russia\",\"IRK%sT\",695786400000],[-480,\"Russia\",\"IRK%sT\",1301191200000],[-540,\"-\",\"IRKT\",null]],\"Asia/Yakutsk\":[[-518.6666666666667,\"-\",\"LMT\",-1579392000000],[-480,\"-\",\"YAKT\",-1247529600000],[-540,\"Russia\",\"YAK%sT\",670384800000],[-480,\"Russia\",\"YAK%sT\",695786400000],[-540,\"Russia\",\"YAK%sT\",1301191200000],[-600,\"-\",\"YAKT\",null]],\"Asia/Vladivostok\":[[-527.7333333333333,\"-\",\"LMT\",-1487289600000],[-540,\"-\",\"VLAT\",-1247529600000],[-600,\"Russia\",\"VLA%sT\",670384800000],[-540,\"Russia\",\"VLA%sST\",695786400000],[-600,\"Russia\",\"VLA%sT\",1301191200000],[-660,\"-\",\"VLAT\",null]],\"Asia/Khandyga\":[[-542.2166666666666,\"-\",\"LMT\",-1579392000000],[-480,\"-\",\"YAKT\",-1247529600000],[-540,\"Russia\",\"YAK%sT\",670384800000],[-480,\"Russia\",\"YAK%sT\",695786400000],[-540,\"Russia\",\"YAK%sT\",1104451200000],[-600,\"Russia\",\"VLA%sT\",1301191200000],[-660,\"-\",\"VLAT\",1315872000000],[-600,\"-\",\"YAKT\",null]],\"Asia/Sakhalin\":[[-570.8,\"-\",\"LMT\",-2031004800000],[-540,\"-\",\"CJT\",-978393600000],[-540,\"-\",\"JST\",-768528000000],[-660,\"Russia\",\"SAK%sT\",670384800000],[-600,\"Russia\",\"SAK%sT\",695786400000],[-660,\"Russia\",\"SAK%sT\",857181600000],[-600,\"Russia\",\"SAK%sT\",1301191200000],[-660,\"-\",\"SAKT\",null]],\"Asia/Magadan\":[[-603.2,\"-\",\"LMT\",-1441152000000],[-600,\"-\",\"MAGT\",-1247529600000],[-660,\"Russia\",\"MAG%sT\",670384800000],[-600,\"Russia\",\"MAG%sT\",695786400000],[-660,\"Russia\",\"MAG%sT\",1301191200000],[-720,\"-\",\"MAGT\",null]],\"Asia/Ust-Nera\":[[-572.9,\"-\",\"LMT\",-1579392000000],[-480,\"-\",\"YAKT\",-1247529600000],[-540,\"Russia\",\"YAKT\",354931200000],[-660,\"Russia\",\"MAG%sT\",670384800000],[-600,\"Russia\",\"MAG%sT\",695786400000],[-660,\"Russia\",\"MAG%sT\",1301191200000],[-720,\"-\",\"MAGT\",1315872000000],[-660,\"-\",\"VLAT\",null]],\"Asia/Kamchatka\":[[-634.6,\"-\",\"LMT\",-1487721600000],[-660,\"-\",\"PETT\",-1247529600000],[-720,\"Russia\",\"PET%sT\",670384800000],[-660,\"Russia\",\"PET%sT\",695786400000],[-720,\"Russia\",\"PET%sT\",1269741600000],[-660,\"Russia\",\"PET%sT\",1301191200000],[-720,\"-\",\"PETT\",null]],\"Asia/Anadyr\":[[-709.9333333333334,\"-\",\"LMT\",-1441152000000],[-720,\"-\",\"ANAT\",-1247529600000],[-780,\"Russia\",\"ANA%sT\",386467200000],[-720,\"Russia\",\"ANA%sT\",670384800000],[-660,\"Russia\",\"ANA%sT\",695786400000],[-720,\"Russia\",\"ANA%sT\",1269741600000],[-660,\"Russia\",\"ANA%sT\",1301191200000],[-720,\"-\",\"ANAT\",null]],\"Europe/Belgrade\":[[-82,\"-\",\"LMT\",-2682374400000],[-60,\"-\",\"CET\",-905821200000],[-60,\"C-Eur\",\"CE%sT\",-757468800000],[-60,\"-\",\"CET\",-777938400000],[-60,\"1:00\",\"CEST\",-766620000000],[-60,\"-\",\"CET\",407203200000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Ljubljana\":\"Europe/Belgrade\",\"Europe/Podgorica\":\"Europe/Belgrade\",\"Europe/Sarajevo\":\"Europe/Belgrade\",\"Europe/Skopje\":\"Europe/Belgrade\",\"Europe/Zagreb\":\"Europe/Belgrade\",\"Europe/Bratislava\":\"Europe/Prague\",\"Europe/Madrid\":[[14.733333333333334,\"-\",\"LMT\",-2177452800000],[0,\"Spain\",\"WE%sT\",-733881600000],[-60,\"Spain\",\"CE%sT\",315446400000],[-60,\"EU\",\"CE%sT\",null]],\"Africa/Ceuta\":[[21.26666666666667,\"-\",\"LMT\",-2146003200000],[0,\"-\",\"WET\",-1630112400000],[0,\"1:00\",\"WEST\",-1616806800000],[0,\"-\",\"WET\",-1420156800000],[0,\"Spain\",\"WE%sT\",-1262390400000],[0,\"SpainAfrica\",\"WE%sT\",448243200000],[-60,\"-\",\"CET\",536371200000],[-60,\"EU\",\"CE%sT\",null]],\"Atlantic/Canary\":[[61.6,\"-\",\"LMT\",-1509667200000],[60,\"-\",\"CANT\",-733878000000],[0,\"-\",\"WET\",323827200000],[0,\"1:00\",\"WEST\",338947200000],[0,\"EU\",\"WE%sT\",null]],\"Europe/Stockholm\":[[-72.2,\"-\",\"LMT\",-2871676800000],[-60.233333333333334,\"-\",\"SET\",-2208988800000],[-60,\"-\",\"CET\",-1692493200000],[-60,\"1:00\",\"CEST\",-1680476400000],[-60,\"-\",\"CET\",347068800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Zurich\":[[-34.13333333333333,\"-\",\"LMT\",-3827952000000],[-29.73333333333333,\"-\",\"BMT\",-2385244800000],[-60,\"Swiss\",\"CE%sT\",378604800000],[-60,\"EU\",\"CE%sT\",null]],\"Europe/Istanbul\":[[-115.86666666666667,\"-\",\"LMT\",-2808604800000],[-116.93333333333332,\"-\",\"IMT\",-1869868800000],[-120,\"Turkey\",\"EE%sT\",277257600000],[-180,\"Turkey\",\"TR%sT\",482803200000],[-120,\"Turkey\",\"EE%sT\",1199059200000],[-120,\"EU\",\"EE%sT\",1301187600000],[-120,\"-\",\"EET\",1301274000000],[-120,\"EU\",\"EE%sT\",null]],\"Asia/Istanbul\":\"Europe/Istanbul\",\"Europe/Kiev\":[[-122.06666666666668,\"-\",\"LMT\",-2808604800000],[-122.06666666666668,\"-\",\"KMT\",-1441152000000],[-120,\"-\",\"EET\",-1247529600000],[-180,\"-\",\"MSK\",-892512000000],[-60,\"C-Eur\",\"CE%sT\",-825379200000],[-180,\"Russia\",\"MSK/MSD\",662601600000],[-180,\"-\",\"MSK\",646797600000],[-120,\"-\",\"EET\",725760000000],[-120,\"E-Eur\",\"EE%sT\",820368000000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Uzhgorod\":[[-89.2,\"-\",\"LMT\",-2500934400000],[-60,\"-\",\"CET\",-915235200000],[-60,\"C-Eur\",\"CE%sT\",-796867200000],[-60,\"1:00\",\"CEST\",-794707200000],[-60,\"-\",\"CET\",-773452800000],[-180,\"Russia\",\"MSK/MSD\",662601600000],[-180,\"-\",\"MSK\",646797600000],[-60,\"-\",\"CET\",670388400000],[-120,\"-\",\"EET\",725760000000],[-120,\"E-Eur\",\"EE%sT\",820368000000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Zaporozhye\":[[-140.66666666666666,\"-\",\"LMT\",-2808604800000],[-140,\"-\",\"CUT\",-1441152000000],[-120,\"-\",\"EET\",-1247529600000],[-180,\"-\",\"MSK\",-894758400000],[-60,\"C-Eur\",\"CE%sT\",-826416000000],[-180,\"Russia\",\"MSK/MSD\",670384800000],[-120,\"E-Eur\",\"EE%sT\",820368000000],[-120,\"EU\",\"EE%sT\",null]],\"Europe/Simferopol\":[[-136.4,\"-\",\"LMT\",-2808604800000],[-136,\"-\",\"SMT\",-1441152000000],[-120,\"-\",\"EET\",-1247529600000],[-180,\"-\",\"MSK\",-888883200000],[-60,\"C-Eur\",\"CE%sT\",-811641600000],[-180,\"Russia\",\"MSK/MSD\",662601600000],[-180,\"-\",\"MSK\",646797600000],[-120,\"-\",\"EET\",725760000000],[-120,\"E-Eur\",\"EE%sT\",767750400000],[-180,\"E-Eur\",\"MSK/MSD\",828241200000],[-180,\"1:00\",\"MSD\",846385200000],[-180,\"Russia\",\"MSK/MSD\",883526400000],[-180,\"-\",\"MSK\",857178000000],[-120,\"EU\",\"EE%sT\",null]],\"EST\":[[300,\"-\",\"EST\",null]],\"MST\":[[420,\"-\",\"MST\",null]],\"HST\":[[600,\"-\",\"HST\",null]],\"EST5EDT\":[[300,\"US\",\"E%sT\",null]],\"CST6CDT\":[[360,\"US\",\"C%sT\",null]],\"MST7MDT\":[[420,\"US\",\"M%sT\",null]],\"PST8PDT\":[[480,\"US\",\"P%sT\",null]],\"America/New_York\":[[296.0333333333333,\"-\",\"LMT\",-2717668562000],[300,\"US\",\"E%sT\",-1546387200000],[300,\"NYC\",\"E%sT\",-852163200000],[300,\"US\",\"E%sT\",-725932800000],[300,\"NYC\",\"E%sT\",-63244800000],[300,\"US\",\"E%sT\",null]],\"America/Chicago\":[[350.6,\"-\",\"LMT\",-2717668236000],[360,\"US\",\"C%sT\",-1546387200000],[360,\"Chicago\",\"C%sT\",-1067810400000],[300,\"-\",\"EST\",-1045432800000],[360,\"Chicago\",\"C%sT\",-852163200000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Chicago\",\"C%sT\",-63244800000],[360,\"US\",\"C%sT\",null]],\"America/North_Dakota/Center\":[[405.2,\"-\",\"LMT\",-2717667912000],[420,\"US\",\"M%sT\",719978400000],[360,\"US\",\"C%sT\",null]],\"America/North_Dakota/New_Salem\":[[405.65,\"-\",\"LMT\",-2717667939000],[420,\"US\",\"M%sT\",1067133600000],[360,\"US\",\"C%sT\",null]],\"America/North_Dakota/Beulah\":[[407.1166666666667,\"-\",\"LMT\",-2717668027000],[420,\"US\",\"M%sT\",1289095200000],[360,\"US\",\"C%sT\",null]],\"America/Denver\":[[419.93333333333334,\"-\",\"LMT\",-2717668796000],[420,\"US\",\"M%sT\",-1546387200000],[420,\"Denver\",\"M%sT\",-852163200000],[420,\"US\",\"M%sT\",-725932800000],[420,\"Denver\",\"M%sT\",-63244800000],[420,\"US\",\"M%sT\",null]],\"America/Los_Angeles\":[[472.9666666666667,\"-\",\"LMT\",-2717668378000],[480,\"US\",\"P%sT\",-725932800000],[480,\"CA\",\"P%sT\",-63244800000],[480,\"US\",\"P%sT\",null]],\"America/Juneau\":[[-902.3166666666666,\"-\",\"LMT\",-3225312000000],[537.6833333333334,\"-\",\"LMT\",-2188987200000],[480,\"-\",\"PST\",-852163200000],[480,\"US\",\"P%sT\",-725932800000],[480,\"-\",\"PST\",-86400000],[480,\"US\",\"P%sT\",325648800000],[540,\"US\",\"Y%sT\",341373600000],[480,\"US\",\"P%sT\",436327200000],[540,\"US\",\"Y%sT\",438998400000],[540,\"US\",\"AK%sT\",null]],\"America/Sitka\":[[-898.7833333333334,\"-\",\"LMT\",-3225312000000],[541.2166666666666,\"-\",\"LMT\",-2188987200000],[480,\"-\",\"PST\",-852163200000],[480,\"US\",\"P%sT\",-725932800000],[480,\"-\",\"PST\",-86400000],[480,\"US\",\"P%sT\",436327200000],[540,\"US\",\"Y%sT\",438998400000],[540,\"US\",\"AK%sT\",null]],\"America/Metlakatla\":[[-913.7,\"-\",\"LMT\",-3225312000000],[526.3,\"-\",\"LMT\",-2188987200000],[480,\"-\",\"PST\",-852163200000],[480,\"US\",\"P%sT\",-725932800000],[480,\"-\",\"PST\",-86400000],[480,\"US\",\"P%sT\",436327200000],[480,\"-\",\"MeST\",null]],\"America/Yakutat\":[[-881.0833333333334,\"-\",\"LMT\",-3225312000000],[558.9166666666666,\"-\",\"LMT\",-2188987200000],[540,\"-\",\"YST\",-852163200000],[540,\"US\",\"Y%sT\",-725932800000],[540,\"-\",\"YST\",-86400000],[540,\"US\",\"Y%sT\",438998400000],[540,\"US\",\"AK%sT\",null]],\"America/Anchorage\":[[-840.4,\"-\",\"LMT\",-3225312000000],[599.6,\"-\",\"LMT\",-2188987200000],[600,\"-\",\"CAT\",-852163200000],[600,\"US\",\"CAT/CAWT\",-769395600000],[600,\"US\",\"CAT/CAPT\",-725932800000],[600,\"-\",\"CAT\",-86918400000],[600,\"-\",\"AHST\",-86400000],[600,\"US\",\"AH%sT\",436327200000],[540,\"US\",\"Y%sT\",438998400000],[540,\"US\",\"AK%sT\",null]],\"America/Nome\":[[-778.35,\"-\",\"LMT\",-3225312000000],[661.6333333333333,\"-\",\"LMT\",-2188987200000],[660,\"-\",\"NST\",-852163200000],[660,\"US\",\"N%sT\",-725932800000],[660,\"-\",\"NST\",-86918400000],[660,\"-\",\"BST\",-86400000],[660,\"US\",\"B%sT\",436327200000],[540,\"US\",\"Y%sT\",438998400000],[540,\"US\",\"AK%sT\",null]],\"America/Adak\":[[-733.35,\"-\",\"LMT\",-3225312000000],[706.6333333333333,\"-\",\"LMT\",-2188987200000],[660,\"-\",\"NST\",-852163200000],[660,\"US\",\"N%sT\",-725932800000],[660,\"-\",\"NST\",-86918400000],[660,\"-\",\"BST\",-86400000],[660,\"US\",\"B%sT\",436327200000],[600,\"US\",\"AH%sT\",438998400000],[600,\"US\",\"HA%sT\",null]],\"Pacific/Honolulu\":[[631.4333333333334,\"-\",\"LMT\",-2334139200000],[630,\"-\",\"HST\",-1157320800000],[630,\"1:00\",\"HDT\",-1155470400000],[630,\"-\",\"HST\",-880236000000],[630,\"1:00\",\"HDT\",-765410400000],[630,\"-\",\"HST\",-712188000000],[600,\"-\",\"HST\",null]],\"America/Phoenix\":[[448.3,\"-\",\"LMT\",-2717670498000],[420,\"US\",\"M%sT\",-820540740000],[420,\"-\",\"MST\",-812678340000],[420,\"US\",\"M%sT\",-796867140000],[420,\"-\",\"MST\",-63244800000],[420,\"US\",\"M%sT\",-56246400000],[420,\"-\",\"MST\",null]],\"America/Shiprock\":\"America/Denver\",\"America/Boise\":[[464.81666666666666,\"-\",\"LMT\",-2717667889000],[480,\"US\",\"P%sT\",-1471816800000],[420,\"US\",\"M%sT\",157680000000],[420,\"-\",\"MST\",129088800000],[420,\"US\",\"M%sT\",null]],\"America/Indiana/Indianapolis\":[[344.6333333333333,\"-\",\"LMT\",-2717667878000],[360,\"US\",\"C%sT\",-1546387200000],[360,\"Indianapolis\",\"C%sT\",-852163200000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Indianapolis\",\"C%sT\",-463615200000],[300,\"-\",\"EST\",-386805600000],[360,\"-\",\"CST\",-368661600000],[300,\"-\",\"EST\",-86400000],[300,\"US\",\"E%sT\",62985600000],[300,\"-\",\"EST\",1167523200000],[300,\"US\",\"E%sT\",null]],\"America/Indiana/Marengo\":[[345.3833333333333,\"-\",\"LMT\",-2717667923000],[360,\"US\",\"C%sT\",-568166400000],[360,\"Marengo\",\"C%sT\",-273708000000],[300,\"-\",\"EST\",-86400000],[300,\"US\",\"E%sT\",126669600000],[360,\"1:00\",\"CDT\",152071200000],[300,\"US\",\"E%sT\",220838400000],[300,\"-\",\"EST\",1167523200000],[300,\"US\",\"E%sT\",null]],\"America/Indiana/Vincennes\":[[350.1166666666667,\"-\",\"LMT\",-2717668207000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Vincennes\",\"C%sT\",-179359200000],[300,\"-\",\"EST\",-86400000],[300,\"US\",\"E%sT\",62985600000],[300,\"-\",\"EST\",1143943200000],[360,\"US\",\"C%sT\",1194141600000],[300,\"US\",\"E%sT\",null]],\"America/Indiana/Tell_City\":[[347.05,\"-\",\"LMT\",-2717668023000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Perry\",\"C%sT\",-179359200000],[300,\"-\",\"EST\",-86400000],[300,\"US\",\"E%sT\",62985600000],[300,\"-\",\"EST\",1143943200000],[360,\"US\",\"C%sT\",null]],\"America/Indiana/Petersburg\":[[349.1166666666667,\"-\",\"LMT\",-2717668147000],[360,\"US\",\"C%sT\",-441936000000],[360,\"Pike\",\"C%sT\",-147909600000],[300,\"-\",\"EST\",-100130400000],[360,\"US\",\"C%sT\",247024800000],[300,\"-\",\"EST\",1143943200000],[360,\"US\",\"C%sT\",1194141600000],[300,\"US\",\"E%sT\",null]],\"America/Indiana/Knox\":[[346.5,\"-\",\"LMT\",-2717667990000],[360,\"US\",\"C%sT\",-694396800000],[360,\"Starke\",\"C%sT\",-242258400000],[300,\"-\",\"EST\",-195084000000],[360,\"US\",\"C%sT\",688528800000],[300,\"-\",\"EST\",1143943200000],[360,\"US\",\"C%sT\",null]],\"America/Indiana/Winamac\":[[346.4166666666667,\"-\",\"LMT\",-2717667985000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Pulaski\",\"C%sT\",-273708000000],[300,\"-\",\"EST\",-86400000],[300,\"US\",\"E%sT\",62985600000],[300,\"-\",\"EST\",1143943200000],[360,\"US\",\"C%sT\",1173578400000],[300,\"US\",\"E%sT\",null]],\"America/Indiana/Vevay\":[[340.2666666666667,\"-\",\"LMT\",-2717667616000],[360,\"US\",\"C%sT\",-495064800000],[300,\"-\",\"EST\",-86400000],[300,\"US\",\"E%sT\",126144000000],[300,\"-\",\"EST\",1167523200000],[300,\"US\",\"E%sT\",null]],\"America/Kentucky/Louisville\":[[343.0333333333333,\"-\",\"LMT\",-2717667782000],[360,\"US\",\"C%sT\",-1514851200000],[360,\"Louisville\",\"C%sT\",-852163200000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Louisville\",\"C%sT\",-266450400000],[300,\"-\",\"EST\",-31622400000],[300,\"US\",\"E%sT\",126669600000],[360,\"1:00\",\"CDT\",152071200000],[300,\"US\",\"E%sT\",null]],\"America/Kentucky/Monticello\":[[339.4,\"-\",\"LMT\",-2717667564000],[360,\"US\",\"C%sT\",-725932800000],[360,\"-\",\"CST\",-31622400000],[360,\"US\",\"C%sT\",972784800000],[300,\"US\",\"E%sT\",null]],\"America/Detroit\":[[332.18333333333334,\"-\",\"LMT\",-2019772800000],[360,\"-\",\"CST\",-1724104800000],[300,\"-\",\"EST\",-852163200000],[300,\"US\",\"E%sT\",-725932800000],[300,\"Detroit\",\"E%sT\",126144000000],[300,\"US\",\"E%sT\",189216000000],[300,\"-\",\"EST\",167796000000],[300,\"US\",\"E%sT\",null]],\"America/Menominee\":[[350.45,\"-\",\"LMT\",-2659780800000],[360,\"US\",\"C%sT\",-725932800000],[360,\"Menominee\",\"C%sT\",-21506400000],[300,\"-\",\"EST\",104896800000],[360,\"US\",\"C%sT\",null]],\"America/St_Johns\":[[210.86666666666665,\"-\",\"LMT\",-2682374400000],[210.86666666666665,\"StJohns\",\"N%sT\",-1609545600000],[210.86666666666665,\"Canada\",\"N%sT\",-1578009600000],[210.86666666666665,\"StJohns\",\"N%sT\",-1096934400000],[210,\"StJohns\",\"N%sT\",-872380800000],[210,\"Canada\",\"N%sT\",-725932800000],[210,\"StJohns\",\"N%sT\",1320105600000],[210,\"Canada\",\"N%sT\",null]],\"America/Goose_Bay\":[[241.66666666666666,\"-\",\"LMT\",-2682374400000],[210.86666666666665,\"-\",\"NST\",-1609545600000],[210.86666666666665,\"Canada\",\"N%sT\",-1578009600000],[210.86666666666665,\"-\",\"NST\",-1096934400000],[210,\"-\",\"NST\",-1041465600000],[210,\"StJohns\",\"N%sT\",-872380800000],[210,\"Canada\",\"N%sT\",-725932800000],[210,\"StJohns\",\"N%sT\",-119916000000],[240,\"StJohns\",\"A%sT\",1320105600000],[240,\"Canada\",\"A%sT\",null]],\"America/Halifax\":[[254.4,\"-\",\"LMT\",-2131660800000],[240,\"Halifax\",\"A%sT\",-1609545600000],[240,\"Canada\",\"A%sT\",-1578009600000],[240,\"Halifax\",\"A%sT\",-880236000000],[240,\"Canada\",\"A%sT\",-725932800000],[240,\"Halifax\",\"A%sT\",157680000000],[240,\"Canada\",\"A%sT\",null]],\"America/Glace_Bay\":[[239.8,\"-\",\"LMT\",-2131660800000],[240,\"Canada\",\"A%sT\",-505008000000],[240,\"Halifax\",\"A%sT\",-473472000000],[240,\"-\",\"AST\",94608000000],[240,\"Halifax\",\"A%sT\",157680000000],[240,\"Canada\",\"A%sT\",null]],\"America/Moncton\":[[259.1333333333333,\"-\",\"LMT\",-2715897600000],[300,\"-\",\"EST\",-2131660800000],[240,\"Canada\",\"A%sT\",-1136160000000],[240,\"Moncton\",\"A%sT\",-852163200000],[240,\"Canada\",\"A%sT\",-725932800000],[240,\"Moncton\",\"A%sT\",126144000000],[240,\"Canada\",\"A%sT\",757296000000],[240,\"Moncton\",\"A%sT\",1199059200000],[240,\"Canada\",\"A%sT\",null]],\"America/Blanc-Sablon\":[[228.46666666666667,\"-\",\"LMT\",-2682374400000],[240,\"Canada\",\"A%sT\",31449600000],[240,\"-\",\"AST\",null]],\"America/Montreal\":[[294.2666666666667,\"-\",\"LMT\",-2682374400000],[300,\"Mont\",\"E%sT\",-1609545600000],[300,\"Canada\",\"E%sT\",-1578009600000],[300,\"Mont\",\"E%sT\",-880236000000],[300,\"Canada\",\"E%sT\",-725932800000],[300,\"Mont\",\"E%sT\",157680000000],[300,\"Canada\",\"E%sT\",null]],\"America/Toronto\":[[317.5333333333333,\"-\",\"LMT\",-2335305600000],[300,\"Canada\",\"E%sT\",-1578009600000],[300,\"Toronto\",\"E%sT\",-880236000000],[300,\"Canada\",\"E%sT\",-725932800000],[300,\"Toronto\",\"E%sT\",157680000000],[300,\"Canada\",\"E%sT\",null]],\"America/Thunder_Bay\":[[357,\"-\",\"LMT\",-2335305600000],[360,\"-\",\"CST\",-1862006400000],[300,\"-\",\"EST\",-852163200000],[300,\"Canada\",\"E%sT\",31449600000],[300,\"Mont\",\"E%sT\",126144000000],[300,\"-\",\"EST\",157680000000],[300,\"Canada\",\"E%sT\",null]],\"America/Nipigon\":[[353.06666666666666,\"-\",\"LMT\",-2335305600000],[300,\"Canada\",\"E%sT\",-923270400000],[300,\"1:00\",\"EDT\",-880236000000],[300,\"Canada\",\"E%sT\",null]],\"America/Rainy_River\":[[378.2666666666667,\"-\",\"LMT\",-2335305600000],[360,\"Canada\",\"C%sT\",-923270400000],[360,\"1:00\",\"CDT\",-880236000000],[360,\"Canada\",\"C%sT\",null]],\"America/Atikokan\":[[366.4666666666667,\"-\",\"LMT\",-2335305600000],[360,\"Canada\",\"C%sT\",-923270400000],[360,\"1:00\",\"CDT\",-880236000000],[360,\"Canada\",\"C%sT\",-765410400000],[300,\"-\",\"EST\",null]],\"America/Winnipeg\":[[388.6,\"-\",\"LMT\",-2602281600000],[360,\"Winn\",\"C%sT\",1167523200000],[360,\"Canada\",\"C%sT\",null]],\"America/Regina\":[[418.6,\"-\",\"LMT\",-2030227200000],[420,\"Regina\",\"M%sT\",-307749600000],[360,\"-\",\"CST\",null]],\"America/Swift_Current\":[[431.3333333333333,\"-\",\"LMT\",-2030227200000],[420,\"Canada\",\"M%sT\",-749599200000],[420,\"Regina\",\"M%sT\",-599702400000],[420,\"Swift\",\"M%sT\",70941600000],[360,\"-\",\"CST\",null]],\"America/Edmonton\":[[453.8666666666667,\"-\",\"LMT\",-1998691200000],[420,\"Edm\",\"M%sT\",567907200000],[420,\"Canada\",\"M%sT\",null]],\"America/Vancouver\":[[492.4666666666667,\"-\",\"LMT\",-2682374400000],[480,\"Vanc\",\"P%sT\",567907200000],[480,\"Canada\",\"P%sT\",null]],\"America/Dawson_Creek\":[[480.93333333333334,\"-\",\"LMT\",-2682374400000],[480,\"Canada\",\"P%sT\",-694396800000],[480,\"Vanc\",\"P%sT\",83988000000],[420,\"-\",\"MST\",null]],\"America/Creston\":[[466.06666666666666,\"-\",\"LMT\",-2682374400000],[420,\"-\",\"MST\",-1680480000000],[480,\"-\",\"PST\",-1627862400000],[420,\"-\",\"MST\",null]],\"America/Pangnirtung\":[[0,\"-\",\"zzz\",-1514851200000],[240,\"NT_YK\",\"A%sT\",796701600000],[300,\"Canada\",\"E%sT\",941335200000],[360,\"Canada\",\"C%sT\",972784800000],[300,\"Canada\",\"E%sT\",null]],\"America/Iqaluit\":[[0,\"-\",\"zzz\",-865296000000],[300,\"NT_YK\",\"E%sT\",941335200000],[360,\"Canada\",\"C%sT\",972784800000],[300,\"Canada\",\"E%sT\",null]],\"America/Resolute\":[[0,\"-\",\"zzz\",-704937600000],[360,\"NT_YK\",\"C%sT\",972784800000],[300,\"-\",\"EST\",986094000000],[360,\"Canada\",\"C%sT\",1162087200000],[300,\"-\",\"EST\",1173582000000],[360,\"Canada\",\"C%sT\",null]],\"America/Rankin_Inlet\":[[0,\"-\",\"zzz\",-378777600000],[360,\"NT_YK\",\"C%sT\",972784800000],[300,\"-\",\"EST\",986094000000],[360,\"Canada\",\"C%sT\",null]],\"America/Cambridge_Bay\":[[0,\"-\",\"zzz\",-1546387200000],[420,\"NT_YK\",\"M%sT\",941335200000],[360,\"Canada\",\"C%sT\",972784800000],[300,\"-\",\"EST\",973382400000],[360,\"-\",\"CST\",986094000000],[420,\"Canada\",\"M%sT\",null]],\"America/Yellowknife\":[[0,\"-\",\"zzz\",-1073088000000],[420,\"NT_YK\",\"M%sT\",347068800000],[420,\"Canada\",\"M%sT\",null]],\"America/Inuvik\":[[0,\"-\",\"zzz\",-505008000000],[480,\"NT_YK\",\"P%sT\",291780000000],[420,\"NT_YK\",\"M%sT\",347068800000],[420,\"Canada\",\"M%sT\",null]],\"America/Whitehorse\":[[540.2,\"-\",\"LMT\",-2189030400000],[540,\"NT_YK\",\"Y%sT\",-110584800000],[480,\"NT_YK\",\"P%sT\",347068800000],[480,\"Canada\",\"P%sT\",null]],\"America/Dawson\":[[557.6666666666666,\"-\",\"LMT\",-2189030400000],[540,\"NT_YK\",\"Y%sT\",120614400000],[480,\"NT_YK\",\"P%sT\",347068800000],[480,\"Canada\",\"P%sT\",null]],\"America/Cancun\":[[347.06666666666666,\"-\",\"LMT\",-1514764024000],[360,\"-\",\"CST\",377913600000],[300,\"Mexico\",\"E%sT\",902023200000],[360,\"Mexico\",\"C%sT\",null]],\"America/Merida\":[[358.4666666666667,\"-\",\"LMT\",-1514764708000],[360,\"-\",\"CST\",377913600000],[300,\"-\",\"EST\",407635200000],[360,\"Mexico\",\"C%sT\",null]],\"America/Matamoros\":[[400,\"-\",\"LMT\",-1514767200000],[360,\"-\",\"CST\",599529600000],[360,\"US\",\"C%sT\",631065600000],[360,\"Mexico\",\"C%sT\",1293753600000],[360,\"US\",\"C%sT\",null]],\"America/Monterrey\":[[401.2666666666667,\"-\",\"LMT\",-1514767276000],[360,\"-\",\"CST\",599529600000],[360,\"US\",\"C%sT\",631065600000],[360,\"Mexico\",\"C%sT\",null]],\"America/Mexico_City\":[[396.6,\"-\",\"LMT\",-1514763396000],[420,\"-\",\"MST\",-1343091600000],[360,\"-\",\"CST\",-1234828800000],[420,\"-\",\"MST\",-1220317200000],[360,\"-\",\"CST\",-1207180800000],[420,\"-\",\"MST\",-1191369600000],[360,\"Mexico\",\"C%sT\",1001815200000],[360,\"-\",\"CST\",1014163200000],[360,\"Mexico\",\"C%sT\",null]],\"America/Ojinaga\":[[417.6666666666667,\"-\",\"LMT\",-1514764660000],[420,\"-\",\"MST\",-1343091600000],[360,\"-\",\"CST\",-1234828800000],[420,\"-\",\"MST\",-1220317200000],[360,\"-\",\"CST\",-1207180800000],[420,\"-\",\"MST\",-1191369600000],[360,\"-\",\"CST\",851990400000],[360,\"Mexico\",\"C%sT\",915062400000],[360,\"-\",\"CST\",891399600000],[420,\"Mexico\",\"M%sT\",1293753600000],[420,\"US\",\"M%sT\",null]],\"America/Chihuahua\":[[424.3333333333333,\"-\",\"LMT\",-1514765060000],[420,\"-\",\"MST\",-1343091600000],[360,\"-\",\"CST\",-1234828800000],[420,\"-\",\"MST\",-1220317200000],[360,\"-\",\"CST\",-1207180800000],[420,\"-\",\"MST\",-1191369600000],[360,\"-\",\"CST\",851990400000],[360,\"Mexico\",\"C%sT\",915062400000],[360,\"-\",\"CST\",891399600000],[420,\"Mexico\",\"M%sT\",null]],\"America/Hermosillo\":[[443.8666666666667,\"-\",\"LMT\",-1514766232000],[420,\"-\",\"MST\",-1343091600000],[360,\"-\",\"CST\",-1234828800000],[420,\"-\",\"MST\",-1220317200000],[360,\"-\",\"CST\",-1207180800000],[420,\"-\",\"MST\",-1191369600000],[360,\"-\",\"CST\",-873849600000],[420,\"-\",\"MST\",-661564800000],[480,\"-\",\"PST\",31449600000],[420,\"Mexico\",\"M%sT\",946598400000],[420,\"-\",\"MST\",null]],\"America/Mazatlan\":[[425.6666666666667,\"-\",\"LMT\",-1514765140000],[420,\"-\",\"MST\",-1343091600000],[360,\"-\",\"CST\",-1234828800000],[420,\"-\",\"MST\",-1220317200000],[360,\"-\",\"CST\",-1207180800000],[420,\"-\",\"MST\",-1191369600000],[360,\"-\",\"CST\",-873849600000],[420,\"-\",\"MST\",-661564800000],[480,\"-\",\"PST\",31449600000],[420,\"Mexico\",\"M%sT\",null]],\"America/Bahia_Banderas\":[[421,\"-\",\"LMT\",-1514764860000],[420,\"-\",\"MST\",-1343091600000],[360,\"-\",\"CST\",-1234828800000],[420,\"-\",\"MST\",-1220317200000],[360,\"-\",\"CST\",-1207180800000],[420,\"-\",\"MST\",-1191369600000],[360,\"-\",\"CST\",-873849600000],[420,\"-\",\"MST\",-661564800000],[480,\"-\",\"PST\",31449600000],[420,\"Mexico\",\"M%sT\",1270346400000],[360,\"Mexico\",\"C%sT\",null]],\"America/Tijuana\":[[468.06666666666666,\"-\",\"LMT\",-1514764084000],[420,\"-\",\"MST\",-1420156800000],[480,\"-\",\"PST\",-1343091600000],[420,\"-\",\"MST\",-1234828800000],[480,\"-\",\"PST\",-1222992000000],[480,\"1:00\",\"PDT\",-1207267200000],[480,\"-\",\"PST\",-873849600000],[480,\"1:00\",\"PWT\",-769395600000],[480,\"1:00\",\"PPT\",-761702400000],[480,\"-\",\"PST\",-686102400000],[480,\"1:00\",\"PDT\",-661564800000],[480,\"-\",\"PST\",-473472000000],[480,\"CA\",\"P%sT\",-252547200000],[480,\"-\",\"PST\",220838400000],[480,\"US\",\"P%sT\",851990400000],[480,\"Mexico\",\"P%sT\",1009756800000],[480,\"US\",\"P%sT\",1014163200000],[480,\"Mexico\",\"P%sT\",1293753600000],[480,\"US\",\"P%sT\",null]],\"America/Santa_Isabel\":[[459.4666666666667,\"-\",\"LMT\",-1514763568000],[420,\"-\",\"MST\",-1420156800000],[480,\"-\",\"PST\",-1343091600000],[420,\"-\",\"MST\",-1234828800000],[480,\"-\",\"PST\",-1222992000000],[480,\"1:00\",\"PDT\",-1207267200000],[480,\"-\",\"PST\",-873849600000],[480,\"1:00\",\"PWT\",-769395600000],[480,\"1:00\",\"PPT\",-761702400000],[480,\"-\",\"PST\",-686102400000],[480,\"1:00\",\"PDT\",-661564800000],[480,\"-\",\"PST\",-473472000000],[480,\"CA\",\"P%sT\",-252547200000],[480,\"-\",\"PST\",220838400000],[480,\"US\",\"P%sT\",851990400000],[480,\"Mexico\",\"P%sT\",1009756800000],[480,\"US\",\"P%sT\",1014163200000],[480,\"Mexico\",\"P%sT\",null]],\"America/Anguilla\":[[252.26666666666665,\"-\",\"LMT\",-1825113600000],[240,\"-\",\"AST\",null]],\"America/Antigua\":[[247.2,\"-\",\"LMT\",-1825113600000],[300,\"-\",\"EST\",-568166400000],[240,\"-\",\"AST\",null]],\"America/Nassau\":[[309.5,\"-\",\"LMT\",-1825113600000],[300,\"Bahamas\",\"E%sT\",220838400000],[300,\"US\",\"E%sT\",null]],\"America/Barbados\":[[238.48333333333335,\"-\",\"LMT\",-1420156800000],[238.48333333333335,\"-\",\"BMT\",-1167696000000],[240,\"Barb\",\"A%sT\",null]],\"America/Belize\":[[352.8,\"-\",\"LMT\",-1822521600000],[360,\"Belize\",\"C%sT\",null]],\"Atlantic/Bermuda\":[[259.3,\"-\",\"LMT\",-1262296800000],[240,\"-\",\"AST\",136346400000],[240,\"Bahamas\",\"A%sT\",220838400000],[240,\"US\",\"A%sT\",null]],\"America/Cayman\":[[325.5333333333333,\"-\",\"LMT\",-2493072000000],[307.2,\"-\",\"KMT\",-1827705600000],[300,\"-\",\"EST\",null]],\"America/Costa_Rica\":[[336.2166666666667,\"-\",\"LMT\",-2493072000000],[336.2166666666667,\"-\",\"SJMT\",-1545091200000],[360,\"CR\",\"C%sT\",null]],\"America/Havana\":[[329.4666666666667,\"-\",\"LMT\",-2493072000000],[329.6,\"-\",\"HMT\",-1402833600000],[300,\"Cuba\",\"C%sT\",null]],\"America/Dominica\":[[245.6,\"-\",\"LMT\",-1846281540000],[240,\"-\",\"AST\",null]],\"America/Santo_Domingo\":[[279.6,\"-\",\"LMT\",-2493072000000],[280,\"-\",\"SDMT\",-1159790400000],[300,\"DR\",\"E%sT\",152064000000],[240,\"-\",\"AST\",972784800000],[300,\"US\",\"E%sT\",975805200000],[240,\"-\",\"AST\",null]],\"America/El_Salvador\":[[356.8,\"-\",\"LMT\",-1514851200000],[360,\"Salv\",\"C%sT\",null]],\"America/Grenada\":[[247,\"-\",\"LMT\",-1846281600000],[240,\"-\",\"AST\",null]],\"America/Guadeloupe\":[[246.13333333333335,\"-\",\"LMT\",-1848268800000],[240,\"-\",\"AST\",null]],\"America/St_Barthelemy\":\"America/Guadeloupe\",\"America/Marigot\":\"America/Guadeloupe\",\"America/Guatemala\":[[362.06666666666666,\"-\",\"LMT\",-1617062400000],[360,\"Guat\",\"C%sT\",null]],\"America/Port-au-Prince\":[[289.3333333333333,\"-\",\"LMT\",-2493072000000],[289,\"-\",\"PPMT\",-1670500800000],[300,\"Haiti\",\"E%sT\",null]],\"America/Tegucigalpa\":[[348.8666666666667,\"-\",\"LMT\",-1538524800000],[360,\"Hond\",\"C%sT\",null]],\"America/Jamaica\":[[307.2,\"-\",\"LMT\",-2493072000000],[307.2,\"-\",\"KMT\",-1827705600000],[300,\"-\",\"EST\",136346400000],[300,\"US\",\"E%sT\",473299200000],[300,\"-\",\"EST\",null]],\"America/Martinique\":[[244.33333333333334,\"-\",\"LMT\",-2493072000000],[244.33333333333334,\"-\",\"FFMT\",-1851552000000],[240,\"-\",\"AST\",323827200000],[240,\"1:00\",\"ADT\",338947200000],[240,\"-\",\"AST\",null]],\"America/Montserrat\":[[248.86666666666665,\"-\",\"LMT\",-1846281540000],[240,\"-\",\"AST\",null]],\"America/Managua\":[[345.1333333333333,\"-\",\"LMT\",-2493072000000],[345.2,\"-\",\"MMT\",-1121126400000],[360,\"-\",\"CST\",105062400000],[300,\"-\",\"EST\",161740800000],[360,\"Nic\",\"C%sT\",694238400000],[300,\"-\",\"EST\",717292800000],[360,\"-\",\"CST\",757296000000],[300,\"-\",\"EST\",883526400000],[360,\"Nic\",\"C%sT\",null]],\"America/Panama\":[[318.1333333333333,\"-\",\"LMT\",-2493072000000],[319.6,\"-\",\"CMT\",-1946937600000],[300,\"-\",\"EST\",null]],\"America/Puerto_Rico\":[[264.4166666666667,\"-\",\"LMT\",-2233051200000],[240,\"-\",\"AST\",-873072000000],[240,\"US\",\"A%sT\",-725932800000],[240,\"-\",\"AST\",null]],\"America/St_Kitts\":[[250.86666666666665,\"-\",\"LMT\",-1825113600000],[240,\"-\",\"AST\",null]],\"America/St_Lucia\":[[244,\"-\",\"LMT\",-2493072000000],[244,\"-\",\"CMT\",-1798848000000],[240,\"-\",\"AST\",null]],\"America/Miquelon\":[[224.66666666666666,\"-\",\"LMT\",-1850342400000],[240,\"-\",\"AST\",325987200000],[180,\"-\",\"PMST\",567907200000],[180,\"Canada\",\"PM%sT\",null]],\"America/St_Vincent\":[[244.93333333333334,\"-\",\"LMT\",-2493072000000],[244.93333333333334,\"-\",\"KMT\",-1798848000000],[240,\"-\",\"AST\",null]],\"America/Grand_Turk\":[[284.5333333333333,\"-\",\"LMT\",-2493072000000],[307.2,\"-\",\"KMT\",-1827705600000],[300,\"TC\",\"E%sT\",null]],\"America/Tortola\":[[258.46666666666664,\"-\",\"LMT\",-1846281600000],[240,\"-\",\"AST\",null]],\"America/St_Thomas\":[[259.73333333333335,\"-\",\"LMT\",-1846281600000],[240,\"-\",\"AST\",null]],\"US/Pacific-New\":\"America/Los_Angeles\",\"Asia/Riyadh87\":[[-187.06666666666666,\"-\",\"zzz\",567907200000],[-187.06666666666666,\"sol87\",\"zzz\",599529600000],[-187.06666666666666,\"-\",\"zzz\",null]],\"Mideast/Riyadh87\":\"Asia/Riyadh87\",\"Asia/Riyadh88\":[[-187.06666666666666,\"-\",\"zzz\",599529600000],[-187.06666666666666,\"sol88\",\"zzz\",631065600000],[-187.06666666666666,\"-\",\"zzz\",null]],\"Mideast/Riyadh88\":\"Asia/Riyadh88\",\"Asia/Riyadh89\":[[-187.06666666666666,\"-\",\"zzz\",631065600000],[-187.06666666666666,\"sol89\",\"zzz\",662601600000],[-187.06666666666666,\"-\",\"zzz\",null]],\"Mideast/Riyadh89\":\"Asia/Riyadh89\",\"America/Argentina/Buenos_Aires\":[[233.8,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"Arg\",\"AR%sT\",null]],\"America/Argentina/Cordoba\":[[256.8,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",667958400000],[240,\"-\",\"WART\",687916800000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"Arg\",\"AR%sT\",null]],\"America/Argentina/Salta\":[[261.66666666666663,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",667958400000],[240,\"-\",\"WART\",687916800000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/Tucuman\":[[260.8666666666667,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",667958400000],[240,\"-\",\"WART\",687916800000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1086048000000],[240,\"-\",\"WART\",1087084800000],[180,\"Arg\",\"AR%sT\",null]],\"America/Argentina/La_Rioja\":[[267.4,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",667785600000],[240,\"-\",\"WART\",673574400000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1086048000000],[240,\"-\",\"WART\",1087689600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/San_Juan\":[[274.06666666666666,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",667785600000],[240,\"-\",\"WART\",673574400000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1085961600000],[240,\"-\",\"WART\",1090713600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/Jujuy\":[[261.2,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",636508800000],[240,\"-\",\"WART\",657072000000],[240,\"1:00\",\"WARST\",669168000000],[240,\"-\",\"WART\",686707200000],[180,\"1:00\",\"ARST\",725760000000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/Catamarca\":[[263.1333333333333,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",667958400000],[240,\"-\",\"WART\",687916800000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1086048000000],[240,\"-\",\"WART\",1087689600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/Mendoza\":[[275.2666666666667,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",636508800000],[240,\"-\",\"WART\",655948800000],[240,\"1:00\",\"WARST\",667785600000],[240,\"-\",\"WART\",687484800000],[240,\"1:00\",\"WARST\",699408000000],[240,\"-\",\"WART\",719366400000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1085270400000],[240,\"-\",\"WART\",1096156800000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/San_Luis\":[[265.4,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",662601600000],[180,\"1:00\",\"ARST\",637372800000],[240,\"-\",\"WART\",655948800000],[240,\"1:00\",\"WARST\",667785600000],[240,\"-\",\"WART\",675734400000],[180,\"-\",\"ART\",938908800000],[240,\"1:00\",\"WARST\",952041600000],[180,\"-\",\"ART\",1085961600000],[240,\"-\",\"WART\",1090713600000],[180,\"Arg\",\"AR%sT\",1200873600000],[240,\"SanLuis\",\"WAR%sT\",null]],\"America/Argentina/Rio_Gallegos\":[[276.8666666666667,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1086048000000],[240,\"-\",\"WART\",1087689600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Argentina/Ushuaia\":[[273.2,\"-\",\"LMT\",-2372112000000],[256.8,\"-\",\"CMT\",-1567468800000],[240,\"-\",\"ART\",-1233446400000],[240,\"Arg\",\"AR%sT\",-7603200000],[180,\"Arg\",\"AR%sT\",938908800000],[240,\"Arg\",\"AR%sT\",952041600000],[180,\"-\",\"ART\",1085875200000],[240,\"-\",\"WART\",1087689600000],[180,\"Arg\",\"AR%sT\",1224288000000],[180,\"-\",\"ART\",null]],\"America/Aruba\":[[280.4,\"-\",\"LMT\",-1826755200000],[270,\"-\",\"ANT\",-126316800000],[240,\"-\",\"AST\",null]],\"America/La_Paz\":[[272.6,\"-\",\"LMT\",-2493072000000],[272.6,\"-\",\"CMT\",-1205971200000],[272.6,\"1:00\",\"BOST\",-1192320000000],[240,\"-\",\"BOT\",null]],\"America/Noronha\":[[129.66666666666669,\"-\",\"LMT\",-1735776000000],[120,\"Brazil\",\"FN%sT\",653529600000],[120,\"-\",\"FNT\",938649600000],[120,\"Brazil\",\"FN%sT\",971568000000],[120,\"-\",\"FNT\",1000339200000],[120,\"Brazil\",\"FN%sT\",1033430400000],[120,\"-\",\"FNT\",null]],\"America/Belem\":[[193.93333333333334,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",590025600000],[180,\"-\",\"BRT\",null]],\"America/Santarem\":[[218.8,\"-\",\"LMT\",-1735776000000],[240,\"Brazil\",\"AM%sT\",590025600000],[240,\"-\",\"AMT\",1214265600000],[180,\"-\",\"BRT\",null]],\"America/Fortaleza\":[[154,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",653529600000],[180,\"-\",\"BRT\",938649600000],[180,\"Brazil\",\"BR%sT\",972172800000],[180,\"-\",\"BRT\",1000339200000],[180,\"Brazil\",\"BR%sT\",1033430400000],[180,\"-\",\"BRT\",null]],\"America/Recife\":[[139.6,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",653529600000],[180,\"-\",\"BRT\",938649600000],[180,\"Brazil\",\"BR%sT\",971568000000],[180,\"-\",\"BRT\",1000339200000],[180,\"Brazil\",\"BR%sT\",1033430400000],[180,\"-\",\"BRT\",null]],\"America/Araguaina\":[[192.8,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",653529600000],[180,\"-\",\"BRT\",811036800000],[180,\"Brazil\",\"BR%sT\",1064361600000],[180,\"-\",\"BRT\",1350777600000],[180,\"Brazil\",\"BR%sT\",null]],\"America/Maceio\":[[142.86666666666665,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",653529600000],[180,\"-\",\"BRT\",813542400000],[180,\"Brazil\",\"BR%sT\",841795200000],[180,\"-\",\"BRT\",938649600000],[180,\"Brazil\",\"BR%sT\",972172800000],[180,\"-\",\"BRT\",1000339200000],[180,\"Brazil\",\"BR%sT\",1033430400000],[180,\"-\",\"BRT\",null]],\"America/Bahia\":[[154.06666666666666,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",1064361600000],[180,\"-\",\"BRT\",1318723200000],[180,\"Brazil\",\"BR%sT\",1350777600000],[180,\"-\",\"BRT\",null]],\"America/Sao_Paulo\":[[186.46666666666667,\"-\",\"LMT\",-1735776000000],[180,\"Brazil\",\"BR%sT\",-195436800000],[180,\"1:00\",\"BRST\",-157852800000],[180,\"Brazil\",\"BR%sT\",null]],\"America/Campo_Grande\":[[218.46666666666667,\"-\",\"LMT\",-1735776000000],[240,\"Brazil\",\"AM%sT\",null]],\"America/Cuiaba\":[[224.33333333333334,\"-\",\"LMT\",-1735776000000],[240,\"Brazil\",\"AM%sT\",1064361600000],[240,\"-\",\"AMT\",1096588800000],[240,\"Brazil\",\"AM%sT\",null]],\"America/Porto_Velho\":[[255.6,\"-\",\"LMT\",-1735776000000],[240,\"Brazil\",\"AM%sT\",590025600000],[240,\"-\",\"AMT\",null]],\"America/Boa_Vista\":[[242.66666666666666,\"-\",\"LMT\",-1735776000000],[240,\"Brazil\",\"AM%sT\",590025600000],[240,\"-\",\"AMT\",938649600000],[240,\"Brazil\",\"AM%sT\",971568000000],[240,\"-\",\"AMT\",null]],\"America/Manaus\":[[240.06666666666666,\"-\",\"LMT\",-1735776000000],[240,\"Brazil\",\"AM%sT\",590025600000],[240,\"-\",\"AMT\",749174400000],[240,\"Brazil\",\"AM%sT\",780192000000],[240,\"-\",\"AMT\",null]],\"America/Eirunepe\":[[279.4666666666667,\"-\",\"LMT\",-1735776000000],[300,\"Brazil\",\"AC%sT\",590025600000],[300,\"-\",\"ACT\",749174400000],[300,\"Brazil\",\"AC%sT\",780192000000],[300,\"-\",\"ACT\",1214265600000],[240,\"-\",\"AMT\",null]],\"America/Rio_Branco\":[[271.2,\"-\",\"LMT\",-1735776000000],[300,\"Brazil\",\"AC%sT\",590025600000],[300,\"-\",\"ACT\",1214265600000],[240,\"-\",\"AMT\",null]],\"America/Santiago\":[[282.7666666666667,\"-\",\"LMT\",-2493072000000],[282.7666666666667,\"-\",\"SMT\",-1862006400000],[300,\"-\",\"CLT\",-1688428800000],[282.7666666666667,\"-\",\"SMT\",-1620000000000],[240,\"-\",\"CLT\",-1593820800000],[282.7666666666667,\"-\",\"SMT\",-1336003200000],[300,\"Chile\",\"CL%sT\",-713664000000],[240,\"Chile\",\"CL%sT\",null]],\"Pacific/Easter\":[[437.7333333333333,\"-\",\"LMT\",-2493072000000],[437.4666666666667,\"-\",\"EMT\",-1178150400000],[420,\"Chile\",\"EAS%sT\",384901200000],[360,\"Chile\",\"EAS%sT\",null]],\"America/Bogota\":[[296.2666666666667,\"-\",\"LMT\",-2707689600000],[296.2666666666667,\"-\",\"BMT\",-1739059200000],[300,\"CO\",\"CO%sT\",null]],\"America/Curacao\":[[275.7833333333333,\"-\",\"LMT\",-1826755200000],[270,\"-\",\"ANT\",-126316800000],[240,\"-\",\"AST\",null]],\"America/Lower_Princes\":\"America/Curacao\",\"America/Kralendijk\":\"America/Curacao\",\"America/Guayaquil\":[[319.3333333333333,\"-\",\"LMT\",-2493072000000],[314,\"-\",\"QMT\",-1199318400000],[300,\"-\",\"ECT\",null]],\"Pacific/Galapagos\":[[358.4,\"-\",\"LMT\",-1199318400000],[300,\"-\",\"ECT\",536371200000],[360,\"-\",\"GALT\",null]],\"Atlantic/Stanley\":[[231.4,\"-\",\"LMT\",-2493072000000],[231.4,\"-\",\"SMT\",-1824249600000],[240,\"Falk\",\"FK%sT\",420595200000],[180,\"Falk\",\"FK%sT\",495590400000],[240,\"Falk\",\"FK%sT\",1283652000000],[180,\"-\",\"FKST\",null]],\"America/Cayenne\":[[209.33333333333334,\"-\",\"LMT\",-1846281600000],[240,\"-\",\"GFT\",-71107200000],[180,\"-\",\"GFT\",null]],\"America/Guyana\":[[232.66666666666666,\"-\",\"LMT\",-1730592000000],[225,\"-\",\"GBGT\",-113702400000],[225,\"-\",\"GYT\",175996800000],[180,\"-\",\"GYT\",694137600000],[240,\"-\",\"GYT\",null]],\"America/Asuncion\":[[230.66666666666666,\"-\",\"LMT\",-2493072000000],[230.66666666666666,\"-\",\"AMT\",-1206403200000],[240,\"-\",\"PYT\",86745600000],[180,\"-\",\"PYT\",134006400000],[240,\"Para\",\"PY%sT\",null]],\"America/Lima\":[[308.2,\"-\",\"LMT\",-2493072000000],[308.6,\"-\",\"LMT\",-1938556800000],[300,\"Peru\",\"PE%sT\",null]],\"Atlantic/South_Georgia\":[[146.13333333333335,\"-\",\"LMT\",-2493072000000],[120,\"-\",\"GST\",null]],\"America/Paramaribo\":[[220.66666666666666,\"-\",\"LMT\",-1830470400000],[220.86666666666665,\"-\",\"PMT\",-1073088000000],[220.6,\"-\",\"PMT\",-765331200000],[210,\"-\",\"NEGT\",185673600000],[210,\"-\",\"SRT\",465436800000],[180,\"-\",\"SRT\",null]],\"America/Port_of_Spain\":[[246.06666666666666,\"-\",\"LMT\",-1825113600000],[240,\"-\",\"AST\",null]],\"America/Montevideo\":[[224.73333333333335,\"-\",\"LMT\",-2256681600000],[224.73333333333335,\"-\",\"MMT\",-1567468800000],[210,\"Uruguay\",\"UY%sT\",-853632000000],[180,\"Uruguay\",\"UY%sT\",null]],\"America/Caracas\":[[267.7333333333333,\"-\",\"LMT\",-2493072000000],[267.6666666666667,\"-\",\"CMT\",-1826755200000],[270,\"-\",\"VET\",-126316800000],[240,\"-\",\"VET\",1197169200000],[270,\"-\",\"VET\",null]]},\"rules\":{\"Algeria\":[[1916,\"only\",\"-\",\"Jun\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1916,1919,\"-\",\"Oct\",\"Sun>=1\",[23,0,0,\"s\"],0,\"-\"],[1917,\"only\",\"-\",\"Mar\",\"24\",[23,0,0,\"s\"],60,\"S\"],[1918,\"only\",\"-\",\"Mar\",\"9\",[23,0,0,\"s\"],60,\"S\"],[1919,\"only\",\"-\",\"Mar\",\"1\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Feb\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Oct\",\"23\",[23,0,0,\"s\"],0,\"-\"],[1921,\"only\",\"-\",\"Mar\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1921,\"only\",\"-\",\"Jun\",\"21\",[23,0,0,\"s\"],0,\"-\"],[1939,\"only\",\"-\",\"Sep\",\"11\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"19\",[1,0,0,null],0,\"-\"],[1944,1945,\"-\",\"Apr\",\"Mon>=1\",[2,0,0,null],60,\"S\"],[1944,\"only\",\"-\",\"Oct\",\"8\",[2,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"Sep\",\"16\",[1,0,0,null],0,\"-\"],[1971,\"only\",\"-\",\"Apr\",\"25\",[23,0,0,\"s\"],60,\"S\"],[1971,\"only\",\"-\",\"Sep\",\"26\",[23,0,0,\"s\"],0,\"-\"],[1977,\"only\",\"-\",\"May\",\"6\",[0,0,0,null],60,\"S\"],[1977,\"only\",\"-\",\"Oct\",\"21\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Mar\",\"24\",[1,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Sep\",\"22\",[3,0,0,null],0,\"-\"],[1980,\"only\",\"-\",\"Apr\",\"25\",[0,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"Oct\",\"31\",[2,0,0,null],0,\"-\"]],\"Egypt\":[[1940,\"only\",\"-\",\"Jul\",\"15\",[0,0,0,null],60,\"S\"],[1940,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1941,\"only\",\"-\",\"Apr\",\"15\",[0,0,0,null],60,\"S\"],[1941,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,null],0,\"-\"],[1942,1944,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Oct\",\"27\",[0,0,0,null],0,\"-\"],[1943,1945,\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"Apr\",\"16\",[0,0,0,null],60,\"S\"],[1957,\"only\",\"-\",\"May\",\"10\",[0,0,0,null],60,\"S\"],[1957,1958,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1958,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1959,1981,\"-\",\"May\",\"1\",[1,0,0,null],60,\"S\"],[1959,1965,\"-\",\"Sep\",\"30\",[3,0,0,null],0,\"-\"],[1966,1994,\"-\",\"Oct\",\"1\",[3,0,0,null],0,\"-\"],[1982,\"only\",\"-\",\"Jul\",\"25\",[1,0,0,null],60,\"S\"],[1983,\"only\",\"-\",\"Jul\",\"12\",[1,0,0,null],60,\"S\"],[1984,1988,\"-\",\"May\",\"1\",[1,0,0,null],60,\"S\"],[1989,\"only\",\"-\",\"May\",\"6\",[1,0,0,null],60,\"S\"],[1990,1994,\"-\",\"May\",\"1\",[1,0,0,null],60,\"S\"],[1995,2010,\"-\",\"Apr\",\"lastFri\",[0,0,0,\"s\"],60,\"S\"],[1995,2005,\"-\",\"Sep\",\"lastThu\",[23,0,0,\"s\"],0,\"-\"],[2006,\"only\",\"-\",\"Sep\",\"21\",[23,0,0,\"s\"],0,\"-\"],[2007,\"only\",\"-\",\"Sep\",\"Thu>=1\",[23,0,0,\"s\"],0,\"-\"],[2008,\"only\",\"-\",\"Aug\",\"lastThu\",[23,0,0,\"s\"],0,\"-\"],[2009,\"only\",\"-\",\"Aug\",\"20\",[23,0,0,\"s\"],0,\"-\"],[2010,\"only\",\"-\",\"Aug\",\"11\",[0,0,0,null],0,\"-\"],[2010,\"only\",\"-\",\"Sep\",\"10\",[0,0,0,null],60,\"S\"],[2010,\"only\",\"-\",\"Sep\",\"lastThu\",[23,0,0,\"s\"],0,\"-\"]],\"Ghana\":[[1936,1942,\"-\",\"Sep\",\"1\",[0,0,0,null],20,\"GHST\"],[1936,1942,\"-\",\"Dec\",\"31\",[0,0,0,null],0,\"GMT\"]],\"Libya\":[[1951,\"only\",\"-\",\"Oct\",\"14\",[2,0,0,null],60,\"S\"],[1952,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],0,\"-\"],[1953,\"only\",\"-\",\"Oct\",\"9\",[2,0,0,null],60,\"S\"],[1954,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],0,\"-\"],[1955,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],60,\"S\"],[1956,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],0,\"-\"],[1982,1984,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1982,1985,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1985,\"only\",\"-\",\"Apr\",\"6\",[0,0,0,null],60,\"S\"],[1986,\"only\",\"-\",\"Apr\",\"4\",[0,0,0,null],60,\"S\"],[1986,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1987,1989,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1987,1989,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1997,\"only\",\"-\",\"Apr\",\"4\",[0,0,0,null],60,\"S\"],[1997,\"only\",\"-\",\"Oct\",\"4\",[0,0,0,null],0,\"-\"],[2013,\"max\",\"-\",\"Mar\",\"lastFri\",[1,0,0,null],60,\"S\"],[2013,\"max\",\"-\",\"Oct\",\"lastFri\",[2,0,0,null],0,\"-\"]],\"Mauritius\":[[1982,\"only\",\"-\",\"Oct\",\"10\",[0,0,0,null],60,\"S\"],[1983,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],0,\"-\"],[2008,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],60,\"S\"],[2009,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,null],0,\"-\"]],\"Morocco\":[[1939,\"only\",\"-\",\"Sep\",\"12\",[0,0,0,null],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"19\",[0,0,0,null],0,\"-\"],[1940,\"only\",\"-\",\"Feb\",\"25\",[0,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Nov\",\"18\",[0,0,0,null],0,\"-\"],[1950,\"only\",\"-\",\"Jun\",\"11\",[0,0,0,null],60,\"S\"],[1950,\"only\",\"-\",\"Oct\",\"29\",[0,0,0,null],0,\"-\"],[1967,\"only\",\"-\",\"Jun\",\"3\",[12,0,0,null],60,\"S\"],[1967,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"Jun\",\"24\",[0,0,0,null],60,\"S\"],[1974,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"-\"],[1976,1977,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Aug\",\"1\",[0,0,0,null],0,\"-\"],[1977,\"only\",\"-\",\"Sep\",\"28\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Aug\",\"4\",[0,0,0,null],0,\"-\"],[2008,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[2008,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"-\"],[2009,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[2009,\"only\",\"-\",\"Aug\",\"21\",[0,0,0,null],0,\"-\"],[2010,\"only\",\"-\",\"May\",\"2\",[0,0,0,null],60,\"S\"],[2010,\"only\",\"-\",\"Aug\",\"8\",[0,0,0,null],0,\"-\"],[2011,\"only\",\"-\",\"Apr\",\"3\",[0,0,0,null],60,\"S\"],[2011,\"only\",\"-\",\"Jul\",\"31\",[0,0,0,null],0,\"-\"],[2012,2019,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"S\"],[2012,\"max\",\"-\",\"Sep\",\"lastSun\",[3,0,0,null],0,\"-\"],[2012,\"only\",\"-\",\"Jul\",\"20\",[3,0,0,null],0,\"-\"],[2012,\"only\",\"-\",\"Aug\",\"20\",[2,0,0,null],60,\"S\"],[2013,\"only\",\"-\",\"Jul\",\"7\",[3,0,0,null],0,\"-\"],[2013,\"only\",\"-\",\"Aug\",\"10\",[2,0,0,null],60,\"S\"],[2014,\"only\",\"-\",\"Jun\",\"29\",[3,0,0,null],0,\"-\"],[2014,\"only\",\"-\",\"Jul\",\"29\",[2,0,0,null],60,\"S\"],[2015,\"only\",\"-\",\"Jun\",\"18\",[3,0,0,null],0,\"-\"],[2015,\"only\",\"-\",\"Jul\",\"18\",[2,0,0,null],60,\"S\"],[2016,\"only\",\"-\",\"Jun\",\"7\",[3,0,0,null],0,\"-\"],[2016,\"only\",\"-\",\"Jul\",\"7\",[2,0,0,null],60,\"S\"],[2017,\"only\",\"-\",\"May\",\"27\",[3,0,0,null],0,\"-\"],[2017,\"only\",\"-\",\"Jun\",\"26\",[2,0,0,null],60,\"S\"],[2018,\"only\",\"-\",\"May\",\"16\",[3,0,0,null],0,\"-\"],[2018,\"only\",\"-\",\"Jun\",\"15\",[2,0,0,null],60,\"S\"],[2019,\"only\",\"-\",\"May\",\"6\",[3,0,0,null],0,\"-\"],[2019,\"only\",\"-\",\"Jun\",\"5\",[2,0,0,null],60,\"S\"],[2020,\"only\",\"-\",\"May\",\"24\",[2,0,0,null],60,\"S\"],[2021,\"only\",\"-\",\"May\",\"13\",[2,0,0,null],60,\"S\"],[2022,\"only\",\"-\",\"May\",\"3\",[2,0,0,null],60,\"S\"],[2023,\"max\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"S\"]],\"Namibia\":[[1994,\"max\",\"-\",\"Sep\",\"Sun>=1\",[2,0,0,null],60,\"S\"],[1995,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],0,\"-\"]],\"SL\":[[1935,1942,\"-\",\"Jun\",\"1\",[0,0,0,null],40,\"SLST\"],[1935,1942,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"WAT\"],[1957,1962,\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"SLST\"],[1957,1962,\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"GMT\"]],\"SA\":[[1942,1943,\"-\",\"Sep\",\"Sun>=15\",[2,0,0,null],60,\"-\"],[1943,1944,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,null],0,\"-\"]],\"Sudan\":[[1970,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1970,1985,\"-\",\"Oct\",\"15\",[0,0,0,null],0,\"-\"],[1971,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"S\"],[1972,1985,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],60,\"S\"]],\"Tunisia\":[[1939,\"only\",\"-\",\"Apr\",\"15\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"18\",[23,0,0,\"s\"],0,\"-\"],[1940,\"only\",\"-\",\"Feb\",\"25\",[23,0,0,\"s\"],60,\"S\"],[1941,\"only\",\"-\",\"Oct\",\"6\",[0,0,0,null],0,\"-\"],[1942,\"only\",\"-\",\"Mar\",\"9\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Nov\",\"2\",[3,0,0,null],0,\"-\"],[1943,\"only\",\"-\",\"Mar\",\"29\",[2,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Apr\",\"17\",[2,0,0,null],0,\"-\"],[1943,\"only\",\"-\",\"Apr\",\"25\",[2,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Oct\",\"4\",[2,0,0,null],0,\"-\"],[1944,1945,\"-\",\"Apr\",\"Mon>=1\",[2,0,0,null],60,\"S\"],[1944,\"only\",\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,null],0,\"-\"],[1977,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,\"s\"],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"24\",[0,0,0,\"s\"],0,\"-\"],[1978,\"only\",\"-\",\"May\",\"1\",[0,0,0,\"s\"],60,\"S\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,\"s\"],0,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,\"s\"],60,\"S\"],[1988,1990,\"-\",\"Sep\",\"lastSun\",[0,0,0,\"s\"],0,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"26\",[0,0,0,\"s\"],60,\"S\"],[1990,\"only\",\"-\",\"May\",\"1\",[0,0,0,\"s\"],60,\"S\"],[2005,\"only\",\"-\",\"May\",\"1\",[0,0,0,\"s\"],60,\"S\"],[2005,\"only\",\"-\",\"Sep\",\"30\",[1,0,0,\"s\"],0,\"-\"],[2006,2008,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[2006,2008,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"]],\"ArgAQ\":[[1964,1966,\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1964,1966,\"-\",\"Oct\",\"15\",[0,0,0,null],60,\"S\"],[1967,\"only\",\"-\",\"Apr\",\"2\",[0,0,0,null],0,\"-\"],[1967,1968,\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1968,1969,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"Jan\",\"23\",[0,0,0,null],60,\"S\"],[1974,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],0,\"-\"]],\"ChileAQ\":[[1972,1986,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1974,1987,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1987,\"only\",\"-\",\"Apr\",\"12\",[3,0,0,\"u\"],0,\"-\"],[1988,1989,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"Sun>=1\",[4,0,0,\"u\"],60,\"S\"],[1989,\"only\",\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1990,\"only\",\"-\",\"Mar\",\"18\",[3,0,0,\"u\"],0,\"-\"],[1990,\"only\",\"-\",\"Sep\",\"16\",[4,0,0,\"u\"],60,\"S\"],[1991,1996,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1991,1997,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1997,\"only\",\"-\",\"Mar\",\"30\",[3,0,0,\"u\"],0,\"-\"],[1998,\"only\",\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1998,\"only\",\"-\",\"Sep\",\"27\",[4,0,0,\"u\"],60,\"S\"],[1999,\"only\",\"-\",\"Apr\",\"4\",[3,0,0,\"u\"],0,\"-\"],[1999,2010,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[2000,2007,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[2008,\"only\",\"-\",\"Mar\",\"30\",[3,0,0,\"u\"],0,\"-\"],[2009,\"only\",\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[2010,\"only\",\"-\",\"Apr\",\"Sun>=1\",[3,0,0,\"u\"],0,\"-\"],[2011,\"only\",\"-\",\"May\",\"Sun>=2\",[3,0,0,\"u\"],0,\"-\"],[2011,\"only\",\"-\",\"Aug\",\"Sun>=16\",[4,0,0,\"u\"],60,\"S\"],[2012,\"max\",\"-\",\"Apr\",\"Sun>=23\",[3,0,0,\"u\"],0,\"-\"],[2012,\"max\",\"-\",\"Sep\",\"Sun>=2\",[4,0,0,\"u\"],60,\"S\"]],\"NZAQ\":[[1974,\"only\",\"-\",\"Nov\",\"3\",[2,0,0,\"s\"],60,\"D\"],[1975,1988,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"D\"],[1989,\"only\",\"-\",\"Oct\",\"8\",[2,0,0,\"s\"],60,\"D\"],[1990,2006,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"D\"],[1975,\"only\",\"-\",\"Feb\",\"23\",[2,0,0,\"s\"],0,\"S\"],[1976,1989,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"S\"],[1990,2007,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],0,\"S\"],[2007,\"max\",\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],60,\"D\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"S\"]],\"EUAsia\":[[1981,\"max\",\"-\",\"Mar\",\"lastSun\",[1,0,0,\"u\"],60,\"S\"],[1979,1995,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"u\"],0,\"-\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[1,0,0,\"u\"],0,\"-\"]],\"E-EurAsia\":[[1981,\"max\",\"-\",\"Mar\",\"lastSun\",[0,0,0,null],60,\"S\"],[1979,1995,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"-\"]],\"RussiaAsia\":[[1981,1984,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1981,1983,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1984,1991,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1985,1991,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1992,\"only\",\"-\",\"Mar\",\"lastSat\",[23,0,0,null],60,\"S\"],[1992,\"only\",\"-\",\"Sep\",\"lastSat\",[23,0,0,null],0,\"-\"],[1993,\"max\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1993,1995,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"]],\"Azer\":[[1997,\"max\",\"-\",\"Mar\",\"lastSun\",[4,0,0,null],60,\"S\"],[1997,\"max\",\"-\",\"Oct\",\"lastSun\",[5,0,0,null],0,\"-\"]],\"Dhaka\":[[2009,\"only\",\"-\",\"Jun\",\"19\",[23,0,0,null],60,\"S\"],[2009,\"only\",\"-\",\"Dec\",\"31\",[23,59,0,null],0,\"-\"]],\"Shang\":[[1940,\"only\",\"-\",\"Jun\",\"3\",[0,0,0,null],60,\"D\"],[1940,1941,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1941,\"only\",\"-\",\"Mar\",\"16\",[0,0,0,null],60,\"D\"]],\"PRC\":[[1986,\"only\",\"-\",\"May\",\"4\",[0,0,0,null],60,\"D\"],[1986,1991,\"-\",\"Sep\",\"Sun>=11\",[0,0,0,null],0,\"S\"],[1987,1991,\"-\",\"Apr\",\"Sun>=10\",[0,0,0,null],60,\"D\"]],\"HK\":[[1941,\"only\",\"-\",\"Apr\",\"1\",[3,30,0,null],60,\"S\"],[1941,\"only\",\"-\",\"Sep\",\"30\",[3,30,0,null],0,\"-\"],[1946,\"only\",\"-\",\"Apr\",\"20\",[3,30,0,null],60,\"S\"],[1946,\"only\",\"-\",\"Dec\",\"1\",[3,30,0,null],0,\"-\"],[1947,\"only\",\"-\",\"Apr\",\"13\",[3,30,0,null],60,\"S\"],[1947,\"only\",\"-\",\"Dec\",\"30\",[3,30,0,null],0,\"-\"],[1948,\"only\",\"-\",\"May\",\"2\",[3,30,0,null],60,\"S\"],[1948,1951,\"-\",\"Oct\",\"lastSun\",[3,30,0,null],0,\"-\"],[1952,\"only\",\"-\",\"Oct\",\"25\",[3,30,0,null],0,\"-\"],[1949,1953,\"-\",\"Apr\",\"Sun>=1\",[3,30,0,null],60,\"S\"],[1953,\"only\",\"-\",\"Nov\",\"1\",[3,30,0,null],0,\"-\"],[1954,1964,\"-\",\"Mar\",\"Sun>=18\",[3,30,0,null],60,\"S\"],[1954,\"only\",\"-\",\"Oct\",\"31\",[3,30,0,null],0,\"-\"],[1955,1964,\"-\",\"Nov\",\"Sun>=1\",[3,30,0,null],0,\"-\"],[1965,1976,\"-\",\"Apr\",\"Sun>=16\",[3,30,0,null],60,\"S\"],[1965,1976,\"-\",\"Oct\",\"Sun>=16\",[3,30,0,null],0,\"-\"],[1973,\"only\",\"-\",\"Dec\",\"30\",[3,30,0,null],60,\"S\"],[1979,\"only\",\"-\",\"May\",\"Sun>=8\",[3,30,0,null],60,\"S\"],[1979,\"only\",\"-\",\"Oct\",\"Sun>=16\",[3,30,0,null],0,\"-\"]],\"Taiwan\":[[1945,1951,\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1945,1951,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1952,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],60,\"D\"],[1952,1954,\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"S\"],[1953,1959,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1955,1961,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1960,1961,\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"D\"],[1974,1975,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1974,1975,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1979,\"only\",\"-\",\"Jun\",\"30\",[0,0,0,null],60,\"D\"],[1979,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"S\"]],\"Macau\":[[1961,1962,\"-\",\"Mar\",\"Sun>=16\",[3,30,0,null],60,\"S\"],[1961,1964,\"-\",\"Nov\",\"Sun>=1\",[3,30,0,null],0,\"-\"],[1963,\"only\",\"-\",\"Mar\",\"Sun>=16\",[0,0,0,null],60,\"S\"],[1964,\"only\",\"-\",\"Mar\",\"Sun>=16\",[3,30,0,null],60,\"S\"],[1965,\"only\",\"-\",\"Mar\",\"Sun>=16\",[0,0,0,null],60,\"S\"],[1965,\"only\",\"-\",\"Oct\",\"31\",[0,0,0,null],0,\"-\"],[1966,1971,\"-\",\"Apr\",\"Sun>=16\",[3,30,0,null],60,\"S\"],[1966,1971,\"-\",\"Oct\",\"Sun>=16\",[3,30,0,null],0,\"-\"],[1972,1974,\"-\",\"Apr\",\"Sun>=15\",[0,0,0,null],60,\"S\"],[1972,1973,\"-\",\"Oct\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[1974,1977,\"-\",\"Oct\",\"Sun>=15\",[3,30,0,null],0,\"-\"],[1975,1977,\"-\",\"Apr\",\"Sun>=15\",[3,30,0,null],60,\"S\"],[1978,1980,\"-\",\"Apr\",\"Sun>=15\",[0,0,0,null],60,\"S\"],[1978,1980,\"-\",\"Oct\",\"Sun>=15\",[0,0,0,null],0,\"-\"]],\"Cyprus\":[[1975,\"only\",\"-\",\"Apr\",\"13\",[0,0,0,null],60,\"S\"],[1975,\"only\",\"-\",\"Oct\",\"12\",[0,0,0,null],0,\"-\"],[1976,\"only\",\"-\",\"May\",\"15\",[0,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Oct\",\"11\",[0,0,0,null],0,\"-\"],[1977,1980,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"25\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"-\"],[1979,1997,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1981,1998,\"-\",\"Mar\",\"lastSun\",[0,0,0,null],60,\"S\"]],\"Iran\":[[1978,1980,\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[1978,\"only\",\"-\",\"Oct\",\"21\",[0,0,0,null],0,\"S\"],[1979,\"only\",\"-\",\"Sep\",\"19\",[0,0,0,null],0,\"S\"],[1980,\"only\",\"-\",\"Sep\",\"23\",[0,0,0,null],0,\"S\"],[1991,\"only\",\"-\",\"May\",\"3\",[0,0,0,null],60,\"D\"],[1992,1995,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[1991,1995,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[1996,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[1996,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[1997,1999,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[1997,1999,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2000,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2000,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2001,2003,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2001,2003,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2004,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2004,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2005,\"only\",\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2005,\"only\",\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2008,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2008,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2009,2011,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2009,2011,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2012,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2012,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2013,2015,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2013,2015,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2016,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2016,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2017,2019,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2017,2019,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2020,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2020,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2021,2023,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2021,2023,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2024,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2024,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2025,2027,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2025,2027,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2028,2029,\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2028,2029,\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2030,2031,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2030,2031,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2032,2033,\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2032,2033,\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"],[2034,2035,\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"D\"],[2034,2035,\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[2036,2037,\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[2036,2037,\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"S\"]],\"Iraq\":[[1982,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1982,1984,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1983,\"only\",\"-\",\"Mar\",\"31\",[0,0,0,null],60,\"D\"],[1984,1985,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1985,1990,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"S\"],[1986,1990,\"-\",\"Mar\",\"lastSun\",[1,0,0,\"s\"],60,\"D\"],[1991,2007,\"-\",\"Apr\",\"1\",[3,0,0,\"s\"],60,\"D\"],[1991,2007,\"-\",\"Oct\",\"1\",[3,0,0,\"s\"],0,\"S\"]],\"Zion\":[[1940,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"D\"],[1942,1944,\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"S\"],[1943,\"only\",\"-\",\"Apr\",\"1\",[2,0,0,null],60,\"D\"],[1944,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1945,\"only\",\"-\",\"Apr\",\"16\",[0,0,0,null],60,\"D\"],[1945,\"only\",\"-\",\"Nov\",\"1\",[2,0,0,null],0,\"S\"],[1946,\"only\",\"-\",\"Apr\",\"16\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"S\"],[1948,\"only\",\"-\",\"May\",\"23\",[0,0,0,null],120,\"DD\"],[1948,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],60,\"D\"],[1948,1949,\"-\",\"Nov\",\"1\",[2,0,0,null],0,\"S\"],[1949,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1950,\"only\",\"-\",\"Apr\",\"16\",[0,0,0,null],60,\"D\"],[1950,\"only\",\"-\",\"Sep\",\"15\",[3,0,0,null],0,\"S\"],[1951,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1951,\"only\",\"-\",\"Nov\",\"11\",[3,0,0,null],0,\"S\"],[1952,\"only\",\"-\",\"Apr\",\"20\",[2,0,0,null],60,\"D\"],[1952,\"only\",\"-\",\"Oct\",\"19\",[3,0,0,null],0,\"S\"],[1953,\"only\",\"-\",\"Apr\",\"12\",[2,0,0,null],60,\"D\"],[1953,\"only\",\"-\",\"Sep\",\"13\",[3,0,0,null],0,\"S\"],[1954,\"only\",\"-\",\"Jun\",\"13\",[0,0,0,null],60,\"D\"],[1954,\"only\",\"-\",\"Sep\",\"12\",[0,0,0,null],0,\"S\"],[1955,\"only\",\"-\",\"Jun\",\"11\",[2,0,0,null],60,\"D\"],[1955,\"only\",\"-\",\"Sep\",\"11\",[0,0,0,null],0,\"S\"],[1956,\"only\",\"-\",\"Jun\",\"3\",[0,0,0,null],60,\"D\"],[1956,\"only\",\"-\",\"Sep\",\"30\",[3,0,0,null],0,\"S\"],[1957,\"only\",\"-\",\"Apr\",\"29\",[2,0,0,null],60,\"D\"],[1957,\"only\",\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[1974,\"only\",\"-\",\"Jul\",\"7\",[0,0,0,null],60,\"D\"],[1974,\"only\",\"-\",\"Oct\",\"13\",[0,0,0,null],0,\"S\"],[1975,\"only\",\"-\",\"Apr\",\"20\",[0,0,0,null],60,\"D\"],[1975,\"only\",\"-\",\"Aug\",\"31\",[0,0,0,null],0,\"S\"],[1985,\"only\",\"-\",\"Apr\",\"14\",[0,0,0,null],60,\"D\"],[1985,\"only\",\"-\",\"Sep\",\"15\",[0,0,0,null],0,\"S\"],[1986,\"only\",\"-\",\"May\",\"18\",[0,0,0,null],60,\"D\"],[1986,\"only\",\"-\",\"Sep\",\"7\",[0,0,0,null],0,\"S\"],[1987,\"only\",\"-\",\"Apr\",\"15\",[0,0,0,null],60,\"D\"],[1987,\"only\",\"-\",\"Sep\",\"13\",[0,0,0,null],0,\"S\"],[1988,\"only\",\"-\",\"Apr\",\"9\",[0,0,0,null],60,\"D\"],[1988,\"only\",\"-\",\"Sep\",\"3\",[0,0,0,null],0,\"S\"],[1989,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"D\"],[1989,\"only\",\"-\",\"Sep\",\"3\",[0,0,0,null],0,\"S\"],[1990,\"only\",\"-\",\"Mar\",\"25\",[0,0,0,null],60,\"D\"],[1990,\"only\",\"-\",\"Aug\",\"26\",[0,0,0,null],0,\"S\"],[1991,\"only\",\"-\",\"Mar\",\"24\",[0,0,0,null],60,\"D\"],[1991,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"S\"],[1992,\"only\",\"-\",\"Mar\",\"29\",[0,0,0,null],60,\"D\"],[1992,\"only\",\"-\",\"Sep\",\"6\",[0,0,0,null],0,\"S\"],[1993,\"only\",\"-\",\"Apr\",\"2\",[0,0,0,null],60,\"D\"],[1993,\"only\",\"-\",\"Sep\",\"5\",[0,0,0,null],0,\"S\"],[1994,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1994,\"only\",\"-\",\"Aug\",\"28\",[0,0,0,null],0,\"S\"],[1995,\"only\",\"-\",\"Mar\",\"31\",[0,0,0,null],60,\"D\"],[1995,\"only\",\"-\",\"Sep\",\"3\",[0,0,0,null],0,\"S\"],[1996,\"only\",\"-\",\"Mar\",\"15\",[0,0,0,null],60,\"D\"],[1996,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,null],0,\"S\"],[1997,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,null],60,\"D\"],[1997,\"only\",\"-\",\"Sep\",\"14\",[0,0,0,null],0,\"S\"],[1998,\"only\",\"-\",\"Mar\",\"20\",[0,0,0,null],60,\"D\"],[1998,\"only\",\"-\",\"Sep\",\"6\",[0,0,0,null],0,\"S\"],[1999,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,null],60,\"D\"],[1999,\"only\",\"-\",\"Sep\",\"3\",[2,0,0,null],0,\"S\"],[2000,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,null],60,\"D\"],[2000,\"only\",\"-\",\"Oct\",\"6\",[1,0,0,null],0,\"S\"],[2001,\"only\",\"-\",\"Apr\",\"9\",[1,0,0,null],60,\"D\"],[2001,\"only\",\"-\",\"Sep\",\"24\",[1,0,0,null],0,\"S\"],[2002,\"only\",\"-\",\"Mar\",\"29\",[1,0,0,null],60,\"D\"],[2002,\"only\",\"-\",\"Oct\",\"7\",[1,0,0,null],0,\"S\"],[2003,\"only\",\"-\",\"Mar\",\"28\",[1,0,0,null],60,\"D\"],[2003,\"only\",\"-\",\"Oct\",\"3\",[1,0,0,null],0,\"S\"],[2004,\"only\",\"-\",\"Apr\",\"7\",[1,0,0,null],60,\"D\"],[2004,\"only\",\"-\",\"Sep\",\"22\",[1,0,0,null],0,\"S\"],[2005,\"only\",\"-\",\"Apr\",\"1\",[2,0,0,null],60,\"D\"],[2005,\"only\",\"-\",\"Oct\",\"9\",[2,0,0,null],0,\"S\"],[2006,2010,\"-\",\"Mar\",\"Fri>=26\",[2,0,0,null],60,\"D\"],[2006,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"S\"],[2007,\"only\",\"-\",\"Sep\",\"16\",[2,0,0,null],0,\"S\"],[2008,\"only\",\"-\",\"Oct\",\"5\",[2,0,0,null],0,\"S\"],[2009,\"only\",\"-\",\"Sep\",\"27\",[2,0,0,null],0,\"S\"],[2010,\"only\",\"-\",\"Sep\",\"12\",[2,0,0,null],0,\"S\"],[2011,\"only\",\"-\",\"Apr\",\"1\",[2,0,0,null],60,\"D\"],[2011,\"only\",\"-\",\"Oct\",\"2\",[2,0,0,null],0,\"S\"],[2012,\"only\",\"-\",\"Mar\",\"Fri>=26\",[2,0,0,null],60,\"D\"],[2012,\"only\",\"-\",\"Sep\",\"23\",[2,0,0,null],0,\"S\"],[2013,\"max\",\"-\",\"Mar\",\"Fri>=23\",[2,0,0,null],60,\"D\"],[2013,\"max\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Japan\":[[1948,\"only\",\"-\",\"May\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[1948,1951,\"-\",\"Sep\",\"Sat>=8\",[2,0,0,null],0,\"S\"],[1949,\"only\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[1950,1951,\"-\",\"May\",\"Sun>=1\",[2,0,0,null],60,\"D\"]],\"Jordan\":[[1973,\"only\",\"-\",\"Jun\",\"6\",[0,0,0,null],60,\"S\"],[1973,1975,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1974,1977,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"],[1977,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"-\"],[1985,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1985,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1986,1988,\"-\",\"Apr\",\"Fri>=1\",[0,0,0,null],60,\"S\"],[1986,1990,\"-\",\"Oct\",\"Fri>=1\",[0,0,0,null],0,\"-\"],[1989,\"only\",\"-\",\"May\",\"8\",[0,0,0,null],60,\"S\"],[1990,\"only\",\"-\",\"Apr\",\"27\",[0,0,0,null],60,\"S\"],[1991,\"only\",\"-\",\"Apr\",\"17\",[0,0,0,null],60,\"S\"],[1991,\"only\",\"-\",\"Sep\",\"27\",[0,0,0,null],0,\"-\"],[1992,\"only\",\"-\",\"Apr\",\"10\",[0,0,0,null],60,\"S\"],[1992,1993,\"-\",\"Oct\",\"Fri>=1\",[0,0,0,null],0,\"-\"],[1993,1998,\"-\",\"Apr\",\"Fri>=1\",[0,0,0,null],60,\"S\"],[1994,\"only\",\"-\",\"Sep\",\"Fri>=15\",[0,0,0,null],0,\"-\"],[1995,1998,\"-\",\"Sep\",\"Fri>=15\",[0,0,0,\"s\"],0,\"-\"],[1999,\"only\",\"-\",\"Jul\",\"1\",[0,0,0,\"s\"],60,\"S\"],[1999,2002,\"-\",\"Sep\",\"lastFri\",[0,0,0,\"s\"],0,\"-\"],[2000,2001,\"-\",\"Mar\",\"lastThu\",[0,0,0,\"s\"],60,\"S\"],[2002,\"max\",\"-\",\"Mar\",\"lastThu\",[24,0,0,null],60,\"S\"],[2003,\"only\",\"-\",\"Oct\",\"24\",[0,0,0,\"s\"],0,\"-\"],[2004,\"only\",\"-\",\"Oct\",\"15\",[0,0,0,\"s\"],0,\"-\"],[2005,\"only\",\"-\",\"Sep\",\"lastFri\",[0,0,0,\"s\"],0,\"-\"],[2006,2011,\"-\",\"Oct\",\"lastFri\",[0,0,0,\"s\"],0,\"-\"],[2013,\"max\",\"-\",\"Oct\",\"lastFri\",[0,0,0,\"s\"],0,\"-\"]],\"Kyrgyz\":[[1992,1996,\"-\",\"Apr\",\"Sun>=7\",[0,0,0,\"s\"],60,\"S\"],[1992,1996,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1997,2005,\"-\",\"Mar\",\"lastSun\",[2,30,0,null],60,\"S\"],[1997,2004,\"-\",\"Oct\",\"lastSun\",[2,30,0,null],0,\"-\"]],\"ROK\":[[1960,\"only\",\"-\",\"May\",\"15\",[0,0,0,null],60,\"D\"],[1960,\"only\",\"-\",\"Sep\",\"13\",[0,0,0,null],0,\"S\"],[1987,1988,\"-\",\"May\",\"Sun>=8\",[0,0,0,null],60,\"D\"],[1987,1988,\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],0,\"S\"]],\"Lebanon\":[[1920,\"only\",\"-\",\"Mar\",\"28\",[0,0,0,null],60,\"S\"],[1920,\"only\",\"-\",\"Oct\",\"25\",[0,0,0,null],0,\"-\"],[1921,\"only\",\"-\",\"Apr\",\"3\",[0,0,0,null],60,\"S\"],[1921,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1922,\"only\",\"-\",\"Mar\",\"26\",[0,0,0,null],60,\"S\"],[1922,\"only\",\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"-\"],[1923,\"only\",\"-\",\"Apr\",\"22\",[0,0,0,null],60,\"S\"],[1923,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,null],0,\"-\"],[1957,1961,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1957,1961,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1972,\"only\",\"-\",\"Jun\",\"22\",[0,0,0,null],60,\"S\"],[1972,1977,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1973,1977,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"-\"],[1984,1987,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1984,1991,\"-\",\"Oct\",\"16\",[0,0,0,null],0,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[1989,\"only\",\"-\",\"May\",\"10\",[0,0,0,null],60,\"S\"],[1990,1992,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1992,\"only\",\"-\",\"Oct\",\"4\",[0,0,0,null],0,\"-\"],[1993,\"max\",\"-\",\"Mar\",\"lastSun\",[0,0,0,null],60,\"S\"],[1993,1998,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1999,\"max\",\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"-\"]],\"NBorneo\":[[1935,1941,\"-\",\"Sep\",\"14\",[0,0,0,null],20,\"TS\",\"\"],[1935,1941,\"-\",\"Dec\",\"14\",[0,0,0,null],0,\"-\"]],\"Mongol\":[[1983,1984,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1983,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1985,1998,\"-\",\"Mar\",\"lastSun\",[0,0,0,null],60,\"S\"],[1984,1998,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[2001,\"only\",\"-\",\"Apr\",\"lastSat\",[2,0,0,null],60,\"S\"],[2001,2006,\"-\",\"Sep\",\"lastSat\",[2,0,0,null],0,\"-\"],[2002,2006,\"-\",\"Mar\",\"lastSat\",[2,0,0,null],60,\"S\"]],\"Pakistan\":[[2002,\"only\",\"-\",\"Apr\",\"Sun>=2\",[0,1,0,null],60,\"S\"],[2002,\"only\",\"-\",\"Oct\",\"Sun>=2\",[0,1,0,null],0,\"-\"],[2008,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[2008,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"],[2009,\"only\",\"-\",\"Apr\",\"15\",[0,0,0,null],60,\"S\"],[2009,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"]],\"EgyptAsia\":[[1957,\"only\",\"-\",\"May\",\"10\",[0,0,0,null],60,\"S\"],[1957,1958,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1958,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1959,1967,\"-\",\"May\",\"1\",[1,0,0,null],60,\"S\"],[1959,1965,\"-\",\"Sep\",\"30\",[3,0,0,null],0,\"-\"],[1966,\"only\",\"-\",\"Oct\",\"1\",[3,0,0,null],0,\"-\"]],\"Palestine\":[[1999,2005,\"-\",\"Apr\",\"Fri>=15\",[0,0,0,null],60,\"S\"],[1999,2003,\"-\",\"Oct\",\"Fri>=15\",[0,0,0,null],0,\"-\"],[2004,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,null],0,\"-\"],[2005,\"only\",\"-\",\"Oct\",\"4\",[2,0,0,null],0,\"-\"],[2006,2007,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[2006,\"only\",\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"-\"],[2007,\"only\",\"-\",\"Sep\",\"Thu>=8\",[2,0,0,null],0,\"-\"],[2008,2009,\"-\",\"Mar\",\"lastFri\",[0,0,0,null],60,\"S\"],[2008,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"-\"],[2009,\"only\",\"-\",\"Sep\",\"Fri>=1\",[1,0,0,null],0,\"-\"],[2010,\"only\",\"-\",\"Mar\",\"26\",[0,0,0,null],60,\"S\"],[2010,\"only\",\"-\",\"Aug\",\"11\",[0,0,0,null],0,\"-\"],[2011,\"only\",\"-\",\"Apr\",\"1\",[0,1,0,null],60,\"S\"],[2011,\"only\",\"-\",\"Aug\",\"1\",[0,0,0,null],0,\"-\"],[2011,\"only\",\"-\",\"Aug\",\"30\",[0,0,0,null],60,\"S\"],[2011,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"-\"],[2012,\"max\",\"-\",\"Mar\",\"lastThu\",[24,0,0,null],60,\"S\"],[2012,\"max\",\"-\",\"Sep\",\"Fri>=21\",[1,0,0,null],0,\"-\"]],\"Phil\":[[1936,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],60,\"S\"],[1937,\"only\",\"-\",\"Feb\",\"1\",[0,0,0,null],0,\"-\"],[1954,\"only\",\"-\",\"Apr\",\"12\",[0,0,0,null],60,\"S\"],[1954,\"only\",\"-\",\"Jul\",\"1\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Mar\",\"22\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"-\"]],\"Syria\":[[1920,1923,\"-\",\"Apr\",\"Sun>=15\",[2,0,0,null],60,\"S\"],[1920,1923,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,null],0,\"-\"],[1962,\"only\",\"-\",\"Apr\",\"29\",[2,0,0,null],60,\"S\"],[1962,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"-\"],[1963,1965,\"-\",\"May\",\"1\",[2,0,0,null],60,\"S\"],[1963,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"-\"],[1964,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"-\"],[1965,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"-\"],[1966,\"only\",\"-\",\"Apr\",\"24\",[2,0,0,null],60,\"S\"],[1966,1976,\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"-\"],[1967,1978,\"-\",\"May\",\"1\",[2,0,0,null],60,\"S\"],[1977,1978,\"-\",\"Sep\",\"1\",[2,0,0,null],0,\"-\"],[1983,1984,\"-\",\"Apr\",\"9\",[2,0,0,null],60,\"S\"],[1983,1984,\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"-\"],[1986,\"only\",\"-\",\"Feb\",\"16\",[2,0,0,null],60,\"S\"],[1986,\"only\",\"-\",\"Oct\",\"9\",[2,0,0,null],0,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"1\",[2,0,0,null],60,\"S\"],[1987,1988,\"-\",\"Oct\",\"31\",[2,0,0,null],0,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"15\",[2,0,0,null],60,\"S\"],[1989,\"only\",\"-\",\"Mar\",\"31\",[2,0,0,null],60,\"S\"],[1989,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"-\"],[1990,\"only\",\"-\",\"Apr\",\"1\",[2,0,0,null],60,\"S\"],[1990,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"-\"],[1991,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1991,1992,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1992,\"only\",\"-\",\"Apr\",\"8\",[0,0,0,null],60,\"S\"],[1993,\"only\",\"-\",\"Mar\",\"26\",[0,0,0,null],60,\"S\"],[1993,\"only\",\"-\",\"Sep\",\"25\",[0,0,0,null],0,\"-\"],[1994,1996,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1994,2005,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1997,1998,\"-\",\"Mar\",\"lastMon\",[0,0,0,null],60,\"S\"],[1999,2006,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[2006,\"only\",\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"-\"],[2007,\"only\",\"-\",\"Mar\",\"lastFri\",[0,0,0,null],60,\"S\"],[2007,\"only\",\"-\",\"Nov\",\"Fri>=1\",[0,0,0,null],0,\"-\"],[2008,\"only\",\"-\",\"Apr\",\"Fri>=1\",[0,0,0,null],60,\"S\"],[2008,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"],[2009,\"only\",\"-\",\"Mar\",\"lastFri\",[0,0,0,null],60,\"S\"],[2010,2011,\"-\",\"Apr\",\"Fri>=1\",[0,0,0,null],60,\"S\"],[2012,\"max\",\"-\",\"Mar\",\"lastFri\",[0,0,0,null],60,\"S\"],[2009,\"max\",\"-\",\"Oct\",\"lastFri\",[0,0,0,null],0,\"-\"]],\"Aus\":[[1917,\"only\",\"-\",\"Jan\",\"1\",[0,1,0,null],60,\"-\"],[1917,\"only\",\"-\",\"Mar\",\"25\",[2,0,0,null],0,\"-\"],[1942,\"only\",\"-\",\"Jan\",\"1\",[2,0,0,null],60,\"-\"],[1942,\"only\",\"-\",\"Mar\",\"29\",[2,0,0,null],0,\"-\"],[1942,\"only\",\"-\",\"Sep\",\"27\",[2,0,0,null],60,\"-\"],[1943,1944,\"-\",\"Mar\",\"lastSun\",[2,0,0,null],0,\"-\"],[1943,\"only\",\"-\",\"Oct\",\"3\",[2,0,0,null],60,\"-\"]],\"AW\":[[1974,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1975,\"only\",\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1983,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1984,\"only\",\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1991,\"only\",\"-\",\"Nov\",\"17\",[2,0,0,\"s\"],60,\"-\"],[1992,\"only\",\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2006,\"only\",\"-\",\"Dec\",\"3\",[2,0,0,\"s\"],60,\"-\"],[2007,2009,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2007,2008,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"]],\"AQ\":[[1971,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1972,\"only\",\"-\",\"Feb\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1989,1991,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1990,1992,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"]],\"Holiday\":[[1992,1993,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1993,1994,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"]],\"AS\":[[1971,1985,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1986,\"only\",\"-\",\"Oct\",\"19\",[2,0,0,\"s\"],60,\"-\"],[1987,2007,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1972,\"only\",\"-\",\"Feb\",\"27\",[2,0,0,\"s\"],0,\"-\"],[1973,1985,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1986,1990,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],0,\"-\"],[1991,\"only\",\"-\",\"Mar\",\"3\",[2,0,0,\"s\"],0,\"-\"],[1992,\"only\",\"-\",\"Mar\",\"22\",[2,0,0,\"s\"],0,\"-\"],[1993,\"only\",\"-\",\"Mar\",\"7\",[2,0,0,\"s\"],0,\"-\"],[1994,\"only\",\"-\",\"Mar\",\"20\",[2,0,0,\"s\"],0,\"-\"],[1995,2005,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2006,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,\"s\"],0,\"-\"],[2007,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"-\"]],\"AT\":[[1967,\"only\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"-\"],[1968,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1968,1985,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1969,1971,\"-\",\"Mar\",\"Sun>=8\",[2,0,0,\"s\"],0,\"-\"],[1972,\"only\",\"-\",\"Feb\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1973,1981,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1982,1983,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1984,1986,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1986,\"only\",\"-\",\"Oct\",\"Sun>=15\",[2,0,0,\"s\"],60,\"-\"],[1987,1990,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],0,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"Sun>=22\",[2,0,0,\"s\"],60,\"-\"],[1988,1990,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1991,1999,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"-\"],[1991,2005,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2000,\"only\",\"-\",\"Aug\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[2001,\"max\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"-\"],[2006,\"only\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2007,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"]],\"AV\":[[1971,1985,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1972,\"only\",\"-\",\"Feb\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1973,1985,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1986,1990,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],0,\"-\"],[1986,1987,\"-\",\"Oct\",\"Sun>=15\",[2,0,0,\"s\"],60,\"-\"],[1988,1999,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1991,1994,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1995,2005,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2000,\"only\",\"-\",\"Aug\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[2001,2007,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[2006,\"only\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2007,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"-\"]],\"AN\":[[1971,1985,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1972,\"only\",\"-\",\"Feb\",\"27\",[2,0,0,\"s\"],0,\"-\"],[1973,1981,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1982,\"only\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1983,1985,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1986,1989,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],0,\"-\"],[1986,\"only\",\"-\",\"Oct\",\"19\",[2,0,0,\"s\"],60,\"-\"],[1987,1999,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[1990,1995,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1996,2005,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2000,\"only\",\"-\",\"Aug\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[2001,2007,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"-\"],[2006,\"only\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2007,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[2008,\"max\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"-\"]],\"LH\":[[1981,1984,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],60,\"-\"],[1982,1985,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,null],0,\"-\"],[1985,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],30,\"-\"],[1986,1989,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,null],0,\"-\"],[1986,\"only\",\"-\",\"Oct\",\"19\",[2,0,0,null],30,\"-\"],[1987,1999,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],30,\"-\"],[1990,1995,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,null],0,\"-\"],[1996,2005,\"-\",\"Mar\",\"lastSun\",[2,0,0,null],0,\"-\"],[2000,\"only\",\"-\",\"Aug\",\"lastSun\",[2,0,0,null],30,\"-\"],[2001,2007,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],30,\"-\"],[2006,\"only\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],0,\"-\"],[2007,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,null],0,\"-\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],0,\"-\"],[2008,\"max\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,null],30,\"-\"]],\"Cook\":[[1978,\"only\",\"-\",\"Nov\",\"12\",[0,0,0,null],30,\"HS\"],[1979,1991,\"-\",\"Mar\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[1979,1990,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],30,\"HS\"]],\"Fiji\":[[1998,1999,\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],60,\"S\"],[1999,2000,\"-\",\"Feb\",\"lastSun\",[3,0,0,null],0,\"-\"],[2009,\"only\",\"-\",\"Nov\",\"29\",[2,0,0,null],60,\"S\"],[2010,\"only\",\"-\",\"Mar\",\"lastSun\",[3,0,0,null],0,\"-\"],[2010,\"max\",\"-\",\"Oct\",\"Sun>=18\",[2,0,0,null],60,\"S\"],[2011,\"only\",\"-\",\"Mar\",\"Sun>=1\",[3,0,0,null],0,\"-\"],[2012,\"max\",\"-\",\"Jan\",\"Sun>=18\",[3,0,0,null],0,\"-\"]],\"NC\":[[1977,1978,\"-\",\"Dec\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1978,1979,\"-\",\"Feb\",\"27\",[0,0,0,null],0,\"-\"],[1996,\"only\",\"-\",\"Dec\",\"1\",[2,0,0,\"s\"],60,\"S\"],[1997,\"only\",\"-\",\"Mar\",\"2\",[2,0,0,\"s\"],0,\"-\"]],\"NZ\":[[1927,\"only\",\"-\",\"Nov\",\"6\",[2,0,0,null],60,\"S\"],[1928,\"only\",\"-\",\"Mar\",\"4\",[2,0,0,null],0,\"M\"],[1928,1933,\"-\",\"Oct\",\"Sun>=8\",[2,0,0,null],30,\"S\"],[1929,1933,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,null],0,\"M\"],[1934,1940,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],0,\"M\"],[1934,1940,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],30,\"S\"],[1946,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],0,\"S\"],[1974,\"only\",\"-\",\"Nov\",\"Sun>=1\",[2,0,0,\"s\"],60,\"D\"],[1975,\"only\",\"-\",\"Feb\",\"lastSun\",[2,0,0,\"s\"],0,\"S\"],[1975,1988,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],60,\"D\"],[1976,1989,\"-\",\"Mar\",\"Sun>=1\",[2,0,0,\"s\"],0,\"S\"],[1989,\"only\",\"-\",\"Oct\",\"Sun>=8\",[2,0,0,\"s\"],60,\"D\"],[1990,2006,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],60,\"D\"],[1990,2007,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],0,\"S\"],[2007,\"max\",\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],60,\"D\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],0,\"S\"]],\"Chatham\":[[1974,\"only\",\"-\",\"Nov\",\"Sun>=1\",[2,45,0,\"s\"],60,\"D\"],[1975,\"only\",\"-\",\"Feb\",\"lastSun\",[2,45,0,\"s\"],0,\"S\"],[1975,1988,\"-\",\"Oct\",\"lastSun\",[2,45,0,\"s\"],60,\"D\"],[1976,1989,\"-\",\"Mar\",\"Sun>=1\",[2,45,0,\"s\"],0,\"S\"],[1989,\"only\",\"-\",\"Oct\",\"Sun>=8\",[2,45,0,\"s\"],60,\"D\"],[1990,2006,\"-\",\"Oct\",\"Sun>=1\",[2,45,0,\"s\"],60,\"D\"],[1990,2007,\"-\",\"Mar\",\"Sun>=15\",[2,45,0,\"s\"],0,\"S\"],[2007,\"max\",\"-\",\"Sep\",\"lastSun\",[2,45,0,\"s\"],60,\"D\"],[2008,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,45,0,\"s\"],0,\"S\"]],\"WS\":[[2012,\"max\",\"-\",\"Sep\",\"lastSun\",[3,0,0,null],60,\"D\"],[2012,\"max\",\"-\",\"Apr\",\"Sun>=1\",[4,0,0,null],0,\"-\"]],\"Tonga\":[[1999,\"only\",\"-\",\"Oct\",\"7\",[2,0,0,\"s\"],60,\"S\"],[2000,\"only\",\"-\",\"Mar\",\"19\",[2,0,0,\"s\"],0,\"-\"],[2000,2001,\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],60,\"S\"],[2001,2002,\"-\",\"Jan\",\"lastSun\",[2,0,0,null],0,\"-\"]],\"Vanuatu\":[[1983,\"only\",\"-\",\"Sep\",\"25\",[0,0,0,null],60,\"S\"],[1984,1991,\"-\",\"Mar\",\"Sun>=23\",[0,0,0,null],0,\"-\"],[1984,\"only\",\"-\",\"Oct\",\"23\",[0,0,0,null],60,\"S\"],[1985,1991,\"-\",\"Sep\",\"Sun>=23\",[0,0,0,null],60,\"S\"],[1992,1993,\"-\",\"Jan\",\"Sun>=23\",[0,0,0,null],0,\"-\"],[1992,\"only\",\"-\",\"Oct\",\"Sun>=23\",[0,0,0,null],60,\"S\"]],\"GB-Eire\":[[1916,\"only\",\"-\",\"May\",\"21\",[2,0,0,\"s\"],60,\"BST\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,\"s\"],0,\"GMT\"],[1917,\"only\",\"-\",\"Apr\",\"8\",[2,0,0,\"s\"],60,\"BST\"],[1917,\"only\",\"-\",\"Sep\",\"17\",[2,0,0,\"s\"],0,\"GMT\"],[1918,\"only\",\"-\",\"Mar\",\"24\",[2,0,0,\"s\"],60,\"BST\"],[1918,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,\"s\"],0,\"GMT\"],[1919,\"only\",\"-\",\"Mar\",\"30\",[2,0,0,\"s\"],60,\"BST\"],[1919,\"only\",\"-\",\"Sep\",\"29\",[2,0,0,\"s\"],0,\"GMT\"],[1920,\"only\",\"-\",\"Mar\",\"28\",[2,0,0,\"s\"],60,\"BST\"],[1920,\"only\",\"-\",\"Oct\",\"25\",[2,0,0,\"s\"],0,\"GMT\"],[1921,\"only\",\"-\",\"Apr\",\"3\",[2,0,0,\"s\"],60,\"BST\"],[1921,\"only\",\"-\",\"Oct\",\"3\",[2,0,0,\"s\"],0,\"GMT\"],[1922,\"only\",\"-\",\"Mar\",\"26\",[2,0,0,\"s\"],60,\"BST\"],[1922,\"only\",\"-\",\"Oct\",\"8\",[2,0,0,\"s\"],0,\"GMT\"],[1923,\"only\",\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1923,1924,\"-\",\"Sep\",\"Sun>=16\",[2,0,0,\"s\"],0,\"GMT\"],[1924,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1925,1926,\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1925,1938,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,\"s\"],0,\"GMT\"],[1927,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1928,1929,\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1930,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1931,1932,\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1933,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1934,\"only\",\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1935,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1936,1937,\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1938,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1939,\"only\",\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1939,\"only\",\"-\",\"Nov\",\"Sun>=16\",[2,0,0,\"s\"],0,\"GMT\"],[1940,\"only\",\"-\",\"Feb\",\"Sun>=23\",[2,0,0,\"s\"],60,\"BST\"],[1941,\"only\",\"-\",\"May\",\"Sun>=2\",[1,0,0,\"s\"],120,\"BDST\"],[1941,1943,\"-\",\"Aug\",\"Sun>=9\",[1,0,0,\"s\"],60,\"BST\"],[1942,1944,\"-\",\"Apr\",\"Sun>=2\",[1,0,0,\"s\"],120,\"BDST\"],[1944,\"only\",\"-\",\"Sep\",\"Sun>=16\",[1,0,0,\"s\"],60,\"BST\"],[1945,\"only\",\"-\",\"Apr\",\"Mon>=2\",[1,0,0,\"s\"],120,\"BDST\"],[1945,\"only\",\"-\",\"Jul\",\"Sun>=9\",[1,0,0,\"s\"],60,\"BST\"],[1945,1946,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,\"s\"],0,\"GMT\"],[1946,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1947,\"only\",\"-\",\"Mar\",\"16\",[2,0,0,\"s\"],60,\"BST\"],[1947,\"only\",\"-\",\"Apr\",\"13\",[1,0,0,\"s\"],120,\"BDST\"],[1947,\"only\",\"-\",\"Aug\",\"10\",[1,0,0,\"s\"],60,\"BST\"],[1947,\"only\",\"-\",\"Nov\",\"2\",[2,0,0,\"s\"],0,\"GMT\"],[1948,\"only\",\"-\",\"Mar\",\"14\",[2,0,0,\"s\"],60,\"BST\"],[1948,\"only\",\"-\",\"Oct\",\"31\",[2,0,0,\"s\"],0,\"GMT\"],[1949,\"only\",\"-\",\"Apr\",\"3\",[2,0,0,\"s\"],60,\"BST\"],[1949,\"only\",\"-\",\"Oct\",\"30\",[2,0,0,\"s\"],0,\"GMT\"],[1950,1952,\"-\",\"Apr\",\"Sun>=14\",[2,0,0,\"s\"],60,\"BST\"],[1950,1952,\"-\",\"Oct\",\"Sun>=21\",[2,0,0,\"s\"],0,\"GMT\"],[1953,\"only\",\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1953,1960,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,\"s\"],0,\"GMT\"],[1954,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1955,1956,\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1957,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1958,1959,\"-\",\"Apr\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1960,\"only\",\"-\",\"Apr\",\"Sun>=9\",[2,0,0,\"s\"],60,\"BST\"],[1961,1963,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"BST\"],[1961,1968,\"-\",\"Oct\",\"Sun>=23\",[2,0,0,\"s\"],0,\"GMT\"],[1964,1967,\"-\",\"Mar\",\"Sun>=19\",[2,0,0,\"s\"],60,\"BST\"],[1968,\"only\",\"-\",\"Feb\",\"18\",[2,0,0,\"s\"],60,\"BST\"],[1972,1980,\"-\",\"Mar\",\"Sun>=16\",[2,0,0,\"s\"],60,\"BST\"],[1972,1980,\"-\",\"Oct\",\"Sun>=23\",[2,0,0,\"s\"],0,\"GMT\"],[1981,1995,\"-\",\"Mar\",\"lastSun\",[1,0,0,\"u\"],60,\"BST\"],[1981,1989,\"-\",\"Oct\",\"Sun>=23\",[1,0,0,\"u\"],0,\"GMT\"],[1990,1995,\"-\",\"Oct\",\"Sun>=22\",[1,0,0,\"u\"],0,\"GMT\"]],\"EU\":[[1977,1980,\"-\",\"Apr\",\"Sun>=1\",[1,0,0,\"u\"],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"lastSun\",[1,0,0,\"u\"],0,\"-\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,\"u\"],0,\"-\"],[1979,1995,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"u\"],0,\"-\"],[1981,\"max\",\"-\",\"Mar\",\"lastSun\",[1,0,0,\"u\"],60,\"S\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[1,0,0,\"u\"],0,\"-\"]],\"W-Eur\":[[1977,1980,\"-\",\"Apr\",\"Sun>=1\",[1,0,0,\"s\"],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,\"s\"],0,\"-\"],[1979,1995,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"],[1981,\"max\",\"-\",\"Mar\",\"lastSun\",[1,0,0,\"s\"],60,\"S\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"]],\"C-Eur\":[[1916,\"only\",\"-\",\"Apr\",\"30\",[23,0,0,null],60,\"S\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,null],0,\"-\"],[1917,1918,\"-\",\"Apr\",\"Mon>=15\",[2,0,0,\"s\"],60,\"S\"],[1917,1918,\"-\",\"Sep\",\"Mon>=15\",[2,0,0,\"s\"],0,\"-\"],[1940,\"only\",\"-\",\"Apr\",\"1\",[2,0,0,\"s\"],60,\"S\"],[1942,\"only\",\"-\",\"Nov\",\"2\",[2,0,0,\"s\"],0,\"-\"],[1943,\"only\",\"-\",\"Mar\",\"29\",[2,0,0,\"s\"],60,\"S\"],[1943,\"only\",\"-\",\"Oct\",\"4\",[2,0,0,\"s\"],0,\"-\"],[1944,1945,\"-\",\"Apr\",\"Mon>=1\",[2,0,0,\"s\"],60,\"S\"],[1944,\"only\",\"-\",\"Oct\",\"2\",[2,0,0,\"s\"],0,\"-\"],[1945,\"only\",\"-\",\"Sep\",\"16\",[2,0,0,\"s\"],0,\"-\"],[1977,1980,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,\"s\"],0,\"-\"],[1979,1995,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1981,\"max\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"]],\"E-Eur\":[[1977,1980,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1979,1995,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1981,\"max\",\"-\",\"Mar\",\"lastSun\",[0,0,0,null],60,\"S\"],[1996,\"max\",\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"-\"]],\"Russia\":[[1917,\"only\",\"-\",\"Jul\",\"1\",[23,0,0,null],60,\"MST\",\"\"],[1917,\"only\",\"-\",\"Dec\",\"28\",[0,0,0,null],0,\"MMT\",\"\"],[1918,\"only\",\"-\",\"May\",\"31\",[22,0,0,null],120,\"MDST\",\"\"],[1918,\"only\",\"-\",\"Sep\",\"16\",[1,0,0,null],60,\"MST\"],[1919,\"only\",\"-\",\"May\",\"31\",[23,0,0,null],120,\"MDST\"],[1919,\"only\",\"-\",\"Jul\",\"1\",[2,0,0,null],60,\"S\"],[1919,\"only\",\"-\",\"Aug\",\"16\",[0,0,0,null],0,\"-\"],[1921,\"only\",\"-\",\"Feb\",\"14\",[23,0,0,null],60,\"S\"],[1921,\"only\",\"-\",\"Mar\",\"20\",[23,0,0,null],120,\"M\",\"\"],[1921,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],60,\"S\"],[1921,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1981,1984,\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1981,1983,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1984,1991,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1985,1991,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1992,\"only\",\"-\",\"Mar\",\"lastSat\",[23,0,0,null],60,\"S\"],[1992,\"only\",\"-\",\"Sep\",\"lastSat\",[23,0,0,null],0,\"-\"],[1993,2010,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1993,1995,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1996,2010,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"]],\"Albania\":[[1940,\"only\",\"-\",\"Jun\",\"16\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Nov\",\"2\",[3,0,0,null],0,\"-\"],[1943,\"only\",\"-\",\"Mar\",\"29\",[2,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Apr\",\"10\",[3,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"May\",\"4\",[0,0,0,null],60,\"S\"],[1974,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"-\"],[1975,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1975,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"-\"],[1976,\"only\",\"-\",\"May\",\"2\",[0,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1977,\"only\",\"-\",\"May\",\"8\",[0,0,0,null],60,\"S\"],[1977,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"May\",\"6\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1979,\"only\",\"-\",\"May\",\"5\",[0,0,0,null],60,\"S\"],[1979,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"-\"],[1980,\"only\",\"-\",\"May\",\"3\",[0,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"Oct\",\"4\",[0,0,0,null],0,\"-\"],[1981,\"only\",\"-\",\"Apr\",\"26\",[0,0,0,null],60,\"S\"],[1981,\"only\",\"-\",\"Sep\",\"27\",[0,0,0,null],0,\"-\"],[1982,\"only\",\"-\",\"May\",\"2\",[0,0,0,null],60,\"S\"],[1982,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1983,\"only\",\"-\",\"Apr\",\"18\",[0,0,0,null],60,\"S\"],[1983,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1984,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"]],\"Austria\":[[1920,\"only\",\"-\",\"Apr\",\"5\",[2,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Sep\",\"13\",[2,0,0,\"s\"],0,\"-\"],[1946,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,\"s\"],60,\"S\"],[1946,1948,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1947,\"only\",\"-\",\"Apr\",\"6\",[2,0,0,\"s\"],60,\"S\"],[1948,\"only\",\"-\",\"Apr\",\"18\",[2,0,0,\"s\"],60,\"S\"],[1980,\"only\",\"-\",\"Apr\",\"6\",[0,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"Sep\",\"28\",[0,0,0,null],0,\"-\"]],\"Belgium\":[[1918,\"only\",\"-\",\"Mar\",\"9\",[0,0,0,\"s\"],60,\"S\"],[1918,1919,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1919,\"only\",\"-\",\"Mar\",\"1\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Feb\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Oct\",\"23\",[23,0,0,\"s\"],0,\"-\"],[1921,\"only\",\"-\",\"Mar\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1921,\"only\",\"-\",\"Oct\",\"25\",[23,0,0,\"s\"],0,\"-\"],[1922,\"only\",\"-\",\"Mar\",\"25\",[23,0,0,\"s\"],60,\"S\"],[1922,1927,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1923,\"only\",\"-\",\"Apr\",\"21\",[23,0,0,\"s\"],60,\"S\"],[1924,\"only\",\"-\",\"Mar\",\"29\",[23,0,0,\"s\"],60,\"S\"],[1925,\"only\",\"-\",\"Apr\",\"4\",[23,0,0,\"s\"],60,\"S\"],[1926,\"only\",\"-\",\"Apr\",\"17\",[23,0,0,\"s\"],60,\"S\"],[1927,\"only\",\"-\",\"Apr\",\"9\",[23,0,0,\"s\"],60,\"S\"],[1928,\"only\",\"-\",\"Apr\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1928,1938,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,\"s\"],0,\"-\"],[1929,\"only\",\"-\",\"Apr\",\"21\",[2,0,0,\"s\"],60,\"S\"],[1930,\"only\",\"-\",\"Apr\",\"13\",[2,0,0,\"s\"],60,\"S\"],[1931,\"only\",\"-\",\"Apr\",\"19\",[2,0,0,\"s\"],60,\"S\"],[1932,\"only\",\"-\",\"Apr\",\"3\",[2,0,0,\"s\"],60,\"S\"],[1933,\"only\",\"-\",\"Mar\",\"26\",[2,0,0,\"s\"],60,\"S\"],[1934,\"only\",\"-\",\"Apr\",\"8\",[2,0,0,\"s\"],60,\"S\"],[1935,\"only\",\"-\",\"Mar\",\"31\",[2,0,0,\"s\"],60,\"S\"],[1936,\"only\",\"-\",\"Apr\",\"19\",[2,0,0,\"s\"],60,\"S\"],[1937,\"only\",\"-\",\"Apr\",\"4\",[2,0,0,\"s\"],60,\"S\"],[1938,\"only\",\"-\",\"Mar\",\"27\",[2,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Apr\",\"16\",[2,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"19\",[2,0,0,\"s\"],0,\"-\"],[1940,\"only\",\"-\",\"Feb\",\"25\",[2,0,0,\"s\"],60,\"S\"],[1944,\"only\",\"-\",\"Sep\",\"17\",[2,0,0,\"s\"],0,\"-\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Sep\",\"16\",[2,0,0,\"s\"],0,\"-\"],[1946,\"only\",\"-\",\"May\",\"19\",[2,0,0,\"s\"],60,\"S\"],[1946,\"only\",\"-\",\"Oct\",\"7\",[2,0,0,\"s\"],0,\"-\"]],\"Bulg\":[[1979,\"only\",\"-\",\"Mar\",\"31\",[23,0,0,null],60,\"S\"],[1979,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,null],0,\"-\"],[1980,1982,\"-\",\"Apr\",\"Sat>=1\",[23,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"Sep\",\"29\",[1,0,0,null],0,\"-\"],[1981,\"only\",\"-\",\"Sep\",\"27\",[2,0,0,null],0,\"-\"]],\"Czech\":[[1945,\"only\",\"-\",\"Apr\",\"8\",[2,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Nov\",\"18\",[2,0,0,\"s\"],0,\"-\"],[1946,\"only\",\"-\",\"May\",\"6\",[2,0,0,\"s\"],60,\"S\"],[1946,1949,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1947,\"only\",\"-\",\"Apr\",\"20\",[2,0,0,\"s\"],60,\"S\"],[1948,\"only\",\"-\",\"Apr\",\"18\",[2,0,0,\"s\"],60,\"S\"],[1949,\"only\",\"-\",\"Apr\",\"9\",[2,0,0,\"s\"],60,\"S\"]],\"Denmark\":[[1916,\"only\",\"-\",\"May\",\"14\",[23,0,0,null],60,\"S\"],[1916,\"only\",\"-\",\"Sep\",\"30\",[23,0,0,null],0,\"-\"],[1940,\"only\",\"-\",\"May\",\"15\",[0,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Aug\",\"15\",[2,0,0,\"s\"],0,\"-\"],[1946,\"only\",\"-\",\"May\",\"1\",[2,0,0,\"s\"],60,\"S\"],[1946,\"only\",\"-\",\"Sep\",\"1\",[2,0,0,\"s\"],0,\"-\"],[1947,\"only\",\"-\",\"May\",\"4\",[2,0,0,\"s\"],60,\"S\"],[1947,\"only\",\"-\",\"Aug\",\"10\",[2,0,0,\"s\"],0,\"-\"],[1948,\"only\",\"-\",\"May\",\"9\",[2,0,0,\"s\"],60,\"S\"],[1948,\"only\",\"-\",\"Aug\",\"8\",[2,0,0,\"s\"],0,\"-\"]],\"Thule\":[[1991,1992,\"-\",\"Mar\",\"lastSun\",[2,0,0,null],60,\"D\"],[1991,1992,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1993,2006,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[1993,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[2007,\"max\",\"-\",\"Mar\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],0,\"S\"]],\"Finland\":[[1942,\"only\",\"-\",\"Apr\",\"3\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1981,1982,\"-\",\"Mar\",\"lastSun\",[2,0,0,null],60,\"S\"],[1981,1982,\"-\",\"Sep\",\"lastSun\",[3,0,0,null],0,\"-\"]],\"France\":[[1916,\"only\",\"-\",\"Jun\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1916,1919,\"-\",\"Oct\",\"Sun>=1\",[23,0,0,\"s\"],0,\"-\"],[1917,\"only\",\"-\",\"Mar\",\"24\",[23,0,0,\"s\"],60,\"S\"],[1918,\"only\",\"-\",\"Mar\",\"9\",[23,0,0,\"s\"],60,\"S\"],[1919,\"only\",\"-\",\"Mar\",\"1\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Feb\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Oct\",\"23\",[23,0,0,\"s\"],0,\"-\"],[1921,\"only\",\"-\",\"Mar\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1921,\"only\",\"-\",\"Oct\",\"25\",[23,0,0,\"s\"],0,\"-\"],[1922,\"only\",\"-\",\"Mar\",\"25\",[23,0,0,\"s\"],60,\"S\"],[1922,1938,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1923,\"only\",\"-\",\"May\",\"26\",[23,0,0,\"s\"],60,\"S\"],[1924,\"only\",\"-\",\"Mar\",\"29\",[23,0,0,\"s\"],60,\"S\"],[1925,\"only\",\"-\",\"Apr\",\"4\",[23,0,0,\"s\"],60,\"S\"],[1926,\"only\",\"-\",\"Apr\",\"17\",[23,0,0,\"s\"],60,\"S\"],[1927,\"only\",\"-\",\"Apr\",\"9\",[23,0,0,\"s\"],60,\"S\"],[1928,\"only\",\"-\",\"Apr\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1929,\"only\",\"-\",\"Apr\",\"20\",[23,0,0,\"s\"],60,\"S\"],[1930,\"only\",\"-\",\"Apr\",\"12\",[23,0,0,\"s\"],60,\"S\"],[1931,\"only\",\"-\",\"Apr\",\"18\",[23,0,0,\"s\"],60,\"S\"],[1932,\"only\",\"-\",\"Apr\",\"2\",[23,0,0,\"s\"],60,\"S\"],[1933,\"only\",\"-\",\"Mar\",\"25\",[23,0,0,\"s\"],60,\"S\"],[1934,\"only\",\"-\",\"Apr\",\"7\",[23,0,0,\"s\"],60,\"S\"],[1935,\"only\",\"-\",\"Mar\",\"30\",[23,0,0,\"s\"],60,\"S\"],[1936,\"only\",\"-\",\"Apr\",\"18\",[23,0,0,\"s\"],60,\"S\"],[1937,\"only\",\"-\",\"Apr\",\"3\",[23,0,0,\"s\"],60,\"S\"],[1938,\"only\",\"-\",\"Mar\",\"26\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Apr\",\"15\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"18\",[23,0,0,\"s\"],0,\"-\"],[1940,\"only\",\"-\",\"Feb\",\"25\",[2,0,0,null],60,\"S\"],[1941,\"only\",\"-\",\"May\",\"5\",[0,0,0,null],120,\"M\",\"\"],[1941,\"only\",\"-\",\"Oct\",\"6\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Mar\",\"9\",[0,0,0,null],120,\"M\"],[1942,\"only\",\"-\",\"Nov\",\"2\",[3,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Mar\",\"29\",[2,0,0,null],120,\"M\"],[1943,\"only\",\"-\",\"Oct\",\"4\",[3,0,0,null],60,\"S\"],[1944,\"only\",\"-\",\"Apr\",\"3\",[2,0,0,null],120,\"M\"],[1944,\"only\",\"-\",\"Oct\",\"8\",[1,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,null],120,\"M\"],[1945,\"only\",\"-\",\"Sep\",\"16\",[3,0,0,null],0,\"-\"],[1976,\"only\",\"-\",\"Mar\",\"28\",[1,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Sep\",\"26\",[1,0,0,null],0,\"-\"]],\"Germany\":[[1946,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,\"s\"],60,\"S\"],[1946,\"only\",\"-\",\"Oct\",\"7\",[2,0,0,\"s\"],0,\"-\"],[1947,1949,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1947,\"only\",\"-\",\"Apr\",\"6\",[3,0,0,\"s\"],60,\"S\"],[1947,\"only\",\"-\",\"May\",\"11\",[2,0,0,\"s\"],120,\"M\"],[1947,\"only\",\"-\",\"Jun\",\"29\",[3,0,0,null],60,\"S\"],[1948,\"only\",\"-\",\"Apr\",\"18\",[2,0,0,\"s\"],60,\"S\"],[1949,\"only\",\"-\",\"Apr\",\"10\",[2,0,0,\"s\"],60,\"S\"]],\"SovietZone\":[[1945,\"only\",\"-\",\"May\",\"24\",[2,0,0,null],120,\"M\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"24\",[3,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Nov\",\"18\",[2,0,0,\"s\"],0,\"-\"]],\"Greece\":[[1932,\"only\",\"-\",\"Jul\",\"7\",[0,0,0,null],60,\"S\"],[1932,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"-\"],[1941,\"only\",\"-\",\"Apr\",\"7\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Nov\",\"2\",[3,0,0,null],0,\"-\"],[1943,\"only\",\"-\",\"Mar\",\"30\",[0,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Oct\",\"4\",[0,0,0,null],0,\"-\"],[1952,\"only\",\"-\",\"Jul\",\"1\",[0,0,0,null],60,\"S\"],[1952,\"only\",\"-\",\"Nov\",\"2\",[0,0,0,null],0,\"-\"],[1975,\"only\",\"-\",\"Apr\",\"12\",[0,0,0,\"s\"],60,\"S\"],[1975,\"only\",\"-\",\"Nov\",\"26\",[0,0,0,\"s\"],0,\"-\"],[1976,\"only\",\"-\",\"Apr\",\"11\",[2,0,0,\"s\"],60,\"S\"],[1976,\"only\",\"-\",\"Oct\",\"10\",[2,0,0,\"s\"],0,\"-\"],[1977,1978,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"26\",[2,0,0,\"s\"],0,\"-\"],[1978,\"only\",\"-\",\"Sep\",\"24\",[4,0,0,null],0,\"-\"],[1979,\"only\",\"-\",\"Apr\",\"1\",[9,0,0,null],60,\"S\"],[1979,\"only\",\"-\",\"Sep\",\"29\",[2,0,0,null],0,\"-\"],[1980,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"Sep\",\"28\",[0,0,0,null],0,\"-\"]],\"Hungary\":[[1918,\"only\",\"-\",\"Apr\",\"1\",[3,0,0,null],60,\"S\"],[1918,\"only\",\"-\",\"Sep\",\"29\",[3,0,0,null],0,\"-\"],[1919,\"only\",\"-\",\"Apr\",\"15\",[3,0,0,null],60,\"S\"],[1919,\"only\",\"-\",\"Sep\",\"15\",[3,0,0,null],0,\"-\"],[1920,\"only\",\"-\",\"Apr\",\"5\",[3,0,0,null],60,\"S\"],[1920,\"only\",\"-\",\"Sep\",\"30\",[3,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"May\",\"1\",[23,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Nov\",\"3\",[0,0,0,null],0,\"-\"],[1946,\"only\",\"-\",\"Mar\",\"31\",[2,0,0,\"s\"],60,\"S\"],[1946,1949,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1947,1949,\"-\",\"Apr\",\"Sun>=4\",[2,0,0,\"s\"],60,\"S\"],[1950,\"only\",\"-\",\"Apr\",\"17\",[2,0,0,\"s\"],60,\"S\"],[1950,\"only\",\"-\",\"Oct\",\"23\",[2,0,0,\"s\"],0,\"-\"],[1954,1955,\"-\",\"May\",\"23\",[0,0,0,null],60,\"S\"],[1954,1955,\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1956,\"only\",\"-\",\"Jun\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1956,\"only\",\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1957,\"only\",\"-\",\"Jun\",\"Sun>=1\",[1,0,0,null],60,\"S\"],[1957,\"only\",\"-\",\"Sep\",\"lastSun\",[3,0,0,null],0,\"-\"],[1980,\"only\",\"-\",\"Apr\",\"6\",[1,0,0,null],60,\"S\"]],\"Iceland\":[[1917,1918,\"-\",\"Feb\",\"19\",[23,0,0,null],60,\"S\"],[1917,\"only\",\"-\",\"Oct\",\"21\",[1,0,0,null],0,\"-\"],[1918,\"only\",\"-\",\"Nov\",\"16\",[1,0,0,null],0,\"-\"],[1939,\"only\",\"-\",\"Apr\",\"29\",[23,0,0,null],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"29\",[2,0,0,null],0,\"-\"],[1940,\"only\",\"-\",\"Feb\",\"25\",[2,0,0,null],60,\"S\"],[1940,\"only\",\"-\",\"Nov\",\"3\",[2,0,0,null],0,\"-\"],[1941,\"only\",\"-\",\"Mar\",\"2\",[1,0,0,\"s\"],60,\"S\"],[1941,\"only\",\"-\",\"Nov\",\"2\",[1,0,0,\"s\"],0,\"-\"],[1942,\"only\",\"-\",\"Mar\",\"8\",[1,0,0,\"s\"],60,\"S\"],[1942,\"only\",\"-\",\"Oct\",\"25\",[1,0,0,\"s\"],0,\"-\"],[1943,1946,\"-\",\"Mar\",\"Sun>=1\",[1,0,0,\"s\"],60,\"S\"],[1943,1948,\"-\",\"Oct\",\"Sun>=22\",[1,0,0,\"s\"],0,\"-\"],[1947,1967,\"-\",\"Apr\",\"Sun>=1\",[1,0,0,\"s\"],60,\"S\"],[1949,\"only\",\"-\",\"Oct\",\"30\",[1,0,0,\"s\"],0,\"-\"],[1950,1966,\"-\",\"Oct\",\"Sun>=22\",[1,0,0,\"s\"],0,\"-\"],[1967,\"only\",\"-\",\"Oct\",\"29\",[1,0,0,\"s\"],0,\"-\"]],\"Italy\":[[1916,\"only\",\"-\",\"Jun\",\"3\",[0,0,0,\"s\"],60,\"S\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,\"s\"],0,\"-\"],[1917,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,\"s\"],60,\"S\"],[1917,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,\"s\"],0,\"-\"],[1918,\"only\",\"-\",\"Mar\",\"10\",[0,0,0,\"s\"],60,\"S\"],[1918,1919,\"-\",\"Oct\",\"Sun>=1\",[0,0,0,\"s\"],0,\"-\"],[1919,\"only\",\"-\",\"Mar\",\"2\",[0,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Mar\",\"21\",[0,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Sep\",\"19\",[0,0,0,\"s\"],0,\"-\"],[1940,\"only\",\"-\",\"Jun\",\"15\",[0,0,0,\"s\"],60,\"S\"],[1944,\"only\",\"-\",\"Sep\",\"17\",[0,0,0,\"s\"],0,\"-\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Sep\",\"15\",[0,0,0,\"s\"],0,\"-\"],[1946,\"only\",\"-\",\"Mar\",\"17\",[2,0,0,\"s\"],60,\"S\"],[1946,\"only\",\"-\",\"Oct\",\"6\",[2,0,0,\"s\"],0,\"-\"],[1947,\"only\",\"-\",\"Mar\",\"16\",[0,0,0,\"s\"],60,\"S\"],[1947,\"only\",\"-\",\"Oct\",\"5\",[0,0,0,\"s\"],0,\"-\"],[1948,\"only\",\"-\",\"Feb\",\"29\",[2,0,0,\"s\"],60,\"S\"],[1948,\"only\",\"-\",\"Oct\",\"3\",[2,0,0,\"s\"],0,\"-\"],[1966,1968,\"-\",\"May\",\"Sun>=22\",[0,0,0,null],60,\"S\"],[1966,1969,\"-\",\"Sep\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[1969,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[1970,\"only\",\"-\",\"May\",\"31\",[0,0,0,null],60,\"S\"],[1970,\"only\",\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1971,1972,\"-\",\"May\",\"Sun>=22\",[0,0,0,null],60,\"S\"],[1971,\"only\",\"-\",\"Sep\",\"lastSun\",[1,0,0,null],0,\"-\"],[1972,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1973,\"only\",\"-\",\"Jun\",\"3\",[0,0,0,null],60,\"S\"],[1973,1974,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"May\",\"26\",[0,0,0,null],60,\"S\"],[1975,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,\"s\"],60,\"S\"],[1975,1977,\"-\",\"Sep\",\"lastSun\",[0,0,0,\"s\"],0,\"-\"],[1976,\"only\",\"-\",\"May\",\"30\",[0,0,0,\"s\"],60,\"S\"],[1977,1979,\"-\",\"May\",\"Sun>=22\",[0,0,0,\"s\"],60,\"S\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,\"s\"],0,\"-\"],[1979,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,\"s\"],0,\"-\"]],\"Latvia\":[[1989,1996,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1989,1996,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"]],\"Lux\":[[1916,\"only\",\"-\",\"May\",\"14\",[23,0,0,null],60,\"S\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,null],0,\"-\"],[1917,\"only\",\"-\",\"Apr\",\"28\",[23,0,0,null],60,\"S\"],[1917,\"only\",\"-\",\"Sep\",\"17\",[1,0,0,null],0,\"-\"],[1918,\"only\",\"-\",\"Apr\",\"Mon>=15\",[2,0,0,\"s\"],60,\"S\"],[1918,\"only\",\"-\",\"Sep\",\"Mon>=15\",[2,0,0,\"s\"],0,\"-\"],[1919,\"only\",\"-\",\"Mar\",\"1\",[23,0,0,null],60,\"S\"],[1919,\"only\",\"-\",\"Oct\",\"5\",[3,0,0,null],0,\"-\"],[1920,\"only\",\"-\",\"Feb\",\"14\",[23,0,0,null],60,\"S\"],[1920,\"only\",\"-\",\"Oct\",\"24\",[2,0,0,null],0,\"-\"],[1921,\"only\",\"-\",\"Mar\",\"14\",[23,0,0,null],60,\"S\"],[1921,\"only\",\"-\",\"Oct\",\"26\",[2,0,0,null],0,\"-\"],[1922,\"only\",\"-\",\"Mar\",\"25\",[23,0,0,null],60,\"S\"],[1922,\"only\",\"-\",\"Oct\",\"Sun>=2\",[1,0,0,null],0,\"-\"],[1923,\"only\",\"-\",\"Apr\",\"21\",[23,0,0,null],60,\"S\"],[1923,\"only\",\"-\",\"Oct\",\"Sun>=2\",[2,0,0,null],0,\"-\"],[1924,\"only\",\"-\",\"Mar\",\"29\",[23,0,0,null],60,\"S\"],[1924,1928,\"-\",\"Oct\",\"Sun>=2\",[1,0,0,null],0,\"-\"],[1925,\"only\",\"-\",\"Apr\",\"5\",[23,0,0,null],60,\"S\"],[1926,\"only\",\"-\",\"Apr\",\"17\",[23,0,0,null],60,\"S\"],[1927,\"only\",\"-\",\"Apr\",\"9\",[23,0,0,null],60,\"S\"],[1928,\"only\",\"-\",\"Apr\",\"14\",[23,0,0,null],60,\"S\"],[1929,\"only\",\"-\",\"Apr\",\"20\",[23,0,0,null],60,\"S\"]],\"Malta\":[[1973,\"only\",\"-\",\"Mar\",\"31\",[0,0,0,\"s\"],60,\"S\"],[1973,\"only\",\"-\",\"Sep\",\"29\",[0,0,0,\"s\"],0,\"-\"],[1974,\"only\",\"-\",\"Apr\",\"21\",[0,0,0,\"s\"],60,\"S\"],[1974,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,\"s\"],0,\"-\"],[1975,1979,\"-\",\"Apr\",\"Sun>=15\",[2,0,0,null],60,\"S\"],[1975,1980,\"-\",\"Sep\",\"Sun>=15\",[2,0,0,null],0,\"-\"],[1980,\"only\",\"-\",\"Mar\",\"31\",[2,0,0,null],60,\"S\"]],\"Neth\":[[1916,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"NST\",\"\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"AMT\",\"\"],[1917,\"only\",\"-\",\"Apr\",\"16\",[2,0,0,\"s\"],60,\"NST\"],[1917,\"only\",\"-\",\"Sep\",\"17\",[2,0,0,\"s\"],0,\"AMT\"],[1918,1921,\"-\",\"Apr\",\"Mon>=1\",[2,0,0,\"s\"],60,\"NST\"],[1918,1921,\"-\",\"Sep\",\"lastMon\",[2,0,0,\"s\"],0,\"AMT\"],[1922,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"NST\"],[1922,1936,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,\"s\"],0,\"AMT\"],[1923,\"only\",\"-\",\"Jun\",\"Fri>=1\",[2,0,0,\"s\"],60,\"NST\"],[1924,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"NST\"],[1925,\"only\",\"-\",\"Jun\",\"Fri>=1\",[2,0,0,\"s\"],60,\"NST\"],[1926,1931,\"-\",\"May\",\"15\",[2,0,0,\"s\"],60,\"NST\"],[1932,\"only\",\"-\",\"May\",\"22\",[2,0,0,\"s\"],60,\"NST\"],[1933,1936,\"-\",\"May\",\"15\",[2,0,0,\"s\"],60,\"NST\"],[1937,\"only\",\"-\",\"May\",\"22\",[2,0,0,\"s\"],60,\"NST\"],[1937,\"only\",\"-\",\"Jul\",\"1\",[0,0,0,null],60,\"S\"],[1937,1939,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,\"s\"],0,\"-\"],[1938,1939,\"-\",\"May\",\"15\",[2,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Sep\",\"16\",[2,0,0,\"s\"],0,\"-\"]],\"Norway\":[[1916,\"only\",\"-\",\"May\",\"22\",[1,0,0,null],60,\"S\"],[1916,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[2,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,\"s\"],0,\"-\"],[1959,1964,\"-\",\"Mar\",\"Sun>=15\",[2,0,0,\"s\"],60,\"S\"],[1959,1965,\"-\",\"Sep\",\"Sun>=15\",[2,0,0,\"s\"],0,\"-\"],[1965,\"only\",\"-\",\"Apr\",\"25\",[2,0,0,\"s\"],60,\"S\"]],\"Poland\":[[1918,1919,\"-\",\"Sep\",\"16\",[2,0,0,\"s\"],0,\"-\"],[1919,\"only\",\"-\",\"Apr\",\"15\",[2,0,0,\"s\"],60,\"S\"],[1944,\"only\",\"-\",\"Apr\",\"3\",[2,0,0,\"s\"],60,\"S\"],[1944,\"only\",\"-\",\"Oct\",\"4\",[2,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"Apr\",\"29\",[0,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"],[1946,\"only\",\"-\",\"Apr\",\"14\",[0,0,0,\"s\"],60,\"S\"],[1946,\"only\",\"-\",\"Oct\",\"7\",[2,0,0,\"s\"],0,\"-\"],[1947,\"only\",\"-\",\"May\",\"4\",[2,0,0,\"s\"],60,\"S\"],[1947,1949,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1948,\"only\",\"-\",\"Apr\",\"18\",[2,0,0,\"s\"],60,\"S\"],[1949,\"only\",\"-\",\"Apr\",\"10\",[2,0,0,\"s\"],60,\"S\"],[1957,\"only\",\"-\",\"Jun\",\"2\",[1,0,0,\"s\"],60,\"S\"],[1957,1958,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"],[1958,\"only\",\"-\",\"Mar\",\"30\",[1,0,0,\"s\"],60,\"S\"],[1959,\"only\",\"-\",\"May\",\"31\",[1,0,0,\"s\"],60,\"S\"],[1959,1961,\"-\",\"Oct\",\"Sun>=1\",[1,0,0,\"s\"],0,\"-\"],[1960,\"only\",\"-\",\"Apr\",\"3\",[1,0,0,\"s\"],60,\"S\"],[1961,1964,\"-\",\"May\",\"lastSun\",[1,0,0,\"s\"],60,\"S\"],[1962,1964,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"]],\"Port\":[[1916,\"only\",\"-\",\"Jun\",\"17\",[23,0,0,null],60,\"S\"],[1916,\"only\",\"-\",\"Nov\",\"1\",[1,0,0,null],0,\"-\"],[1917,\"only\",\"-\",\"Feb\",\"28\",[23,0,0,\"s\"],60,\"S\"],[1917,1921,\"-\",\"Oct\",\"14\",[23,0,0,\"s\"],0,\"-\"],[1918,\"only\",\"-\",\"Mar\",\"1\",[23,0,0,\"s\"],60,\"S\"],[1919,\"only\",\"-\",\"Feb\",\"28\",[23,0,0,\"s\"],60,\"S\"],[1920,\"only\",\"-\",\"Feb\",\"29\",[23,0,0,\"s\"],60,\"S\"],[1921,\"only\",\"-\",\"Feb\",\"28\",[23,0,0,\"s\"],60,\"S\"],[1924,\"only\",\"-\",\"Apr\",\"16\",[23,0,0,\"s\"],60,\"S\"],[1924,\"only\",\"-\",\"Oct\",\"14\",[23,0,0,\"s\"],0,\"-\"],[1926,\"only\",\"-\",\"Apr\",\"17\",[23,0,0,\"s\"],60,\"S\"],[1926,1929,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1927,\"only\",\"-\",\"Apr\",\"9\",[23,0,0,\"s\"],60,\"S\"],[1928,\"only\",\"-\",\"Apr\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1929,\"only\",\"-\",\"Apr\",\"20\",[23,0,0,\"s\"],60,\"S\"],[1931,\"only\",\"-\",\"Apr\",\"18\",[23,0,0,\"s\"],60,\"S\"],[1931,1932,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1932,\"only\",\"-\",\"Apr\",\"2\",[23,0,0,\"s\"],60,\"S\"],[1934,\"only\",\"-\",\"Apr\",\"7\",[23,0,0,\"s\"],60,\"S\"],[1934,1938,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1935,\"only\",\"-\",\"Mar\",\"30\",[23,0,0,\"s\"],60,\"S\"],[1936,\"only\",\"-\",\"Apr\",\"18\",[23,0,0,\"s\"],60,\"S\"],[1937,\"only\",\"-\",\"Apr\",\"3\",[23,0,0,\"s\"],60,\"S\"],[1938,\"only\",\"-\",\"Mar\",\"26\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Apr\",\"15\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Nov\",\"18\",[23,0,0,\"s\"],0,\"-\"],[1940,\"only\",\"-\",\"Feb\",\"24\",[23,0,0,\"s\"],60,\"S\"],[1940,1941,\"-\",\"Oct\",\"5\",[23,0,0,\"s\"],0,\"-\"],[1941,\"only\",\"-\",\"Apr\",\"5\",[23,0,0,\"s\"],60,\"S\"],[1942,1945,\"-\",\"Mar\",\"Sat>=8\",[23,0,0,\"s\"],60,\"S\"],[1942,\"only\",\"-\",\"Apr\",\"25\",[22,0,0,\"s\"],120,\"M\",\"\"],[1942,\"only\",\"-\",\"Aug\",\"15\",[22,0,0,\"s\"],60,\"S\"],[1942,1945,\"-\",\"Oct\",\"Sat>=24\",[23,0,0,\"s\"],0,\"-\"],[1943,\"only\",\"-\",\"Apr\",\"17\",[22,0,0,\"s\"],120,\"M\"],[1943,1945,\"-\",\"Aug\",\"Sat>=25\",[22,0,0,\"s\"],60,\"S\"],[1944,1945,\"-\",\"Apr\",\"Sat>=21\",[22,0,0,\"s\"],120,\"M\"],[1946,\"only\",\"-\",\"Apr\",\"Sat>=1\",[23,0,0,\"s\"],60,\"S\"],[1946,\"only\",\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1947,1949,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],60,\"S\"],[1947,1949,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1951,1965,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],60,\"S\"],[1951,1965,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,\"s\"],0,\"-\"],[1977,\"only\",\"-\",\"Mar\",\"27\",[0,0,0,\"s\"],60,\"S\"],[1977,\"only\",\"-\",\"Sep\",\"25\",[0,0,0,\"s\"],0,\"-\"],[1978,1979,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,\"s\"],60,\"S\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,\"s\"],0,\"-\"],[1979,1982,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"],[1980,\"only\",\"-\",\"Mar\",\"lastSun\",[0,0,0,\"s\"],60,\"S\"],[1981,1982,\"-\",\"Mar\",\"lastSun\",[1,0,0,\"s\"],60,\"S\"],[1983,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"]],\"Romania\":[[1932,\"only\",\"-\",\"May\",\"21\",[0,0,0,\"s\"],60,\"S\"],[1932,1939,\"-\",\"Oct\",\"Sun>=1\",[0,0,0,\"s\"],0,\"-\"],[1933,1939,\"-\",\"Apr\",\"Sun>=2\",[0,0,0,\"s\"],60,\"S\"],[1979,\"only\",\"-\",\"May\",\"27\",[0,0,0,null],60,\"S\"],[1979,\"only\",\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"-\"],[1980,\"only\",\"-\",\"Apr\",\"5\",[23,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"Sep\",\"lastSun\",[1,0,0,null],0,\"-\"],[1991,1993,\"-\",\"Mar\",\"lastSun\",[0,0,0,\"s\"],60,\"S\"],[1991,1993,\"-\",\"Sep\",\"lastSun\",[0,0,0,\"s\"],0,\"-\"]],\"Spain\":[[1917,\"only\",\"-\",\"May\",\"5\",[23,0,0,\"s\"],60,\"S\"],[1917,1919,\"-\",\"Oct\",\"6\",[23,0,0,\"s\"],0,\"-\"],[1918,\"only\",\"-\",\"Apr\",\"15\",[23,0,0,\"s\"],60,\"S\"],[1919,\"only\",\"-\",\"Apr\",\"5\",[23,0,0,\"s\"],60,\"S\"],[1924,\"only\",\"-\",\"Apr\",\"16\",[23,0,0,\"s\"],60,\"S\"],[1924,\"only\",\"-\",\"Oct\",\"4\",[23,0,0,\"s\"],0,\"-\"],[1926,\"only\",\"-\",\"Apr\",\"17\",[23,0,0,\"s\"],60,\"S\"],[1926,1929,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1927,\"only\",\"-\",\"Apr\",\"9\",[23,0,0,\"s\"],60,\"S\"],[1928,\"only\",\"-\",\"Apr\",\"14\",[23,0,0,\"s\"],60,\"S\"],[1929,\"only\",\"-\",\"Apr\",\"20\",[23,0,0,\"s\"],60,\"S\"],[1937,\"only\",\"-\",\"May\",\"22\",[23,0,0,\"s\"],60,\"S\"],[1937,1939,\"-\",\"Oct\",\"Sat>=1\",[23,0,0,\"s\"],0,\"-\"],[1938,\"only\",\"-\",\"Mar\",\"22\",[23,0,0,\"s\"],60,\"S\"],[1939,\"only\",\"-\",\"Apr\",\"15\",[23,0,0,\"s\"],60,\"S\"],[1940,\"only\",\"-\",\"Mar\",\"16\",[23,0,0,\"s\"],60,\"S\"],[1942,\"only\",\"-\",\"May\",\"2\",[22,0,0,\"s\"],120,\"M\",\"\"],[1942,\"only\",\"-\",\"Sep\",\"1\",[22,0,0,\"s\"],60,\"S\"],[1943,1946,\"-\",\"Apr\",\"Sat>=13\",[22,0,0,\"s\"],120,\"M\"],[1943,\"only\",\"-\",\"Oct\",\"3\",[22,0,0,\"s\"],60,\"S\"],[1944,\"only\",\"-\",\"Oct\",\"10\",[22,0,0,\"s\"],60,\"S\"],[1945,\"only\",\"-\",\"Sep\",\"30\",[1,0,0,null],60,\"S\"],[1946,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"-\"],[1949,\"only\",\"-\",\"Apr\",\"30\",[23,0,0,null],60,\"S\"],[1949,\"only\",\"-\",\"Sep\",\"30\",[1,0,0,null],0,\"-\"],[1974,1975,\"-\",\"Apr\",\"Sat>=13\",[23,0,0,null],60,\"S\"],[1974,1975,\"-\",\"Oct\",\"Sun>=1\",[1,0,0,null],0,\"-\"],[1976,\"only\",\"-\",\"Mar\",\"27\",[23,0,0,null],60,\"S\"],[1976,1977,\"-\",\"Sep\",\"lastSun\",[1,0,0,null],0,\"-\"],[1977,1978,\"-\",\"Apr\",\"2\",[23,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Oct\",\"1\",[1,0,0,null],0,\"-\"]],\"SpainAfrica\":[[1967,\"only\",\"-\",\"Jun\",\"3\",[12,0,0,null],60,\"S\"],[1967,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"Jun\",\"24\",[0,0,0,null],60,\"S\"],[1974,\"only\",\"-\",\"Sep\",\"1\",[0,0,0,null],0,\"-\"],[1976,1977,\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Aug\",\"1\",[0,0,0,null],0,\"-\"],[1977,\"only\",\"-\",\"Sep\",\"28\",[0,0,0,null],0,\"-\"],[1978,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Aug\",\"4\",[0,0,0,null],0,\"-\"]],\"Swiss\":[[1941,1942,\"-\",\"May\",\"Mon>=1\",[1,0,0,null],60,\"S\"],[1941,1942,\"-\",\"Oct\",\"Mon>=1\",[2,0,0,null],0,\"-\"]],\"Turkey\":[[1916,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1920,\"only\",\"-\",\"Mar\",\"28\",[0,0,0,null],60,\"S\"],[1920,\"only\",\"-\",\"Oct\",\"25\",[0,0,0,null],0,\"-\"],[1921,\"only\",\"-\",\"Apr\",\"3\",[0,0,0,null],60,\"S\"],[1921,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],0,\"-\"],[1922,\"only\",\"-\",\"Mar\",\"26\",[0,0,0,null],60,\"S\"],[1922,\"only\",\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"-\"],[1924,\"only\",\"-\",\"May\",\"13\",[0,0,0,null],60,\"S\"],[1924,1925,\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1925,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"S\"],[1940,\"only\",\"-\",\"Jun\",\"30\",[0,0,0,null],60,\"S\"],[1940,\"only\",\"-\",\"Oct\",\"5\",[0,0,0,null],0,\"-\"],[1940,\"only\",\"-\",\"Dec\",\"1\",[0,0,0,null],60,\"S\"],[1941,\"only\",\"-\",\"Sep\",\"21\",[0,0,0,null],0,\"-\"],[1942,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"S\"],[1942,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"-\"],[1945,\"only\",\"-\",\"Apr\",\"2\",[0,0,0,null],60,\"S\"],[1945,\"only\",\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"-\"],[1946,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[1946,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1947,1948,\"-\",\"Apr\",\"Sun>=16\",[0,0,0,null],60,\"S\"],[1947,1950,\"-\",\"Oct\",\"Sun>=2\",[0,0,0,null],0,\"-\"],[1949,\"only\",\"-\",\"Apr\",\"10\",[0,0,0,null],60,\"S\"],[1950,\"only\",\"-\",\"Apr\",\"19\",[0,0,0,null],60,\"S\"],[1951,\"only\",\"-\",\"Apr\",\"22\",[0,0,0,null],60,\"S\"],[1951,\"only\",\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"-\"],[1962,\"only\",\"-\",\"Jul\",\"15\",[0,0,0,null],60,\"S\"],[1962,\"only\",\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"-\"],[1964,\"only\",\"-\",\"May\",\"15\",[0,0,0,null],60,\"S\"],[1964,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1970,1972,\"-\",\"May\",\"Sun>=2\",[0,0,0,null],60,\"S\"],[1970,1972,\"-\",\"Oct\",\"Sun>=2\",[0,0,0,null],0,\"-\"],[1973,\"only\",\"-\",\"Jun\",\"3\",[1,0,0,null],60,\"S\"],[1973,\"only\",\"-\",\"Nov\",\"4\",[3,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"Mar\",\"31\",[2,0,0,null],60,\"S\"],[1974,\"only\",\"-\",\"Nov\",\"3\",[5,0,0,null],0,\"-\"],[1975,\"only\",\"-\",\"Mar\",\"30\",[0,0,0,null],60,\"S\"],[1975,1976,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"-\"],[1976,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"S\"],[1977,1978,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1977,\"only\",\"-\",\"Oct\",\"16\",[0,0,0,null],0,\"-\"],[1979,1980,\"-\",\"Apr\",\"Sun>=1\",[3,0,0,null],60,\"S\"],[1979,1982,\"-\",\"Oct\",\"Mon>=11\",[0,0,0,null],0,\"-\"],[1981,1982,\"-\",\"Mar\",\"lastSun\",[3,0,0,null],60,\"S\"],[1983,\"only\",\"-\",\"Jul\",\"31\",[0,0,0,null],60,\"S\"],[1983,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"-\"],[1985,\"only\",\"-\",\"Apr\",\"20\",[0,0,0,null],60,\"S\"],[1985,\"only\",\"-\",\"Sep\",\"28\",[0,0,0,null],0,\"-\"],[1986,1990,\"-\",\"Mar\",\"lastSun\",[2,0,0,\"s\"],60,\"S\"],[1986,1990,\"-\",\"Sep\",\"lastSun\",[2,0,0,\"s\"],0,\"-\"],[1991,2006,\"-\",\"Mar\",\"lastSun\",[1,0,0,\"s\"],60,\"S\"],[1991,1995,\"-\",\"Sep\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"],[1996,2006,\"-\",\"Oct\",\"lastSun\",[1,0,0,\"s\"],0,\"-\"]],\"US\":[[1918,1919,\"-\",\"Mar\",\"lastSun\",[2,0,0,null],60,\"D\"],[1918,1919,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"S\"],[1967,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1967,1973,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1974,\"only\",\"-\",\"Jan\",\"6\",[2,0,0,null],60,\"D\"],[1975,\"only\",\"-\",\"Feb\",\"23\",[2,0,0,null],60,\"D\"],[1976,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1987,2006,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Mar\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],0,\"S\"]],\"NYC\":[[1920,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,null],60,\"D\"],[1920,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1921,1966,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1921,1954,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1955,1966,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Chicago\":[[1920,\"only\",\"-\",\"Jun\",\"13\",[2,0,0,null],60,\"D\"],[1920,1921,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1921,\"only\",\"-\",\"Mar\",\"lastSun\",[2,0,0,null],60,\"D\"],[1922,1966,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1922,1954,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1955,1966,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Denver\":[[1920,1921,\"-\",\"Mar\",\"lastSun\",[2,0,0,null],60,\"D\"],[1920,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1921,\"only\",\"-\",\"May\",\"22\",[2,0,0,null],0,\"S\"],[1965,1966,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1965,1966,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"CA\":[[1948,\"only\",\"-\",\"Mar\",\"14\",[2,0,0,null],60,\"D\"],[1949,\"only\",\"-\",\"Jan\",\"1\",[2,0,0,null],0,\"S\"],[1950,1966,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1950,1961,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1962,1966,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Indianapolis\":[[1941,\"only\",\"-\",\"Jun\",\"22\",[2,0,0,null],60,\"D\"],[1941,1954,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1946,1954,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"]],\"Marengo\":[[1951,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1951,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1954,1960,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1954,1960,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Vincennes\":[[1946,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1953,1954,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1953,1959,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1955,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1956,1963,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1960,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1961,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1962,1963,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Perry\":[[1946,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1953,1954,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1953,1959,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1955,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1956,1963,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1960,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1961,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1962,1963,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Pike\":[[1955,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1955,1960,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1956,1964,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1961,1964,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Starke\":[[1947,1961,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1947,1954,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1955,1956,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1957,1958,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1959,1961,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Pulaski\":[[1946,1960,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,1954,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1955,1956,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1957,1960,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Louisville\":[[1921,\"only\",\"-\",\"May\",\"1\",[2,0,0,null],60,\"D\"],[1921,\"only\",\"-\",\"Sep\",\"1\",[2,0,0,null],0,\"S\"],[1941,1961,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1941,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1946,\"only\",\"-\",\"Jun\",\"2\",[2,0,0,null],0,\"S\"],[1950,1955,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1956,1960,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Detroit\":[[1948,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1948,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1967,\"only\",\"-\",\"Jun\",\"14\",[2,0,0,null],60,\"D\"],[1967,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Menominee\":[[1946,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1966,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1966,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Canada\":[[1918,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,null],60,\"D\"],[1918,\"only\",\"-\",\"Oct\",\"27\",[2,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"S\"],[1974,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1974,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1987,2006,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Mar\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],0,\"S\"]],\"StJohns\":[[1917,\"only\",\"-\",\"Apr\",\"8\",[2,0,0,null],60,\"D\"],[1917,\"only\",\"-\",\"Sep\",\"17\",[2,0,0,null],0,\"S\"],[1919,\"only\",\"-\",\"May\",\"5\",[23,0,0,null],60,\"D\"],[1919,\"only\",\"-\",\"Aug\",\"12\",[23,0,0,null],0,\"S\"],[1920,1935,\"-\",\"May\",\"Sun>=1\",[23,0,0,null],60,\"D\"],[1920,1935,\"-\",\"Oct\",\"lastSun\",[23,0,0,null],0,\"S\"],[1936,1941,\"-\",\"May\",\"Mon>=9\",[0,0,0,null],60,\"D\"],[1936,1941,\"-\",\"Oct\",\"Mon>=2\",[0,0,0,null],0,\"S\"],[1946,1950,\"-\",\"May\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[1946,1950,\"-\",\"Oct\",\"Sun>=2\",[2,0,0,null],0,\"S\"],[1951,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1951,1959,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1960,1986,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1987,\"only\",\"-\",\"Apr\",\"Sun>=1\",[0,1,0,null],60,\"D\"],[1987,2006,\"-\",\"Oct\",\"lastSun\",[0,1,0,null],0,\"S\"],[1988,\"only\",\"-\",\"Apr\",\"Sun>=1\",[0,1,0,null],120,\"DD\"],[1989,2006,\"-\",\"Apr\",\"Sun>=1\",[0,1,0,null],60,\"D\"],[2007,2011,\"-\",\"Mar\",\"Sun>=8\",[0,1,0,null],60,\"D\"],[2007,2010,\"-\",\"Nov\",\"Sun>=1\",[0,1,0,null],0,\"S\"]],\"Halifax\":[[1916,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],60,\"D\"],[1916,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1920,\"only\",\"-\",\"May\",\"9\",[0,0,0,null],60,\"D\"],[1920,\"only\",\"-\",\"Aug\",\"29\",[0,0,0,null],0,\"S\"],[1921,\"only\",\"-\",\"May\",\"6\",[0,0,0,null],60,\"D\"],[1921,1922,\"-\",\"Sep\",\"5\",[0,0,0,null],0,\"S\"],[1922,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"D\"],[1923,1925,\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1923,\"only\",\"-\",\"Sep\",\"4\",[0,0,0,null],0,\"S\"],[1924,\"only\",\"-\",\"Sep\",\"15\",[0,0,0,null],0,\"S\"],[1925,\"only\",\"-\",\"Sep\",\"28\",[0,0,0,null],0,\"S\"],[1926,\"only\",\"-\",\"May\",\"16\",[0,0,0,null],60,\"D\"],[1926,\"only\",\"-\",\"Sep\",\"13\",[0,0,0,null],0,\"S\"],[1927,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1927,\"only\",\"-\",\"Sep\",\"26\",[0,0,0,null],0,\"S\"],[1928,1931,\"-\",\"May\",\"Sun>=8\",[0,0,0,null],60,\"D\"],[1928,\"only\",\"-\",\"Sep\",\"9\",[0,0,0,null],0,\"S\"],[1929,\"only\",\"-\",\"Sep\",\"3\",[0,0,0,null],0,\"S\"],[1930,\"only\",\"-\",\"Sep\",\"15\",[0,0,0,null],0,\"S\"],[1931,1932,\"-\",\"Sep\",\"Mon>=24\",[0,0,0,null],0,\"S\"],[1932,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1933,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"D\"],[1933,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"S\"],[1934,\"only\",\"-\",\"May\",\"20\",[0,0,0,null],60,\"D\"],[1934,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,null],0,\"S\"],[1935,\"only\",\"-\",\"Jun\",\"2\",[0,0,0,null],60,\"D\"],[1935,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"S\"],[1936,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"D\"],[1936,\"only\",\"-\",\"Sep\",\"14\",[0,0,0,null],0,\"S\"],[1937,1938,\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1937,1941,\"-\",\"Sep\",\"Mon>=24\",[0,0,0,null],0,\"S\"],[1939,\"only\",\"-\",\"May\",\"28\",[0,0,0,null],60,\"D\"],[1940,1941,\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1946,1949,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,1949,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1951,1954,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1951,1954,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1956,1959,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1956,1959,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1962,1973,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1962,1973,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Moncton\":[[1933,1935,\"-\",\"Jun\",\"Sun>=8\",[1,0,0,null],60,\"D\"],[1933,1935,\"-\",\"Sep\",\"Sun>=8\",[1,0,0,null],0,\"S\"],[1936,1938,\"-\",\"Jun\",\"Sun>=1\",[1,0,0,null],60,\"D\"],[1936,1938,\"-\",\"Sep\",\"Sun>=1\",[1,0,0,null],0,\"S\"],[1939,\"only\",\"-\",\"May\",\"27\",[1,0,0,null],60,\"D\"],[1939,1941,\"-\",\"Sep\",\"Sat>=21\",[1,0,0,null],0,\"S\"],[1940,\"only\",\"-\",\"May\",\"19\",[1,0,0,null],60,\"D\"],[1941,\"only\",\"-\",\"May\",\"4\",[1,0,0,null],60,\"D\"],[1946,1972,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,1956,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1957,1972,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1993,2006,\"-\",\"Apr\",\"Sun>=1\",[0,1,0,null],60,\"D\"],[1993,2006,\"-\",\"Oct\",\"lastSun\",[0,1,0,null],0,\"S\"]],\"Mont\":[[1917,\"only\",\"-\",\"Mar\",\"25\",[2,0,0,null],60,\"D\"],[1917,\"only\",\"-\",\"Apr\",\"24\",[0,0,0,null],0,\"S\"],[1919,\"only\",\"-\",\"Mar\",\"31\",[2,30,0,null],60,\"D\"],[1919,\"only\",\"-\",\"Oct\",\"25\",[2,30,0,null],0,\"S\"],[1920,\"only\",\"-\",\"May\",\"2\",[2,30,0,null],60,\"D\"],[1920,1922,\"-\",\"Oct\",\"Sun>=1\",[2,30,0,null],0,\"S\"],[1921,\"only\",\"-\",\"May\",\"1\",[2,0,0,null],60,\"D\"],[1922,\"only\",\"-\",\"Apr\",\"30\",[2,0,0,null],60,\"D\"],[1924,\"only\",\"-\",\"May\",\"17\",[2,0,0,null],60,\"D\"],[1924,1926,\"-\",\"Sep\",\"lastSun\",[2,30,0,null],0,\"S\"],[1925,1926,\"-\",\"May\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[1927,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1927,1932,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"S\"],[1928,1931,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],60,\"D\"],[1932,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],60,\"D\"],[1933,1940,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],60,\"D\"],[1933,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"],[1934,1939,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"S\"],[1946,1973,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1945,1948,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1949,1950,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1951,1956,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1957,1973,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Toronto\":[[1919,\"only\",\"-\",\"Mar\",\"30\",[23,30,0,null],60,\"D\"],[1919,\"only\",\"-\",\"Oct\",\"26\",[0,0,0,null],0,\"S\"],[1920,\"only\",\"-\",\"May\",\"2\",[2,0,0,null],60,\"D\"],[1920,\"only\",\"-\",\"Sep\",\"26\",[0,0,0,null],0,\"S\"],[1921,\"only\",\"-\",\"May\",\"15\",[2,0,0,null],60,\"D\"],[1921,\"only\",\"-\",\"Sep\",\"15\",[2,0,0,null],0,\"S\"],[1922,1923,\"-\",\"May\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[1922,1926,\"-\",\"Sep\",\"Sun>=15\",[2,0,0,null],0,\"S\"],[1924,1927,\"-\",\"May\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[1927,1932,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1928,1931,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1932,\"only\",\"-\",\"May\",\"1\",[2,0,0,null],60,\"D\"],[1933,1940,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1933,\"only\",\"-\",\"Oct\",\"1\",[2,0,0,null],0,\"S\"],[1934,1939,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1945,1946,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1946,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1947,1949,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],60,\"D\"],[1947,1948,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"S\"],[1949,\"only\",\"-\",\"Nov\",\"lastSun\",[0,0,0,null],0,\"S\"],[1950,1973,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1950,\"only\",\"-\",\"Nov\",\"lastSun\",[2,0,0,null],0,\"S\"],[1951,1956,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1957,1973,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Winn\":[[1916,\"only\",\"-\",\"Apr\",\"23\",[0,0,0,null],60,\"D\"],[1916,\"only\",\"-\",\"Sep\",\"17\",[0,0,0,null],0,\"S\"],[1918,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,null],60,\"D\"],[1918,\"only\",\"-\",\"Oct\",\"27\",[2,0,0,null],0,\"S\"],[1937,\"only\",\"-\",\"May\",\"16\",[2,0,0,null],60,\"D\"],[1937,\"only\",\"-\",\"Sep\",\"26\",[2,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1946,\"only\",\"-\",\"May\",\"12\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Oct\",\"13\",[2,0,0,null],0,\"S\"],[1947,1949,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1947,1949,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1950,\"only\",\"-\",\"May\",\"1\",[2,0,0,null],60,\"D\"],[1950,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"S\"],[1951,1960,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1951,1958,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1959,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1960,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1963,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1963,\"only\",\"-\",\"Sep\",\"22\",[2,0,0,null],0,\"S\"],[1966,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,\"s\"],60,\"D\"],[1966,2005,\"-\",\"Oct\",\"lastSun\",[2,0,0,\"s\"],0,\"S\"],[1987,2005,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,\"s\"],60,\"D\"]],\"Regina\":[[1918,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,null],60,\"D\"],[1918,\"only\",\"-\",\"Oct\",\"27\",[2,0,0,null],0,\"S\"],[1930,1934,\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1930,1934,\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],0,\"S\"],[1937,1941,\"-\",\"Apr\",\"Sun>=8\",[0,0,0,null],60,\"D\"],[1937,\"only\",\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],0,\"S\"],[1938,\"only\",\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],0,\"S\"],[1939,1941,\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1946,\"only\",\"-\",\"Apr\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Oct\",\"Sun>=8\",[2,0,0,null],0,\"S\"],[1947,1957,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1947,1957,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1959,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1959,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Swift\":[[1957,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1957,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1959,1961,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1959,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1960,1961,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Edm\":[[1918,1919,\"-\",\"Apr\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[1918,\"only\",\"-\",\"Oct\",\"27\",[2,0,0,null],0,\"S\"],[1919,\"only\",\"-\",\"May\",\"27\",[2,0,0,null],0,\"S\"],[1920,1923,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1920,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1921,1923,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1947,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1947,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1967,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1967,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1969,\"only\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1969,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1972,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1972,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Vanc\":[[1918,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,null],60,\"D\"],[1918,\"only\",\"-\",\"Oct\",\"27\",[2,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"S\"],[1946,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1946,\"only\",\"-\",\"Oct\",\"13\",[2,0,0,null],0,\"S\"],[1947,1961,\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[1962,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"NT_YK\":[[1918,\"only\",\"-\",\"Apr\",\"14\",[2,0,0,null],60,\"D\"],[1918,\"only\",\"-\",\"Oct\",\"27\",[2,0,0,null],0,\"S\"],[1919,\"only\",\"-\",\"May\",\"25\",[2,0,0,null],60,\"D\"],[1919,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],0,\"S\"],[1942,\"only\",\"-\",\"Feb\",\"9\",[2,0,0,null],60,\"W\",\"\"],[1945,\"only\",\"-\",\"Aug\",\"14\",[23,0,0,\"u\"],60,\"P\",\"\"],[1945,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"S\"],[1965,\"only\",\"-\",\"Apr\",\"lastSun\",[0,0,0,null],120,\"DD\"],[1965,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1980,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1980,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1987,2006,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"]],\"Mexico\":[[1939,\"only\",\"-\",\"Feb\",\"5\",[0,0,0,null],60,\"D\"],[1939,\"only\",\"-\",\"Jun\",\"25\",[0,0,0,null],0,\"S\"],[1940,\"only\",\"-\",\"Dec\",\"9\",[0,0,0,null],60,\"D\"],[1941,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"S\"],[1943,\"only\",\"-\",\"Dec\",\"16\",[0,0,0,null],60,\"W\",\"\"],[1944,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],0,\"S\"],[1950,\"only\",\"-\",\"Feb\",\"12\",[0,0,0,null],60,\"D\"],[1950,\"only\",\"-\",\"Jul\",\"30\",[0,0,0,null],0,\"S\"],[1996,2000,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[1996,2000,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[2001,\"only\",\"-\",\"May\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[2001,\"only\",\"-\",\"Sep\",\"lastSun\",[2,0,0,null],0,\"S\"],[2002,\"max\",\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[2002,\"max\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]],\"Bahamas\":[[1964,1975,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1964,1975,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"]],\"Barb\":[[1977,\"only\",\"-\",\"Jun\",\"12\",[2,0,0,null],60,\"D\"],[1977,1978,\"-\",\"Oct\",\"Sun>=1\",[2,0,0,null],0,\"S\"],[1978,1980,\"-\",\"Apr\",\"Sun>=15\",[2,0,0,null],60,\"D\"],[1979,\"only\",\"-\",\"Sep\",\"30\",[2,0,0,null],0,\"S\"],[1980,\"only\",\"-\",\"Sep\",\"25\",[2,0,0,null],0,\"S\"]],\"Belize\":[[1918,1942,\"-\",\"Oct\",\"Sun>=2\",[0,0,0,null],30,\"HD\"],[1919,1943,\"-\",\"Feb\",\"Sun>=9\",[0,0,0,null],0,\"S\"],[1973,\"only\",\"-\",\"Dec\",\"5\",[0,0,0,null],60,\"D\"],[1974,\"only\",\"-\",\"Feb\",\"9\",[0,0,0,null],0,\"S\"],[1982,\"only\",\"-\",\"Dec\",\"18\",[0,0,0,null],60,\"D\"],[1983,\"only\",\"-\",\"Feb\",\"12\",[0,0,0,null],0,\"S\"]],\"CR\":[[1979,1980,\"-\",\"Feb\",\"lastSun\",[0,0,0,null],60,\"D\"],[1979,1980,\"-\",\"Jun\",\"Sun>=1\",[0,0,0,null],0,\"S\"],[1991,1992,\"-\",\"Jan\",\"Sat>=15\",[0,0,0,null],60,\"D\"],[1991,\"only\",\"-\",\"Jul\",\"1\",[0,0,0,null],0,\"S\"],[1992,\"only\",\"-\",\"Mar\",\"15\",[0,0,0,null],0,\"S\"]],\"Cuba\":[[1928,\"only\",\"-\",\"Jun\",\"10\",[0,0,0,null],60,\"D\"],[1928,\"only\",\"-\",\"Oct\",\"10\",[0,0,0,null],0,\"S\"],[1940,1942,\"-\",\"Jun\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1940,1942,\"-\",\"Sep\",\"Sun>=1\",[0,0,0,null],0,\"S\"],[1945,1946,\"-\",\"Jun\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1945,1946,\"-\",\"Sep\",\"Sun>=1\",[0,0,0,null],0,\"S\"],[1965,\"only\",\"-\",\"Jun\",\"1\",[0,0,0,null],60,\"D\"],[1965,\"only\",\"-\",\"Sep\",\"30\",[0,0,0,null],0,\"S\"],[1966,\"only\",\"-\",\"May\",\"29\",[0,0,0,null],60,\"D\"],[1966,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],0,\"S\"],[1967,\"only\",\"-\",\"Apr\",\"8\",[0,0,0,null],60,\"D\"],[1967,1968,\"-\",\"Sep\",\"Sun>=8\",[0,0,0,null],0,\"S\"],[1968,\"only\",\"-\",\"Apr\",\"14\",[0,0,0,null],60,\"D\"],[1969,1977,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],60,\"D\"],[1969,1971,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"S\"],[1972,1974,\"-\",\"Oct\",\"8\",[0,0,0,null],0,\"S\"],[1975,1977,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"S\"],[1978,\"only\",\"-\",\"May\",\"7\",[0,0,0,null],60,\"D\"],[1978,1990,\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],0,\"S\"],[1979,1980,\"-\",\"Mar\",\"Sun>=15\",[0,0,0,null],60,\"D\"],[1981,1985,\"-\",\"May\",\"Sun>=5\",[0,0,0,null],60,\"D\"],[1986,1989,\"-\",\"Mar\",\"Sun>=14\",[0,0,0,null],60,\"D\"],[1990,1997,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1991,1995,\"-\",\"Oct\",\"Sun>=8\",[0,0,0,\"s\"],0,\"S\"],[1996,\"only\",\"-\",\"Oct\",\"6\",[0,0,0,\"s\"],0,\"S\"],[1997,\"only\",\"-\",\"Oct\",\"12\",[0,0,0,\"s\"],0,\"S\"],[1998,1999,\"-\",\"Mar\",\"lastSun\",[0,0,0,\"s\"],60,\"D\"],[1998,2003,\"-\",\"Oct\",\"lastSun\",[0,0,0,\"s\"],0,\"S\"],[2000,2004,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,\"s\"],60,\"D\"],[2006,2010,\"-\",\"Oct\",\"lastSun\",[0,0,0,\"s\"],0,\"S\"],[2007,\"only\",\"-\",\"Mar\",\"Sun>=8\",[0,0,0,\"s\"],60,\"D\"],[2008,\"only\",\"-\",\"Mar\",\"Sun>=15\",[0,0,0,\"s\"],60,\"D\"],[2009,2010,\"-\",\"Mar\",\"Sun>=8\",[0,0,0,\"s\"],60,\"D\"],[2011,\"only\",\"-\",\"Mar\",\"Sun>=15\",[0,0,0,\"s\"],60,\"D\"],[2011,\"only\",\"-\",\"Nov\",\"13\",[0,0,0,\"s\"],0,\"S\"],[2012,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,\"s\"],60,\"D\"],[2012,\"max\",\"-\",\"Nov\",\"Sun>=1\",[0,0,0,\"s\"],0,\"S\"],[2013,\"max\",\"-\",\"Mar\",\"Sun>=8\",[0,0,0,\"s\"],60,\"D\"]],\"DR\":[[1966,\"only\",\"-\",\"Oct\",\"30\",[0,0,0,null],60,\"D\"],[1967,\"only\",\"-\",\"Feb\",\"28\",[0,0,0,null],0,\"S\"],[1969,1973,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],30,\"HD\"],[1970,\"only\",\"-\",\"Feb\",\"21\",[0,0,0,null],0,\"S\"],[1971,\"only\",\"-\",\"Jan\",\"20\",[0,0,0,null],0,\"S\"],[1972,1974,\"-\",\"Jan\",\"21\",[0,0,0,null],0,\"S\"]],\"Salv\":[[1987,1988,\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1987,1988,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"S\"]],\"Guat\":[[1973,\"only\",\"-\",\"Nov\",\"25\",[0,0,0,null],60,\"D\"],[1974,\"only\",\"-\",\"Feb\",\"24\",[0,0,0,null],0,\"S\"],[1983,\"only\",\"-\",\"May\",\"21\",[0,0,0,null],60,\"D\"],[1983,\"only\",\"-\",\"Sep\",\"22\",[0,0,0,null],0,\"S\"],[1991,\"only\",\"-\",\"Mar\",\"23\",[0,0,0,null],60,\"D\"],[1991,\"only\",\"-\",\"Sep\",\"7\",[0,0,0,null],0,\"S\"],[2006,\"only\",\"-\",\"Apr\",\"30\",[0,0,0,null],60,\"D\"],[2006,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"S\"]],\"Haiti\":[[1983,\"only\",\"-\",\"May\",\"8\",[0,0,0,null],60,\"D\"],[1984,1987,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],60,\"D\"],[1983,1987,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"S\"],[1988,1997,\"-\",\"Apr\",\"Sun>=1\",[1,0,0,\"s\"],60,\"D\"],[1988,1997,\"-\",\"Oct\",\"lastSun\",[1,0,0,\"s\"],0,\"S\"],[2005,2006,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[2005,2006,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],0,\"S\"],[2012,\"max\",\"-\",\"Mar\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[2012,\"max\",\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],0,\"S\"]],\"Hond\":[[1987,1988,\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[1987,1988,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],0,\"S\"],[2006,\"only\",\"-\",\"May\",\"Sun>=1\",[0,0,0,null],60,\"D\"],[2006,\"only\",\"-\",\"Aug\",\"Mon>=1\",[0,0,0,null],0,\"S\"]],\"Nic\":[[1979,1980,\"-\",\"Mar\",\"Sun>=16\",[0,0,0,null],60,\"D\"],[1979,1980,\"-\",\"Jun\",\"Mon>=23\",[0,0,0,null],0,\"S\"],[2005,\"only\",\"-\",\"Apr\",\"10\",[0,0,0,null],60,\"D\"],[2005,\"only\",\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],0,\"S\"],[2006,\"only\",\"-\",\"Apr\",\"30\",[2,0,0,null],60,\"D\"],[2006,\"only\",\"-\",\"Oct\",\"Sun>=1\",[1,0,0,null],0,\"S\"]],\"TC\":[[1979,1986,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1979,2006,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1987,2006,\"-\",\"Apr\",\"Sun>=1\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Mar\",\"Sun>=8\",[2,0,0,null],60,\"D\"],[2007,\"max\",\"-\",\"Nov\",\"Sun>=1\",[2,0,0,null],0,\"S\"]],\"sol87\":[[1987,\"only\",\"-\",\"Jan\",\"1\",[12,3,20,\"s\"],-3.3333333333333335,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"2\",[12,3,50,\"s\"],-3.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"3\",[12,4,15,\"s\"],-4.25,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"4\",[12,4,45,\"s\"],-4.75,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"5\",[12,5,10,\"s\"],-5.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"6\",[12,5,40,\"s\"],-5.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"7\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"8\",[12,6,30,\"s\"],-6.5,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"9\",[12,6,55,\"s\"],-6.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"10\",[12,7,20,\"s\"],-7.333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"11\",[12,7,45,\"s\"],-7.75,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"12\",[12,8,10,\"s\"],-8.166666666666668,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"13\",[12,8,30,\"s\"],-8.5,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"14\",[12,8,55,\"s\"],-8.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"15\",[12,9,15,\"s\"],-9.25,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"16\",[12,9,35,\"s\"],-9.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"17\",[12,9,55,\"s\"],-9.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"18\",[12,10,15,\"s\"],-10.25,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"19\",[12,10,35,\"s\"],-10.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"20\",[12,10,55,\"s\"],-10.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"21\",[12,11,10,\"s\"],-11.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"22\",[12,11,30,\"s\"],-11.5,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"23\",[12,11,45,\"s\"],-11.75,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"24\",[12,12,0,\"s\"],-12,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"25\",[12,12,15,\"s\"],-12.25,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"26\",[12,12,30,\"s\"],-12.5,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"27\",[12,12,40,\"s\"],-12.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"28\",[12,12,55,\"s\"],-12.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"29\",[12,13,5,\"s\"],-13.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"30\",[12,13,15,\"s\"],-13.25,\"-\"],[1987,\"only\",\"-\",\"Jan\",\"31\",[12,13,25,\"s\"],-13.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"1\",[12,13,35,\"s\"],-13.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"2\",[12,13,40,\"s\"],-13.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"3\",[12,13,50,\"s\"],-13.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"4\",[12,13,55,\"s\"],-13.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"5\",[12,14,0,\"s\"],-14,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"6\",[12,14,5,\"s\"],-14.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"7\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"8\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"9\",[12,14,15,\"s\"],-14.25,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"10\",[12,14,15,\"s\"],-14.25,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"11\",[12,14,15,\"s\"],-14.25,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"12\",[12,14,15,\"s\"],-14.25,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"13\",[12,14,15,\"s\"],-14.25,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"14\",[12,14,15,\"s\"],-14.25,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"15\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"16\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"17\",[12,14,5,\"s\"],-14.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"18\",[12,14,0,\"s\"],-14,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"19\",[12,13,55,\"s\"],-13.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"20\",[12,13,50,\"s\"],-13.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"21\",[12,13,45,\"s\"],-13.75,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"22\",[12,13,35,\"s\"],-13.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"23\",[12,13,30,\"s\"],-13.5,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"24\",[12,13,20,\"s\"],-13.333333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"25\",[12,13,10,\"s\"],-13.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"26\",[12,13,0,\"s\"],-13,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"27\",[12,12,50,\"s\"],-12.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Feb\",\"28\",[12,12,40,\"s\"],-12.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"1\",[12,12,30,\"s\"],-12.5,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"2\",[12,12,20,\"s\"],-12.333333333333334,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"3\",[12,12,5,\"s\"],-12.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"4\",[12,11,55,\"s\"],-11.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"5\",[12,11,40,\"s\"],-11.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"6\",[12,11,25,\"s\"],-11.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"7\",[12,11,15,\"s\"],-11.25,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"8\",[12,11,0,\"s\"],-11,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"9\",[12,10,45,\"s\"],-10.75,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"10\",[12,10,30,\"s\"],-10.5,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"11\",[12,10,15,\"s\"],-10.25,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"12\",[12,9,55,\"s\"],-9.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"13\",[12,9,40,\"s\"],-9.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"14\",[12,9,25,\"s\"],-9.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"15\",[12,9,10,\"s\"],-9.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"16\",[12,8,50,\"s\"],-8.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"17\",[12,8,35,\"s\"],-8.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"18\",[12,8,15,\"s\"],-8.25,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"19\",[12,8,0,\"s\"],-8,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"20\",[12,7,40,\"s\"],-7.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"21\",[12,7,25,\"s\"],-7.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"22\",[12,7,5,\"s\"],-7.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"23\",[12,6,50,\"s\"],-6.833333333333333,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"24\",[12,6,30,\"s\"],-6.5,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"25\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"26\",[12,5,55,\"s\"],-5.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"27\",[12,5,35,\"s\"],-5.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"28\",[12,5,15,\"s\"],-5.25,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"29\",[12,5,0,\"s\"],-5,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"30\",[12,4,40,\"s\"],-4.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Mar\",\"31\",[12,4,25,\"s\"],-4.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"1\",[12,4,5,\"s\"],-4.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"2\",[12,3,45,\"s\"],-3.75,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"3\",[12,3,30,\"s\"],-3.5,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"4\",[12,3,10,\"s\"],-3.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"5\",[12,2,55,\"s\"],-2.9166666666666665,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"6\",[12,2,35,\"s\"],-2.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"7\",[12,2,20,\"s\"],-2.3333333333333335,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"8\",[12,2,5,\"s\"],-2.0833333333333335,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"9\",[12,1,45,\"s\"],-1.75,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"10\",[12,1,30,\"s\"],-1.5,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"11\",[12,1,15,\"s\"],-1.25,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"12\",[12,0,55,\"s\"],-0.9166666666666666,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"13\",[12,0,40,\"s\"],-0.6666666666666666,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"14\",[12,0,25,\"s\"],-0.4166666666666667,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"15\",[12,0,10,\"s\"],-0.16666666666666666,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"16\",[11,59,55,\"s\"],0.08333333333333333,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"17\",[11,59,45,\"s\"],0.25,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"18\",[11,59,30,\"s\"],0.5,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"19\",[11,59,15,\"s\"],0.75,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"20\",[11,59,5,\"s\"],0.9166666666666666,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"21\",[11,58,50,\"s\"],1.1666666666666667,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"22\",[11,58,40,\"s\"],1.3333333333333333,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"23\",[11,58,25,\"s\"],1.5833333333333333,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"24\",[11,58,15,\"s\"],1.75,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"25\",[11,58,5,\"s\"],1.9166666666666667,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"26\",[11,57,55,\"s\"],2.0833333333333335,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"27\",[11,57,45,\"s\"],2.25,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"28\",[11,57,35,\"s\"],2.4166666666666665,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"29\",[11,57,25,\"s\"],2.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"Apr\",\"30\",[11,57,15,\"s\"],2.75,\"-\"],[1987,\"only\",\"-\",\"May\",\"1\",[11,57,10,\"s\"],2.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"2\",[11,57,0,\"s\"],3,\"-\"],[1987,\"only\",\"-\",\"May\",\"3\",[11,56,55,\"s\"],3.0833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"4\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"5\",[11,56,45,\"s\"],3.25,\"-\"],[1987,\"only\",\"-\",\"May\",\"6\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"7\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"8\",[11,56,30,\"s\"],3.5,\"-\"],[1987,\"only\",\"-\",\"May\",\"9\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"10\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"11\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"12\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"13\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"14\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"15\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"16\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"17\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"18\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"19\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"20\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"21\",[11,56,30,\"s\"],3.5,\"-\"],[1987,\"only\",\"-\",\"May\",\"22\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"23\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"24\",[11,56,45,\"s\"],3.25,\"-\"],[1987,\"only\",\"-\",\"May\",\"25\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"May\",\"26\",[11,56,55,\"s\"],3.0833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"27\",[11,57,0,\"s\"],3,\"-\"],[1987,\"only\",\"-\",\"May\",\"28\",[11,57,10,\"s\"],2.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"29\",[11,57,15,\"s\"],2.75,\"-\"],[1987,\"only\",\"-\",\"May\",\"30\",[11,57,25,\"s\"],2.5833333333333335,\"-\"],[1987,\"only\",\"-\",\"May\",\"31\",[11,57,30,\"s\"],2.5,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"1\",[11,57,40,\"s\"],2.3333333333333335,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"2\",[11,57,50,\"s\"],2.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"3\",[11,58,0,\"s\"],2,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"4\",[11,58,10,\"s\"],1.8333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"5\",[11,58,20,\"s\"],1.6666666666666667,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"6\",[11,58,30,\"s\"],1.5,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"7\",[11,58,40,\"s\"],1.3333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"8\",[11,58,50,\"s\"],1.1666666666666667,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"9\",[11,59,5,\"s\"],0.9166666666666666,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"10\",[11,59,15,\"s\"],0.75,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"11\",[11,59,30,\"s\"],0.5,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"12\",[11,59,40,\"s\"],0.3333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"13\",[11,59,50,\"s\"],0.16666666666666666,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"14\",[12,0,5,\"s\"],-0.08333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"15\",[12,0,15,\"s\"],-0.25,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"16\",[12,0,30,\"s\"],-0.5,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"17\",[12,0,45,\"s\"],-0.75,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"18\",[12,0,55,\"s\"],-0.9166666666666666,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"19\",[12,1,10,\"s\"],-1.1666666666666667,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"20\",[12,1,20,\"s\"],-1.3333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"21\",[12,1,35,\"s\"],-1.5833333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"22\",[12,1,50,\"s\"],-1.8333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"23\",[12,2,0,\"s\"],-2,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"24\",[12,2,15,\"s\"],-2.25,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"25\",[12,2,25,\"s\"],-2.4166666666666665,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"26\",[12,2,40,\"s\"],-2.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"27\",[12,2,50,\"s\"],-2.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"28\",[12,3,5,\"s\"],-3.0833333333333335,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"29\",[12,3,15,\"s\"],-3.25,\"-\"],[1987,\"only\",\"-\",\"Jun\",\"30\",[12,3,30,\"s\"],-3.5,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"1\",[12,3,40,\"s\"],-3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"2\",[12,3,50,\"s\"],-3.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"3\",[12,4,5,\"s\"],-4.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"4\",[12,4,15,\"s\"],-4.25,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"5\",[12,4,25,\"s\"],-4.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"6\",[12,4,35,\"s\"],-4.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"7\",[12,4,45,\"s\"],-4.75,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"8\",[12,4,55,\"s\"],-4.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"9\",[12,5,5,\"s\"],-5.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"10\",[12,5,15,\"s\"],-5.25,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"11\",[12,5,20,\"s\"],-5.333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"12\",[12,5,30,\"s\"],-5.5,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"13\",[12,5,40,\"s\"],-5.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"14\",[12,5,45,\"s\"],-5.75,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"15\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"16\",[12,6,0,\"s\"],-6,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"17\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"18\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"19\",[12,6,15,\"s\"],-6.25,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"20\",[12,6,15,\"s\"],-6.25,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"21\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"22\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"23\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"24\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"25\",[12,6,30,\"s\"],-6.5,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"26\",[12,6,30,\"s\"],-6.5,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"27\",[12,6,30,\"s\"],-6.5,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"28\",[12,6,30,\"s\"],-6.5,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"29\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"30\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Jul\",\"31\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"1\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"2\",[12,6,15,\"s\"],-6.25,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"3\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"4\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"5\",[12,6,0,\"s\"],-6,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"6\",[12,5,55,\"s\"],-5.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"7\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"8\",[12,5,40,\"s\"],-5.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"9\",[12,5,35,\"s\"],-5.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"10\",[12,5,25,\"s\"],-5.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"11\",[12,5,15,\"s\"],-5.25,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"12\",[12,5,5,\"s\"],-5.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"13\",[12,4,55,\"s\"],-4.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"14\",[12,4,45,\"s\"],-4.75,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"15\",[12,4,35,\"s\"],-4.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"16\",[12,4,25,\"s\"],-4.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"17\",[12,4,10,\"s\"],-4.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"18\",[12,4,0,\"s\"],-4,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"19\",[12,3,45,\"s\"],-3.75,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"20\",[12,3,30,\"s\"],-3.5,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"21\",[12,3,15,\"s\"],-3.25,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"22\",[12,3,0,\"s\"],-3,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"23\",[12,2,45,\"s\"],-2.75,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"24\",[12,2,30,\"s\"],-2.5,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"25\",[12,2,15,\"s\"],-2.25,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"26\",[12,2,0,\"s\"],-2,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"27\",[12,1,40,\"s\"],-1.6666666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"28\",[12,1,25,\"s\"],-1.4166666666666667,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"29\",[12,1,5,\"s\"],-1.0833333333333333,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"30\",[12,0,50,\"s\"],-0.8333333333333334,\"-\"],[1987,\"only\",\"-\",\"Aug\",\"31\",[12,0,30,\"s\"],-0.5,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"1\",[12,0,10,\"s\"],-0.16666666666666666,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"2\",[11,59,50,\"s\"],0.16666666666666666,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"3\",[11,59,35,\"s\"],0.4166666666666667,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"4\",[11,59,15,\"s\"],0.75,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"5\",[11,58,55,\"s\"],1.0833333333333333,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"6\",[11,58,35,\"s\"],1.4166666666666667,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"7\",[11,58,15,\"s\"],1.75,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"8\",[11,57,55,\"s\"],2.0833333333333335,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"9\",[11,57,30,\"s\"],2.5,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"10\",[11,57,10,\"s\"],2.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"11\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"12\",[11,56,30,\"s\"],3.5,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"13\",[11,56,10,\"s\"],3.8333333333333335,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"14\",[11,55,45,\"s\"],4.25,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"15\",[11,55,25,\"s\"],4.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"16\",[11,55,5,\"s\"],4.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"17\",[11,54,45,\"s\"],5.25,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"18\",[11,54,20,\"s\"],5.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"19\",[11,54,0,\"s\"],6,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"20\",[11,53,40,\"s\"],6.333333333333333,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"21\",[11,53,15,\"s\"],6.75,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"22\",[11,52,55,\"s\"],7.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"23\",[11,52,35,\"s\"],7.416666666666667,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"24\",[11,52,15,\"s\"],7.75,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"25\",[11,51,55,\"s\"],8.083333333333332,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"26\",[11,51,35,\"s\"],8.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"27\",[11,51,10,\"s\"],8.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"28\",[11,50,50,\"s\"],9.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"29\",[11,50,30,\"s\"],9.5,\"-\"],[1987,\"only\",\"-\",\"Sep\",\"30\",[11,50,10,\"s\"],9.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"1\",[11,49,50,\"s\"],10.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"2\",[11,49,35,\"s\"],10.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"3\",[11,49,15,\"s\"],10.75,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"4\",[11,48,55,\"s\"],11.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"5\",[11,48,35,\"s\"],11.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"6\",[11,48,20,\"s\"],11.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"7\",[11,48,0,\"s\"],12,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"8\",[11,47,45,\"s\"],12.25,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"9\",[11,47,25,\"s\"],12.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"10\",[11,47,10,\"s\"],12.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"11\",[11,46,55,\"s\"],13.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"12\",[11,46,40,\"s\"],13.333333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"13\",[11,46,25,\"s\"],13.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"14\",[11,46,10,\"s\"],13.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"15\",[11,45,55,\"s\"],14.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"16\",[11,45,45,\"s\"],14.25,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"17\",[11,45,30,\"s\"],14.5,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"18\",[11,45,20,\"s\"],14.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"19\",[11,45,5,\"s\"],14.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"20\",[11,44,55,\"s\"],15.083333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"21\",[11,44,45,\"s\"],15.25,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"22\",[11,44,35,\"s\"],15.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"23\",[11,44,25,\"s\"],15.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"24\",[11,44,20,\"s\"],15.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"25\",[11,44,10,\"s\"],15.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"26\",[11,44,5,\"s\"],15.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"27\",[11,43,55,\"s\"],16.083333333333336,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"28\",[11,43,50,\"s\"],16.166666666666664,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"29\",[11,43,45,\"s\"],16.25,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"30\",[11,43,45,\"s\"],16.25,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"31\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"1\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"2\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"3\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"4\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"5\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"6\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"7\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"8\",[11,43,45,\"s\"],16.25,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"9\",[11,43,50,\"s\"],16.166666666666664,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"10\",[11,43,55,\"s\"],16.083333333333336,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"11\",[11,44,0,\"s\"],16,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"12\",[11,44,5,\"s\"],15.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"13\",[11,44,15,\"s\"],15.75,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"14\",[11,44,20,\"s\"],15.666666666666666,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"15\",[11,44,30,\"s\"],15.5,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"16\",[11,44,40,\"s\"],15.333333333333334,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"17\",[11,44,50,\"s\"],15.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"18\",[11,45,5,\"s\"],14.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"19\",[11,45,15,\"s\"],14.75,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"20\",[11,45,30,\"s\"],14.5,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"21\",[11,45,45,\"s\"],14.25,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"22\",[11,46,0,\"s\"],14,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"23\",[11,46,15,\"s\"],13.75,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"24\",[11,46,30,\"s\"],13.5,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"25\",[11,46,50,\"s\"],13.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"26\",[11,47,10,\"s\"],12.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"27\",[11,47,25,\"s\"],12.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"28\",[11,47,45,\"s\"],12.25,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"29\",[11,48,5,\"s\"],11.916666666666666,\"-\"],[1987,\"only\",\"-\",\"Nov\",\"30\",[11,48,30,\"s\"],11.5,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"1\",[11,48,50,\"s\"],11.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"2\",[11,49,10,\"s\"],10.833333333333334,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"3\",[11,49,35,\"s\"],10.416666666666666,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"4\",[11,50,0,\"s\"],10,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"5\",[11,50,25,\"s\"],9.583333333333334,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"6\",[11,50,50,\"s\"],9.166666666666666,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"7\",[11,51,15,\"s\"],8.75,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"8\",[11,51,40,\"s\"],8.333333333333334,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"9\",[11,52,5,\"s\"],7.916666666666667,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"10\",[11,52,30,\"s\"],7.5,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"11\",[11,53,0,\"s\"],7,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"12\",[11,53,25,\"s\"],6.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"13\",[11,53,55,\"s\"],6.083333333333333,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"14\",[11,54,25,\"s\"],5.583333333333333,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"15\",[11,54,50,\"s\"],5.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"16\",[11,55,20,\"s\"],4.666666666666667,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"17\",[11,55,50,\"s\"],4.166666666666667,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"18\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"19\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"20\",[11,57,20,\"s\"],2.6666666666666665,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"21\",[11,57,50,\"s\"],2.1666666666666665,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"22\",[11,58,20,\"s\"],1.6666666666666667,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"23\",[11,58,50,\"s\"],1.1666666666666667,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"24\",[11,59,20,\"s\"],0.6666666666666666,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"25\",[11,59,50,\"s\"],0.16666666666666666,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"26\",[12,0,20,\"s\"],-0.3333333333333333,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"27\",[12,0,45,\"s\"],-0.75,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"28\",[12,1,15,\"s\"],-1.25,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"29\",[12,1,45,\"s\"],-1.75,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"30\",[12,2,15,\"s\"],-2.25,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"31\",[12,2,45,\"s\"],-2.75,\"-\"]],\"sol88\":[[1988,\"only\",\"-\",\"Jan\",\"1\",[12,3,15,\"s\"],-3.25,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"2\",[12,3,40,\"s\"],-3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"3\",[12,4,10,\"s\"],-4.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"4\",[12,4,40,\"s\"],-4.666666666666667,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"5\",[12,5,5,\"s\"],-5.083333333333333,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"6\",[12,5,30,\"s\"],-5.5,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"7\",[12,6,0,\"s\"],-6,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"8\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"9\",[12,6,50,\"s\"],-6.833333333333333,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"10\",[12,7,15,\"s\"],-7.25,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"11\",[12,7,40,\"s\"],-7.666666666666667,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"12\",[12,8,5,\"s\"],-8.083333333333332,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"13\",[12,8,25,\"s\"],-8.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"14\",[12,8,50,\"s\"],-8.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"15\",[12,9,10,\"s\"],-9.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"16\",[12,9,30,\"s\"],-9.5,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"17\",[12,9,50,\"s\"],-9.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"18\",[12,10,10,\"s\"],-10.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"19\",[12,10,30,\"s\"],-10.5,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"20\",[12,10,50,\"s\"],-10.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"21\",[12,11,5,\"s\"],-11.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"22\",[12,11,25,\"s\"],-11.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"23\",[12,11,40,\"s\"],-11.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"24\",[12,11,55,\"s\"],-11.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"25\",[12,12,10,\"s\"],-12.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"26\",[12,12,25,\"s\"],-12.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"27\",[12,12,40,\"s\"],-12.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"28\",[12,12,50,\"s\"],-12.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"29\",[12,13,0,\"s\"],-13,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"30\",[12,13,10,\"s\"],-13.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Jan\",\"31\",[12,13,20,\"s\"],-13.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"1\",[12,13,30,\"s\"],-13.5,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"2\",[12,13,40,\"s\"],-13.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"3\",[12,13,45,\"s\"],-13.75,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"4\",[12,13,55,\"s\"],-13.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"5\",[12,14,0,\"s\"],-14,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"6\",[12,14,5,\"s\"],-14.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"7\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"8\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"9\",[12,14,15,\"s\"],-14.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"10\",[12,14,15,\"s\"],-14.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"11\",[12,14,15,\"s\"],-14.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"12\",[12,14,15,\"s\"],-14.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"13\",[12,14,15,\"s\"],-14.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"14\",[12,14,15,\"s\"],-14.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"15\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"16\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"17\",[12,14,5,\"s\"],-14.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"18\",[12,14,0,\"s\"],-14,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"19\",[12,13,55,\"s\"],-13.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"20\",[12,13,50,\"s\"],-13.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"21\",[12,13,45,\"s\"],-13.75,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"22\",[12,13,40,\"s\"],-13.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"23\",[12,13,30,\"s\"],-13.5,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"24\",[12,13,20,\"s\"],-13.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"25\",[12,13,15,\"s\"],-13.25,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"26\",[12,13,5,\"s\"],-13.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"27\",[12,12,55,\"s\"],-12.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"28\",[12,12,45,\"s\"],-12.75,\"-\"],[1988,\"only\",\"-\",\"Feb\",\"29\",[12,12,30,\"s\"],-12.5,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"1\",[12,12,20,\"s\"],-12.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"2\",[12,12,10,\"s\"],-12.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"3\",[12,11,55,\"s\"],-11.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"4\",[12,11,45,\"s\"],-11.75,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"5\",[12,11,30,\"s\"],-11.5,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"6\",[12,11,15,\"s\"],-11.25,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"7\",[12,11,0,\"s\"],-11,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"8\",[12,10,45,\"s\"],-10.75,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"9\",[12,10,30,\"s\"],-10.5,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"10\",[12,10,15,\"s\"],-10.25,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"11\",[12,10,0,\"s\"],-10,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"12\",[12,9,45,\"s\"],-9.75,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"13\",[12,9,30,\"s\"],-9.5,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"14\",[12,9,10,\"s\"],-9.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"15\",[12,8,55,\"s\"],-8.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"16\",[12,8,40,\"s\"],-8.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"17\",[12,8,20,\"s\"],-8.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"18\",[12,8,5,\"s\"],-8.083333333333332,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"19\",[12,7,45,\"s\"],-7.75,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"20\",[12,7,30,\"s\"],-7.5,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"21\",[12,7,10,\"s\"],-7.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"22\",[12,6,50,\"s\"],-6.833333333333333,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"23\",[12,6,35,\"s\"],-6.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"24\",[12,6,15,\"s\"],-6.25,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"25\",[12,6,0,\"s\"],-6,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"26\",[12,5,40,\"s\"],-5.666666666666667,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"27\",[12,5,20,\"s\"],-5.333333333333333,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"28\",[12,5,5,\"s\"],-5.083333333333333,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"29\",[12,4,45,\"s\"],-4.75,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"30\",[12,4,25,\"s\"],-4.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Mar\",\"31\",[12,4,10,\"s\"],-4.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"1\",[12,3,50,\"s\"],-3.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"2\",[12,3,35,\"s\"],-3.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"3\",[12,3,15,\"s\"],-3.25,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"4\",[12,3,0,\"s\"],-3,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"5\",[12,2,40,\"s\"],-2.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"6\",[12,2,25,\"s\"],-2.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"7\",[12,2,5,\"s\"],-2.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"8\",[12,1,50,\"s\"],-1.8333333333333333,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"9\",[12,1,35,\"s\"],-1.5833333333333333,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"10\",[12,1,15,\"s\"],-1.25,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"11\",[12,1,0,\"s\"],-1,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"12\",[12,0,45,\"s\"],-0.75,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"13\",[12,0,30,\"s\"],-0.5,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"14\",[12,0,15,\"s\"],-0.25,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"15\",[12,0,0,\"s\"],0,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"16\",[11,59,45,\"s\"],0.25,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"17\",[11,59,30,\"s\"],0.5,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"18\",[11,59,20,\"s\"],0.6666666666666666,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"19\",[11,59,5,\"s\"],0.9166666666666666,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"20\",[11,58,55,\"s\"],1.0833333333333333,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"21\",[11,58,40,\"s\"],1.3333333333333333,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"22\",[11,58,30,\"s\"],1.5,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"23\",[11,58,15,\"s\"],1.75,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"24\",[11,58,5,\"s\"],1.9166666666666667,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"25\",[11,57,55,\"s\"],2.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"26\",[11,57,45,\"s\"],2.25,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"27\",[11,57,35,\"s\"],2.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"28\",[11,57,30,\"s\"],2.5,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"29\",[11,57,20,\"s\"],2.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"Apr\",\"30\",[11,57,10,\"s\"],2.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"1\",[11,57,5,\"s\"],2.9166666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"2\",[11,56,55,\"s\"],3.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"3\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"4\",[11,56,45,\"s\"],3.25,\"-\"],[1988,\"only\",\"-\",\"May\",\"5\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"6\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"7\",[11,56,30,\"s\"],3.5,\"-\"],[1988,\"only\",\"-\",\"May\",\"8\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"9\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"10\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"11\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"12\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"13\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"14\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"15\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"16\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"17\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"18\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"19\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"20\",[11,56,30,\"s\"],3.5,\"-\"],[1988,\"only\",\"-\",\"May\",\"21\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"22\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"23\",[11,56,45,\"s\"],3.25,\"-\"],[1988,\"only\",\"-\",\"May\",\"24\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"25\",[11,56,55,\"s\"],3.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"May\",\"26\",[11,57,0,\"s\"],3,\"-\"],[1988,\"only\",\"-\",\"May\",\"27\",[11,57,5,\"s\"],2.9166666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"28\",[11,57,15,\"s\"],2.75,\"-\"],[1988,\"only\",\"-\",\"May\",\"29\",[11,57,20,\"s\"],2.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"May\",\"30\",[11,57,30,\"s\"],2.5,\"-\"],[1988,\"only\",\"-\",\"May\",\"31\",[11,57,40,\"s\"],2.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"1\",[11,57,50,\"s\"],2.1666666666666665,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"2\",[11,57,55,\"s\"],2.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"3\",[11,58,5,\"s\"],1.9166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"4\",[11,58,15,\"s\"],1.75,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"5\",[11,58,30,\"s\"],1.5,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"6\",[11,58,40,\"s\"],1.3333333333333333,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"7\",[11,58,50,\"s\"],1.1666666666666667,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"8\",[11,59,0,\"s\"],1,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"9\",[11,59,15,\"s\"],0.75,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"10\",[11,59,25,\"s\"],0.5833333333333334,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"11\",[11,59,35,\"s\"],0.4166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"12\",[11,59,50,\"s\"],0.16666666666666666,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"13\",[12,0,0,\"s\"],0,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"14\",[12,0,15,\"s\"],-0.25,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"15\",[12,0,25,\"s\"],-0.4166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"16\",[12,0,40,\"s\"],-0.6666666666666666,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"17\",[12,0,55,\"s\"],-0.9166666666666666,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"18\",[12,1,5,\"s\"],-1.0833333333333333,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"19\",[12,1,20,\"s\"],-1.3333333333333333,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"20\",[12,1,30,\"s\"],-1.5,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"21\",[12,1,45,\"s\"],-1.75,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"22\",[12,2,0,\"s\"],-2,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"23\",[12,2,10,\"s\"],-2.1666666666666665,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"24\",[12,2,25,\"s\"],-2.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"25\",[12,2,35,\"s\"],-2.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"26\",[12,2,50,\"s\"],-2.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"27\",[12,3,0,\"s\"],-3,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"28\",[12,3,15,\"s\"],-3.25,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"29\",[12,3,25,\"s\"],-3.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"Jun\",\"30\",[12,3,40,\"s\"],-3.6666666666666665,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"1\",[12,3,50,\"s\"],-3.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"2\",[12,4,0,\"s\"],-4,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"3\",[12,4,10,\"s\"],-4.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"4\",[12,4,25,\"s\"],-4.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"5\",[12,4,35,\"s\"],-4.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"6\",[12,4,45,\"s\"],-4.75,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"7\",[12,4,55,\"s\"],-4.916666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"8\",[12,5,5,\"s\"],-5.083333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"9\",[12,5,10,\"s\"],-5.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"10\",[12,5,20,\"s\"],-5.333333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"11\",[12,5,30,\"s\"],-5.5,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"12\",[12,5,35,\"s\"],-5.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"13\",[12,5,45,\"s\"],-5.75,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"14\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"15\",[12,5,55,\"s\"],-5.916666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"16\",[12,6,0,\"s\"],-6,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"17\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"18\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"19\",[12,6,15,\"s\"],-6.25,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"20\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"21\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"22\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"23\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"24\",[12,6,30,\"s\"],-6.5,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"25\",[12,6,30,\"s\"],-6.5,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"26\",[12,6,30,\"s\"],-6.5,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"27\",[12,6,30,\"s\"],-6.5,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"28\",[12,6,30,\"s\"],-6.5,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"29\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"30\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Jul\",\"31\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"1\",[12,6,15,\"s\"],-6.25,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"2\",[12,6,15,\"s\"],-6.25,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"3\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"4\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"5\",[12,5,55,\"s\"],-5.916666666666667,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"6\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"7\",[12,5,45,\"s\"],-5.75,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"8\",[12,5,35,\"s\"],-5.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"9\",[12,5,25,\"s\"],-5.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"10\",[12,5,20,\"s\"],-5.333333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"11\",[12,5,10,\"s\"],-5.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"12\",[12,5,0,\"s\"],-5,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"13\",[12,4,50,\"s\"],-4.833333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"14\",[12,4,35,\"s\"],-4.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"15\",[12,4,25,\"s\"],-4.416666666666667,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"16\",[12,4,15,\"s\"],-4.25,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"17\",[12,4,0,\"s\"],-4,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"18\",[12,3,50,\"s\"],-3.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"19\",[12,3,35,\"s\"],-3.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"20\",[12,3,20,\"s\"],-3.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"21\",[12,3,5,\"s\"],-3.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"22\",[12,2,50,\"s\"],-2.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"23\",[12,2,35,\"s\"],-2.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"24\",[12,2,20,\"s\"],-2.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"25\",[12,2,0,\"s\"],-2,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"26\",[12,1,45,\"s\"],-1.75,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"27\",[12,1,30,\"s\"],-1.5,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"28\",[12,1,10,\"s\"],-1.1666666666666667,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"29\",[12,0,50,\"s\"],-0.8333333333333334,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"30\",[12,0,35,\"s\"],-0.5833333333333334,\"-\"],[1988,\"only\",\"-\",\"Aug\",\"31\",[12,0,15,\"s\"],-0.25,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"1\",[11,59,55,\"s\"],0.08333333333333333,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"2\",[11,59,35,\"s\"],0.4166666666666667,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"3\",[11,59,20,\"s\"],0.6666666666666666,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"4\",[11,59,0,\"s\"],1,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"5\",[11,58,40,\"s\"],1.3333333333333333,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"6\",[11,58,20,\"s\"],1.6666666666666667,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"7\",[11,58,0,\"s\"],2,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"8\",[11,57,35,\"s\"],2.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"9\",[11,57,15,\"s\"],2.75,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"10\",[11,56,55,\"s\"],3.0833333333333335,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"11\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"12\",[11,56,15,\"s\"],3.75,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"13\",[11,55,50,\"s\"],4.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"14\",[11,55,30,\"s\"],4.5,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"15\",[11,55,10,\"s\"],4.833333333333333,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"16\",[11,54,50,\"s\"],5.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"17\",[11,54,25,\"s\"],5.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"18\",[11,54,5,\"s\"],5.916666666666667,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"19\",[11,53,45,\"s\"],6.25,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"20\",[11,53,25,\"s\"],6.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"21\",[11,53,0,\"s\"],7,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"22\",[11,52,40,\"s\"],7.333333333333333,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"23\",[11,52,20,\"s\"],7.666666666666667,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"24\",[11,52,0,\"s\"],8,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"25\",[11,51,40,\"s\"],8.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"26\",[11,51,15,\"s\"],8.75,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"27\",[11,50,55,\"s\"],9.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"28\",[11,50,35,\"s\"],9.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"29\",[11,50,15,\"s\"],9.75,\"-\"],[1988,\"only\",\"-\",\"Sep\",\"30\",[11,49,55,\"s\"],10.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"1\",[11,49,35,\"s\"],10.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"2\",[11,49,20,\"s\"],10.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"3\",[11,49,0,\"s\"],11,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"4\",[11,48,40,\"s\"],11.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"5\",[11,48,25,\"s\"],11.583333333333334,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"6\",[11,48,5,\"s\"],11.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"7\",[11,47,50,\"s\"],12.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"8\",[11,47,30,\"s\"],12.5,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"9\",[11,47,15,\"s\"],12.75,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"10\",[11,47,0,\"s\"],13,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"11\",[11,46,45,\"s\"],13.25,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"12\",[11,46,30,\"s\"],13.5,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"13\",[11,46,15,\"s\"],13.75,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"14\",[11,46,0,\"s\"],14,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"15\",[11,45,45,\"s\"],14.25,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"16\",[11,45,35,\"s\"],14.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"17\",[11,45,20,\"s\"],14.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"18\",[11,45,10,\"s\"],14.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"19\",[11,45,0,\"s\"],15,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"20\",[11,44,45,\"s\"],15.25,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"21\",[11,44,40,\"s\"],15.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"22\",[11,44,30,\"s\"],15.5,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"23\",[11,44,20,\"s\"],15.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"24\",[11,44,10,\"s\"],15.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"25\",[11,44,5,\"s\"],15.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"26\",[11,44,0,\"s\"],16,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"27\",[11,43,55,\"s\"],16.083333333333336,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"28\",[11,43,50,\"s\"],16.166666666666664,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"29\",[11,43,45,\"s\"],16.25,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"30\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"31\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"1\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"2\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"3\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"4\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"5\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"6\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"7\",[11,43,45,\"s\"],16.25,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"8\",[11,43,45,\"s\"],16.25,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"9\",[11,43,50,\"s\"],16.166666666666664,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"10\",[11,44,0,\"s\"],16,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"11\",[11,44,5,\"s\"],15.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"12\",[11,44,10,\"s\"],15.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"13\",[11,44,20,\"s\"],15.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"14\",[11,44,30,\"s\"],15.5,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"15\",[11,44,40,\"s\"],15.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"16\",[11,44,50,\"s\"],15.166666666666666,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"17\",[11,45,0,\"s\"],15,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"18\",[11,45,15,\"s\"],14.75,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"19\",[11,45,25,\"s\"],14.583333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"20\",[11,45,40,\"s\"],14.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"21\",[11,45,55,\"s\"],14.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"22\",[11,46,10,\"s\"],13.833333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"23\",[11,46,30,\"s\"],13.5,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"24\",[11,46,45,\"s\"],13.25,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"25\",[11,47,5,\"s\"],12.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"26\",[11,47,20,\"s\"],12.666666666666666,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"27\",[11,47,40,\"s\"],12.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"28\",[11,48,0,\"s\"],12,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"29\",[11,48,25,\"s\"],11.583333333333334,\"-\"],[1988,\"only\",\"-\",\"Nov\",\"30\",[11,48,45,\"s\"],11.25,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"1\",[11,49,5,\"s\"],10.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"2\",[11,49,30,\"s\"],10.5,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"3\",[11,49,55,\"s\"],10.083333333333334,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"4\",[11,50,15,\"s\"],9.75,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"5\",[11,50,40,\"s\"],9.333333333333334,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"6\",[11,51,5,\"s\"],8.916666666666666,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"7\",[11,51,35,\"s\"],8.416666666666666,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"8\",[11,52,0,\"s\"],8,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"9\",[11,52,25,\"s\"],7.583333333333333,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"10\",[11,52,55,\"s\"],7.083333333333333,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"11\",[11,53,20,\"s\"],6.666666666666667,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"12\",[11,53,50,\"s\"],6.166666666666667,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"13\",[11,54,15,\"s\"],5.75,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"14\",[11,54,45,\"s\"],5.25,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"15\",[11,55,15,\"s\"],4.75,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"16\",[11,55,45,\"s\"],4.25,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"17\",[11,56,15,\"s\"],3.75,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"18\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"19\",[11,57,10,\"s\"],2.8333333333333335,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"20\",[11,57,40,\"s\"],2.3333333333333335,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"21\",[11,58,10,\"s\"],1.8333333333333333,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"22\",[11,58,40,\"s\"],1.3333333333333333,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"23\",[11,59,10,\"s\"],0.8333333333333334,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"24\",[11,59,40,\"s\"],0.3333333333333333,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"25\",[12,0,10,\"s\"],-0.16666666666666666,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"26\",[12,0,40,\"s\"],-0.6666666666666666,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"27\",[12,1,10,\"s\"],-1.1666666666666667,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"28\",[12,1,40,\"s\"],-1.6666666666666667,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"29\",[12,2,10,\"s\"],-2.1666666666666665,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"30\",[12,2,35,\"s\"],-2.5833333333333335,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"31\",[12,3,5,\"s\"],-3.0833333333333335,\"-\"]],\"sol89\":[[1989,\"only\",\"-\",\"Jan\",\"1\",[12,3,35,\"s\"],-3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"2\",[12,4,5,\"s\"],-4.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"3\",[12,4,30,\"s\"],-4.5,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"4\",[12,5,0,\"s\"],-5,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"5\",[12,5,25,\"s\"],-5.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"6\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"7\",[12,6,15,\"s\"],-6.25,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"8\",[12,6,45,\"s\"],-6.75,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"9\",[12,7,10,\"s\"],-7.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"10\",[12,7,35,\"s\"],-7.583333333333333,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"11\",[12,7,55,\"s\"],-7.916666666666667,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"12\",[12,8,20,\"s\"],-8.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"13\",[12,8,45,\"s\"],-8.75,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"14\",[12,9,5,\"s\"],-9.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"15\",[12,9,25,\"s\"],-9.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"16\",[12,9,45,\"s\"],-9.75,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"17\",[12,10,5,\"s\"],-10.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"18\",[12,10,25,\"s\"],-10.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"19\",[12,10,45,\"s\"],-10.75,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"20\",[12,11,5,\"s\"],-11.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"21\",[12,11,20,\"s\"],-11.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"22\",[12,11,35,\"s\"],-11.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"23\",[12,11,55,\"s\"],-11.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"24\",[12,12,10,\"s\"],-12.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"25\",[12,12,20,\"s\"],-12.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"26\",[12,12,35,\"s\"],-12.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"27\",[12,12,50,\"s\"],-12.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"28\",[12,13,0,\"s\"],-13,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"29\",[12,13,10,\"s\"],-13.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"30\",[12,13,20,\"s\"],-13.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Jan\",\"31\",[12,13,30,\"s\"],-13.5,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"1\",[12,13,40,\"s\"],-13.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"2\",[12,13,45,\"s\"],-13.75,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"3\",[12,13,55,\"s\"],-13.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"4\",[12,14,0,\"s\"],-14,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"5\",[12,14,5,\"s\"],-14.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"6\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"7\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"8\",[12,14,15,\"s\"],-14.25,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"9\",[12,14,15,\"s\"],-14.25,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"10\",[12,14,20,\"s\"],-14.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"11\",[12,14,20,\"s\"],-14.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"12\",[12,14,20,\"s\"],-14.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"13\",[12,14,15,\"s\"],-14.25,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"14\",[12,14,15,\"s\"],-14.25,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"15\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"16\",[12,14,10,\"s\"],-14.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"17\",[12,14,5,\"s\"],-14.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"18\",[12,14,0,\"s\"],-14,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"19\",[12,13,55,\"s\"],-13.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"20\",[12,13,50,\"s\"],-13.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"21\",[12,13,40,\"s\"],-13.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"22\",[12,13,35,\"s\"],-13.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"23\",[12,13,25,\"s\"],-13.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"24\",[12,13,15,\"s\"],-13.25,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"25\",[12,13,5,\"s\"],-13.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"26\",[12,12,55,\"s\"],-12.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"27\",[12,12,45,\"s\"],-12.75,\"-\"],[1989,\"only\",\"-\",\"Feb\",\"28\",[12,12,35,\"s\"],-12.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"1\",[12,12,25,\"s\"],-12.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"2\",[12,12,10,\"s\"],-12.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"3\",[12,12,0,\"s\"],-12,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"4\",[12,11,45,\"s\"],-11.75,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"5\",[12,11,35,\"s\"],-11.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"6\",[12,11,20,\"s\"],-11.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"7\",[12,11,5,\"s\"],-11.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"8\",[12,10,50,\"s\"],-10.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"9\",[12,10,35,\"s\"],-10.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"10\",[12,10,20,\"s\"],-10.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"11\",[12,10,5,\"s\"],-10.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"12\",[12,9,50,\"s\"],-9.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"13\",[12,9,30,\"s\"],-9.5,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"14\",[12,9,15,\"s\"],-9.25,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"15\",[12,9,0,\"s\"],-9,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"16\",[12,8,40,\"s\"],-8.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"17\",[12,8,25,\"s\"],-8.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"18\",[12,8,5,\"s\"],-8.083333333333332,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"19\",[12,7,50,\"s\"],-7.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"20\",[12,7,30,\"s\"],-7.5,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"21\",[12,7,15,\"s\"],-7.25,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"22\",[12,6,55,\"s\"],-6.916666666666667,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"23\",[12,6,35,\"s\"],-6.583333333333333,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"24\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"25\",[12,6,0,\"s\"],-6,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"26\",[12,5,40,\"s\"],-5.666666666666667,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"27\",[12,5,25,\"s\"],-5.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"28\",[12,5,5,\"s\"],-5.083333333333333,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"29\",[12,4,50,\"s\"],-4.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"30\",[12,4,30,\"s\"],-4.5,\"-\"],[1989,\"only\",\"-\",\"Mar\",\"31\",[12,4,10,\"s\"],-4.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"1\",[12,3,55,\"s\"],-3.9166666666666665,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"2\",[12,3,35,\"s\"],-3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"3\",[12,3,20,\"s\"],-3.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"4\",[12,3,0,\"s\"],-3,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"5\",[12,2,45,\"s\"],-2.75,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"6\",[12,2,25,\"s\"],-2.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"7\",[12,2,10,\"s\"],-2.1666666666666665,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"8\",[12,1,50,\"s\"],-1.8333333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"9\",[12,1,35,\"s\"],-1.5833333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"10\",[12,1,20,\"s\"],-1.3333333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"11\",[12,1,5,\"s\"],-1.0833333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"12\",[12,0,50,\"s\"],-0.8333333333333334,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"13\",[12,0,35,\"s\"],-0.5833333333333334,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"14\",[12,0,20,\"s\"],-0.3333333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"15\",[12,0,5,\"s\"],-0.08333333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"16\",[11,59,50,\"s\"],0.16666666666666666,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"17\",[11,59,35,\"s\"],0.4166666666666667,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"18\",[11,59,20,\"s\"],0.6666666666666666,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"19\",[11,59,10,\"s\"],0.8333333333333334,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"20\",[11,58,55,\"s\"],1.0833333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"21\",[11,58,45,\"s\"],1.25,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"22\",[11,58,30,\"s\"],1.5,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"23\",[11,58,20,\"s\"],1.6666666666666667,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"24\",[11,58,10,\"s\"],1.8333333333333333,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"25\",[11,58,0,\"s\"],2,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"26\",[11,57,50,\"s\"],2.1666666666666665,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"27\",[11,57,40,\"s\"],2.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"28\",[11,57,30,\"s\"],2.5,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"29\",[11,57,20,\"s\"],2.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"Apr\",\"30\",[11,57,15,\"s\"],2.75,\"-\"],[1989,\"only\",\"-\",\"May\",\"1\",[11,57,5,\"s\"],2.9166666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"2\",[11,57,0,\"s\"],3,\"-\"],[1989,\"only\",\"-\",\"May\",\"3\",[11,56,50,\"s\"],3.1666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"4\",[11,56,45,\"s\"],3.25,\"-\"],[1989,\"only\",\"-\",\"May\",\"5\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"6\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"7\",[11,56,30,\"s\"],3.5,\"-\"],[1989,\"only\",\"-\",\"May\",\"8\",[11,56,30,\"s\"],3.5,\"-\"],[1989,\"only\",\"-\",\"May\",\"9\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"10\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"11\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"12\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"13\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"14\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"15\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"16\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"17\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"18\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"19\",[11,56,25,\"s\"],3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"20\",[11,56,30,\"s\"],3.5,\"-\"],[1989,\"only\",\"-\",\"May\",\"21\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"22\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"23\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"24\",[11,56,45,\"s\"],3.25,\"-\"],[1989,\"only\",\"-\",\"May\",\"25\",[11,56,55,\"s\"],3.0833333333333335,\"-\"],[1989,\"only\",\"-\",\"May\",\"26\",[11,57,0,\"s\"],3,\"-\"],[1989,\"only\",\"-\",\"May\",\"27\",[11,57,5,\"s\"],2.9166666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"28\",[11,57,15,\"s\"],2.75,\"-\"],[1989,\"only\",\"-\",\"May\",\"29\",[11,57,20,\"s\"],2.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"May\",\"30\",[11,57,30,\"s\"],2.5,\"-\"],[1989,\"only\",\"-\",\"May\",\"31\",[11,57,35,\"s\"],2.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"1\",[11,57,45,\"s\"],2.25,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"2\",[11,57,55,\"s\"],2.0833333333333335,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"3\",[11,58,5,\"s\"],1.9166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"4\",[11,58,15,\"s\"],1.75,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"5\",[11,58,25,\"s\"],1.5833333333333333,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"6\",[11,58,35,\"s\"],1.4166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"7\",[11,58,45,\"s\"],1.25,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"8\",[11,59,0,\"s\"],1,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"9\",[11,59,10,\"s\"],0.8333333333333334,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"10\",[11,59,20,\"s\"],0.6666666666666666,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"11\",[11,59,35,\"s\"],0.4166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"12\",[11,59,45,\"s\"],0.25,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"13\",[12,0,0,\"s\"],0,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"14\",[12,0,10,\"s\"],-0.16666666666666666,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"15\",[12,0,25,\"s\"],-0.4166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"16\",[12,0,35,\"s\"],-0.5833333333333334,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"17\",[12,0,50,\"s\"],-0.8333333333333334,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"18\",[12,1,5,\"s\"],-1.0833333333333333,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"19\",[12,1,15,\"s\"],-1.25,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"20\",[12,1,30,\"s\"],-1.5,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"21\",[12,1,40,\"s\"],-1.6666666666666667,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"22\",[12,1,55,\"s\"],-1.9166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"23\",[12,2,10,\"s\"],-2.1666666666666665,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"24\",[12,2,20,\"s\"],-2.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"25\",[12,2,35,\"s\"],-2.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"26\",[12,2,45,\"s\"],-2.75,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"27\",[12,3,0,\"s\"],-3,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"28\",[12,3,10,\"s\"],-3.1666666666666665,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"29\",[12,3,25,\"s\"],-3.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"Jun\",\"30\",[12,3,35,\"s\"],-3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"1\",[12,3,45,\"s\"],-3.75,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"2\",[12,4,0,\"s\"],-4,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"3\",[12,4,10,\"s\"],-4.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"4\",[12,4,20,\"s\"],-4.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"5\",[12,4,30,\"s\"],-4.5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"6\",[12,4,40,\"s\"],-4.666666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"7\",[12,4,50,\"s\"],-4.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"8\",[12,5,0,\"s\"],-5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"9\",[12,5,10,\"s\"],-5.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"10\",[12,5,20,\"s\"],-5.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"11\",[12,5,25,\"s\"],-5.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"12\",[12,5,35,\"s\"],-5.583333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"13\",[12,5,40,\"s\"],-5.666666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"14\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"15\",[12,5,55,\"s\"],-5.916666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"16\",[12,6,0,\"s\"],-6,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"17\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"18\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"19\",[12,6,15,\"s\"],-6.25,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"20\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"21\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"22\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"23\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"24\",[12,6,30,\"s\"],-6.5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"25\",[12,6,30,\"s\"],-6.5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"26\",[12,6,30,\"s\"],-6.5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"27\",[12,6,30,\"s\"],-6.5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"28\",[12,6,30,\"s\"],-6.5,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"29\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"30\",[12,6,25,\"s\"],-6.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Jul\",\"31\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"1\",[12,6,20,\"s\"],-6.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"2\",[12,6,15,\"s\"],-6.25,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"3\",[12,6,10,\"s\"],-6.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"4\",[12,6,5,\"s\"],-6.083333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"5\",[12,6,0,\"s\"],-6,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"6\",[12,5,50,\"s\"],-5.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"7\",[12,5,45,\"s\"],-5.75,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"8\",[12,5,35,\"s\"],-5.583333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"9\",[12,5,30,\"s\"],-5.5,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"10\",[12,5,20,\"s\"],-5.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"11\",[12,5,10,\"s\"],-5.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"12\",[12,5,0,\"s\"],-5,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"13\",[12,4,50,\"s\"],-4.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"14\",[12,4,40,\"s\"],-4.666666666666667,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"15\",[12,4,30,\"s\"],-4.5,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"16\",[12,4,15,\"s\"],-4.25,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"17\",[12,4,5,\"s\"],-4.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"18\",[12,3,50,\"s\"],-3.8333333333333335,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"19\",[12,3,35,\"s\"],-3.5833333333333335,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"20\",[12,3,25,\"s\"],-3.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"21\",[12,3,10,\"s\"],-3.1666666666666665,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"22\",[12,2,55,\"s\"],-2.9166666666666665,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"23\",[12,2,40,\"s\"],-2.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"24\",[12,2,20,\"s\"],-2.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"25\",[12,2,5,\"s\"],-2.0833333333333335,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"26\",[12,1,50,\"s\"],-1.8333333333333333,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"27\",[12,1,30,\"s\"],-1.5,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"28\",[12,1,15,\"s\"],-1.25,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"29\",[12,0,55,\"s\"],-0.9166666666666666,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"30\",[12,0,40,\"s\"],-0.6666666666666666,\"-\"],[1989,\"only\",\"-\",\"Aug\",\"31\",[12,0,20,\"s\"],-0.3333333333333333,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"1\",[12,0,0,\"s\"],0,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"2\",[11,59,45,\"s\"],0.25,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"3\",[11,59,25,\"s\"],0.5833333333333334,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"4\",[11,59,5,\"s\"],0.9166666666666666,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"5\",[11,58,45,\"s\"],1.25,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"6\",[11,58,25,\"s\"],1.5833333333333333,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"7\",[11,58,5,\"s\"],1.9166666666666667,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"8\",[11,57,45,\"s\"],2.25,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"9\",[11,57,20,\"s\"],2.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"10\",[11,57,0,\"s\"],3,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"11\",[11,56,40,\"s\"],3.3333333333333335,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"12\",[11,56,20,\"s\"],3.6666666666666665,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"13\",[11,56,0,\"s\"],4,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"14\",[11,55,35,\"s\"],4.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"15\",[11,55,15,\"s\"],4.75,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"16\",[11,54,55,\"s\"],5.083333333333333,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"17\",[11,54,35,\"s\"],5.416666666666667,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"18\",[11,54,10,\"s\"],5.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"19\",[11,53,50,\"s\"],6.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"20\",[11,53,30,\"s\"],6.5,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"21\",[11,53,10,\"s\"],6.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"22\",[11,52,45,\"s\"],7.25,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"23\",[11,52,25,\"s\"],7.583333333333333,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"24\",[11,52,5,\"s\"],7.916666666666667,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"25\",[11,51,45,\"s\"],8.25,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"26\",[11,51,25,\"s\"],8.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"27\",[11,51,5,\"s\"],8.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"28\",[11,50,40,\"s\"],9.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"29\",[11,50,20,\"s\"],9.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Sep\",\"30\",[11,50,0,\"s\"],10,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"1\",[11,49,45,\"s\"],10.25,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"2\",[11,49,25,\"s\"],10.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"3\",[11,49,5,\"s\"],10.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"4\",[11,48,45,\"s\"],11.25,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"5\",[11,48,30,\"s\"],11.5,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"6\",[11,48,10,\"s\"],11.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"7\",[11,47,50,\"s\"],12.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"8\",[11,47,35,\"s\"],12.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"9\",[11,47,20,\"s\"],12.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"10\",[11,47,0,\"s\"],13,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"11\",[11,46,45,\"s\"],13.25,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"12\",[11,46,30,\"s\"],13.5,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"13\",[11,46,15,\"s\"],13.75,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"14\",[11,46,0,\"s\"],14,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"15\",[11,45,50,\"s\"],14.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"16\",[11,45,35,\"s\"],14.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"17\",[11,45,20,\"s\"],14.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"18\",[11,45,10,\"s\"],14.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"19\",[11,45,0,\"s\"],15,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"20\",[11,44,50,\"s\"],15.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"21\",[11,44,40,\"s\"],15.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"22\",[11,44,30,\"s\"],15.5,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"23\",[11,44,20,\"s\"],15.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"24\",[11,44,10,\"s\"],15.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"25\",[11,44,5,\"s\"],15.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"26\",[11,44,0,\"s\"],16,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"27\",[11,43,50,\"s\"],16.166666666666664,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"28\",[11,43,45,\"s\"],16.25,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"29\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"30\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"31\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"1\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"2\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"3\",[11,43,30,\"s\"],16.5,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"4\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"5\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"6\",[11,43,35,\"s\"],16.416666666666668,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"7\",[11,43,40,\"s\"],16.333333333333336,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"8\",[11,43,45,\"s\"],16.25,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"9\",[11,43,50,\"s\"],16.166666666666664,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"10\",[11,43,55,\"s\"],16.083333333333336,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"11\",[11,44,0,\"s\"],16,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"12\",[11,44,5,\"s\"],15.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"13\",[11,44,15,\"s\"],15.75,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"14\",[11,44,25,\"s\"],15.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"15\",[11,44,35,\"s\"],15.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"16\",[11,44,45,\"s\"],15.25,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"17\",[11,44,55,\"s\"],15.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"18\",[11,45,10,\"s\"],14.833333333333334,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"19\",[11,45,20,\"s\"],14.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"20\",[11,45,35,\"s\"],14.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"21\",[11,45,50,\"s\"],14.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"22\",[11,46,5,\"s\"],13.916666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"23\",[11,46,25,\"s\"],13.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"24\",[11,46,40,\"s\"],13.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"25\",[11,47,0,\"s\"],13,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"26\",[11,47,20,\"s\"],12.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"27\",[11,47,35,\"s\"],12.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"28\",[11,47,55,\"s\"],12.083333333333334,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"29\",[11,48,20,\"s\"],11.666666666666666,\"-\"],[1989,\"only\",\"-\",\"Nov\",\"30\",[11,48,40,\"s\"],11.333333333333334,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"1\",[11,49,0,\"s\"],11,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"2\",[11,49,25,\"s\"],10.583333333333334,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"3\",[11,49,50,\"s\"],10.166666666666666,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"4\",[11,50,15,\"s\"],9.75,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"5\",[11,50,35,\"s\"],9.416666666666666,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"6\",[11,51,0,\"s\"],9,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"7\",[11,51,30,\"s\"],8.5,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"8\",[11,51,55,\"s\"],8.083333333333332,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"9\",[11,52,20,\"s\"],7.666666666666667,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"10\",[11,52,50,\"s\"],7.166666666666667,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"11\",[11,53,15,\"s\"],6.75,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"12\",[11,53,45,\"s\"],6.25,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"13\",[11,54,10,\"s\"],5.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"14\",[11,54,40,\"s\"],5.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"15\",[11,55,10,\"s\"],4.833333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"16\",[11,55,40,\"s\"],4.333333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"17\",[11,56,5,\"s\"],3.9166666666666665,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"18\",[11,56,35,\"s\"],3.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"19\",[11,57,5,\"s\"],2.9166666666666665,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"20\",[11,57,35,\"s\"],2.4166666666666665,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"21\",[11,58,5,\"s\"],1.9166666666666667,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"22\",[11,58,35,\"s\"],1.4166666666666667,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"23\",[11,59,5,\"s\"],0.9166666666666666,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"24\",[11,59,35,\"s\"],0.4166666666666667,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"25\",[12,0,5,\"s\"],-0.08333333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"26\",[12,0,35,\"s\"],-0.5833333333333334,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"27\",[12,1,5,\"s\"],-1.0833333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"28\",[12,1,35,\"s\"],-1.5833333333333333,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"29\",[12,2,0,\"s\"],-2,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"30\",[12,2,30,\"s\"],-2.5,\"-\"],[1989,\"only\",\"-\",\"Dec\",\"31\",[12,3,0,\"s\"],-3,\"-\"]],\"Arg\":[[1930,\"only\",\"-\",\"Dec\",\"1\",[0,0,0,null],60,\"S\"],[1931,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1931,\"only\",\"-\",\"Oct\",\"15\",[0,0,0,null],60,\"S\"],[1932,1940,\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1932,1939,\"-\",\"Nov\",\"1\",[0,0,0,null],60,\"S\"],[1940,\"only\",\"-\",\"Jul\",\"1\",[0,0,0,null],60,\"S\"],[1941,\"only\",\"-\",\"Jun\",\"15\",[0,0,0,null],0,\"-\"],[1941,\"only\",\"-\",\"Oct\",\"15\",[0,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Aug\",\"1\",[0,0,0,null],0,\"-\"],[1943,\"only\",\"-\",\"Oct\",\"15\",[0,0,0,null],60,\"S\"],[1946,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1946,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],60,\"S\"],[1963,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1963,\"only\",\"-\",\"Dec\",\"15\",[0,0,0,null],60,\"S\"],[1964,1966,\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1964,1966,\"-\",\"Oct\",\"15\",[0,0,0,null],60,\"S\"],[1967,\"only\",\"-\",\"Apr\",\"2\",[0,0,0,null],0,\"-\"],[1967,1968,\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1968,1969,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"Jan\",\"23\",[0,0,0,null],60,\"S\"],[1974,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],0,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"1\",[0,0,0,null],60,\"S\"],[1989,1993,\"-\",\"Mar\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[1989,1992,\"-\",\"Oct\",\"Sun>=15\",[0,0,0,null],60,\"S\"],[1999,\"only\",\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[2000,\"only\",\"-\",\"Mar\",\"3\",[0,0,0,null],0,\"-\"],[2007,\"only\",\"-\",\"Dec\",\"30\",[0,0,0,null],60,\"S\"],[2008,2009,\"-\",\"Mar\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2008,\"only\",\"-\",\"Oct\",\"Sun>=15\",[0,0,0,null],60,\"S\"]],\"SanLuis\":[[2008,2009,\"-\",\"Mar\",\"Sun>=8\",[0,0,0,null],0,\"-\"],[2007,2009,\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],60,\"S\"]],\"Brazil\":[[1931,\"only\",\"-\",\"Oct\",\"3\",[11,0,0,null],60,\"S\"],[1932,1933,\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1932,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],60,\"S\"],[1949,1952,\"-\",\"Dec\",\"1\",[0,0,0,null],60,\"S\"],[1950,\"only\",\"-\",\"Apr\",\"16\",[1,0,0,null],0,\"-\"],[1951,1952,\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1953,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1963,\"only\",\"-\",\"Dec\",\"9\",[0,0,0,null],60,\"S\"],[1964,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1965,\"only\",\"-\",\"Jan\",\"31\",[0,0,0,null],60,\"S\"],[1965,\"only\",\"-\",\"Mar\",\"31\",[0,0,0,null],0,\"-\"],[1965,\"only\",\"-\",\"Dec\",\"1\",[0,0,0,null],60,\"S\"],[1966,1968,\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1966,1967,\"-\",\"Nov\",\"1\",[0,0,0,null],60,\"S\"],[1985,\"only\",\"-\",\"Nov\",\"2\",[0,0,0,null],60,\"S\"],[1986,\"only\",\"-\",\"Mar\",\"15\",[0,0,0,null],0,\"-\"],[1986,\"only\",\"-\",\"Oct\",\"25\",[0,0,0,null],60,\"S\"],[1987,\"only\",\"-\",\"Feb\",\"14\",[0,0,0,null],0,\"-\"],[1987,\"only\",\"-\",\"Oct\",\"25\",[0,0,0,null],60,\"S\"],[1988,\"only\",\"-\",\"Feb\",\"7\",[0,0,0,null],0,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"16\",[0,0,0,null],60,\"S\"],[1989,\"only\",\"-\",\"Jan\",\"29\",[0,0,0,null],0,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"15\",[0,0,0,null],60,\"S\"],[1990,\"only\",\"-\",\"Feb\",\"11\",[0,0,0,null],0,\"-\"],[1990,\"only\",\"-\",\"Oct\",\"21\",[0,0,0,null],60,\"S\"],[1991,\"only\",\"-\",\"Feb\",\"17\",[0,0,0,null],0,\"-\"],[1991,\"only\",\"-\",\"Oct\",\"20\",[0,0,0,null],60,\"S\"],[1992,\"only\",\"-\",\"Feb\",\"9\",[0,0,0,null],0,\"-\"],[1992,\"only\",\"-\",\"Oct\",\"25\",[0,0,0,null],60,\"S\"],[1993,\"only\",\"-\",\"Jan\",\"31\",[0,0,0,null],0,\"-\"],[1993,1995,\"-\",\"Oct\",\"Sun>=11\",[0,0,0,null],60,\"S\"],[1994,1995,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[1996,\"only\",\"-\",\"Feb\",\"11\",[0,0,0,null],0,\"-\"],[1996,\"only\",\"-\",\"Oct\",\"6\",[0,0,0,null],60,\"S\"],[1997,\"only\",\"-\",\"Feb\",\"16\",[0,0,0,null],0,\"-\"],[1997,\"only\",\"-\",\"Oct\",\"6\",[0,0,0,null],60,\"S\"],[1998,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1998,\"only\",\"-\",\"Oct\",\"11\",[0,0,0,null],60,\"S\"],[1999,\"only\",\"-\",\"Feb\",\"21\",[0,0,0,null],0,\"-\"],[1999,\"only\",\"-\",\"Oct\",\"3\",[0,0,0,null],60,\"S\"],[2000,\"only\",\"-\",\"Feb\",\"27\",[0,0,0,null],0,\"-\"],[2000,2001,\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],60,\"S\"],[2001,2006,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2002,\"only\",\"-\",\"Nov\",\"3\",[0,0,0,null],60,\"S\"],[2003,\"only\",\"-\",\"Oct\",\"19\",[0,0,0,null],60,\"S\"],[2004,\"only\",\"-\",\"Nov\",\"2\",[0,0,0,null],60,\"S\"],[2005,\"only\",\"-\",\"Oct\",\"16\",[0,0,0,null],60,\"S\"],[2006,\"only\",\"-\",\"Nov\",\"5\",[0,0,0,null],60,\"S\"],[2007,\"only\",\"-\",\"Feb\",\"25\",[0,0,0,null],0,\"-\"],[2007,\"only\",\"-\",\"Oct\",\"Sun>=8\",[0,0,0,null],60,\"S\"],[2008,\"max\",\"-\",\"Oct\",\"Sun>=15\",[0,0,0,null],60,\"S\"],[2008,2011,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2012,\"only\",\"-\",\"Feb\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[2013,2014,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2015,\"only\",\"-\",\"Feb\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[2016,2022,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2023,\"only\",\"-\",\"Feb\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[2024,2025,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2026,\"only\",\"-\",\"Feb\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[2027,2033,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2034,\"only\",\"-\",\"Feb\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[2035,2036,\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"],[2037,\"only\",\"-\",\"Feb\",\"Sun>=22\",[0,0,0,null],0,\"-\"],[2038,\"max\",\"-\",\"Feb\",\"Sun>=15\",[0,0,0,null],0,\"-\"]],\"Chile\":[[1927,1932,\"-\",\"Sep\",\"1\",[0,0,0,null],60,\"S\"],[1928,1932,\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1942,\"only\",\"-\",\"Jun\",\"1\",[4,0,0,\"u\"],0,\"-\"],[1942,\"only\",\"-\",\"Aug\",\"1\",[5,0,0,\"u\"],60,\"S\"],[1946,\"only\",\"-\",\"Jul\",\"15\",[4,0,0,\"u\"],60,\"S\"],[1946,\"only\",\"-\",\"Sep\",\"1\",[3,0,0,\"u\"],0,\"-\"],[1947,\"only\",\"-\",\"Apr\",\"1\",[4,0,0,\"u\"],0,\"-\"],[1968,\"only\",\"-\",\"Nov\",\"3\",[4,0,0,\"u\"],60,\"S\"],[1969,\"only\",\"-\",\"Mar\",\"30\",[3,0,0,\"u\"],0,\"-\"],[1969,\"only\",\"-\",\"Nov\",\"23\",[4,0,0,\"u\"],60,\"S\"],[1970,\"only\",\"-\",\"Mar\",\"29\",[3,0,0,\"u\"],0,\"-\"],[1971,\"only\",\"-\",\"Mar\",\"14\",[3,0,0,\"u\"],0,\"-\"],[1970,1972,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1972,1986,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1973,\"only\",\"-\",\"Sep\",\"30\",[4,0,0,\"u\"],60,\"S\"],[1974,1987,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1987,\"only\",\"-\",\"Apr\",\"12\",[3,0,0,\"u\"],0,\"-\"],[1988,1989,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1988,\"only\",\"-\",\"Oct\",\"Sun>=1\",[4,0,0,\"u\"],60,\"S\"],[1989,\"only\",\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1990,\"only\",\"-\",\"Mar\",\"18\",[3,0,0,\"u\"],0,\"-\"],[1990,\"only\",\"-\",\"Sep\",\"16\",[4,0,0,\"u\"],60,\"S\"],[1991,1996,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1991,1997,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[1997,\"only\",\"-\",\"Mar\",\"30\",[3,0,0,\"u\"],0,\"-\"],[1998,\"only\",\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[1998,\"only\",\"-\",\"Sep\",\"27\",[4,0,0,\"u\"],60,\"S\"],[1999,\"only\",\"-\",\"Apr\",\"4\",[3,0,0,\"u\"],0,\"-\"],[1999,2010,\"-\",\"Oct\",\"Sun>=9\",[4,0,0,\"u\"],60,\"S\"],[2000,2007,\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[2008,\"only\",\"-\",\"Mar\",\"30\",[3,0,0,\"u\"],0,\"-\"],[2009,\"only\",\"-\",\"Mar\",\"Sun>=9\",[3,0,0,\"u\"],0,\"-\"],[2010,\"only\",\"-\",\"Apr\",\"Sun>=1\",[3,0,0,\"u\"],0,\"-\"],[2011,\"only\",\"-\",\"May\",\"Sun>=2\",[3,0,0,\"u\"],0,\"-\"],[2011,\"only\",\"-\",\"Aug\",\"Sun>=16\",[4,0,0,\"u\"],60,\"S\"],[2012,\"max\",\"-\",\"Apr\",\"Sun>=23\",[3,0,0,\"u\"],0,\"-\"],[2012,\"max\",\"-\",\"Sep\",\"Sun>=2\",[4,0,0,\"u\"],60,\"S\"]],\"CO\":[[1992,\"only\",\"-\",\"May\",\"3\",[0,0,0,null],60,\"S\"],[1993,\"only\",\"-\",\"Apr\",\"4\",[0,0,0,null],0,\"-\"]],\"Falk\":[[1937,1938,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],60,\"S\"],[1938,1942,\"-\",\"Mar\",\"Sun>=19\",[0,0,0,null],0,\"-\"],[1939,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],60,\"S\"],[1940,1942,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],0,\"-\"],[1983,\"only\",\"-\",\"Sep\",\"lastSun\",[0,0,0,null],60,\"S\"],[1984,1985,\"-\",\"Apr\",\"lastSun\",[0,0,0,null],0,\"-\"],[1984,\"only\",\"-\",\"Sep\",\"16\",[0,0,0,null],60,\"S\"],[1985,2000,\"-\",\"Sep\",\"Sun>=9\",[0,0,0,null],60,\"S\"],[1986,2000,\"-\",\"Apr\",\"Sun>=16\",[0,0,0,null],0,\"-\"],[2001,2010,\"-\",\"Apr\",\"Sun>=15\",[2,0,0,null],0,\"-\"],[2001,2010,\"-\",\"Sep\",\"Sun>=1\",[2,0,0,null],60,\"S\"]],\"Para\":[[1975,1988,\"-\",\"Oct\",\"1\",[0,0,0,null],60,\"S\"],[1975,1978,\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1979,1991,\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"22\",[0,0,0,null],60,\"S\"],[1990,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],60,\"S\"],[1991,\"only\",\"-\",\"Oct\",\"6\",[0,0,0,null],60,\"S\"],[1992,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1992,\"only\",\"-\",\"Oct\",\"5\",[0,0,0,null],60,\"S\"],[1993,\"only\",\"-\",\"Mar\",\"31\",[0,0,0,null],0,\"-\"],[1993,1995,\"-\",\"Oct\",\"1\",[0,0,0,null],60,\"S\"],[1994,1995,\"-\",\"Feb\",\"lastSun\",[0,0,0,null],0,\"-\"],[1996,\"only\",\"-\",\"Mar\",\"1\",[0,0,0,null],0,\"-\"],[1996,2001,\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1997,\"only\",\"-\",\"Feb\",\"lastSun\",[0,0,0,null],0,\"-\"],[1998,2001,\"-\",\"Mar\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[2002,2004,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[2002,2003,\"-\",\"Sep\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[2004,2009,\"-\",\"Oct\",\"Sun>=15\",[0,0,0,null],60,\"S\"],[2005,2009,\"-\",\"Mar\",\"Sun>=8\",[0,0,0,null],0,\"-\"],[2010,\"max\",\"-\",\"Oct\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[2010,2012,\"-\",\"Apr\",\"Sun>=8\",[0,0,0,null],0,\"-\"],[2013,\"max\",\"-\",\"Mar\",\"Sun>=22\",[0,0,0,null],0,\"-\"]],\"Peru\":[[1938,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],60,\"S\"],[1938,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1938,1939,\"-\",\"Sep\",\"lastSun\",[0,0,0,null],60,\"S\"],[1939,1940,\"-\",\"Mar\",\"Sun>=24\",[0,0,0,null],0,\"-\"],[1986,1987,\"-\",\"Jan\",\"1\",[0,0,0,null],60,\"S\"],[1986,1987,\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1990,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],60,\"S\"],[1990,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1994,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],60,\"S\"],[1994,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"]],\"Uruguay\":[[1923,\"only\",\"-\",\"Oct\",\"2\",[0,0,0,null],30,\"HS\"],[1924,1926,\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1924,1925,\"-\",\"Oct\",\"1\",[0,0,0,null],30,\"HS\"],[1933,1935,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],30,\"HS\"],[1934,1936,\"-\",\"Mar\",\"Sat>=25\",[23,30,0,\"s\"],0,\"-\"],[1936,\"only\",\"-\",\"Nov\",\"1\",[0,0,0,null],30,\"HS\"],[1937,1941,\"-\",\"Mar\",\"lastSun\",[0,0,0,null],0,\"-\"],[1937,1940,\"-\",\"Oct\",\"lastSun\",[0,0,0,null],30,\"HS\"],[1941,\"only\",\"-\",\"Aug\",\"1\",[0,0,0,null],30,\"HS\"],[1942,\"only\",\"-\",\"Jan\",\"1\",[0,0,0,null],0,\"-\"],[1942,\"only\",\"-\",\"Dec\",\"14\",[0,0,0,null],60,\"S\"],[1943,\"only\",\"-\",\"Mar\",\"14\",[0,0,0,null],0,\"-\"],[1959,\"only\",\"-\",\"May\",\"24\",[0,0,0,null],60,\"S\"],[1959,\"only\",\"-\",\"Nov\",\"15\",[0,0,0,null],0,\"-\"],[1960,\"only\",\"-\",\"Jan\",\"17\",[0,0,0,null],60,\"S\"],[1960,\"only\",\"-\",\"Mar\",\"6\",[0,0,0,null],0,\"-\"],[1965,1967,\"-\",\"Apr\",\"Sun>=1\",[0,0,0,null],60,\"S\"],[1965,\"only\",\"-\",\"Sep\",\"26\",[0,0,0,null],0,\"-\"],[1966,1967,\"-\",\"Oct\",\"31\",[0,0,0,null],0,\"-\"],[1968,1970,\"-\",\"May\",\"27\",[0,0,0,null],30,\"HS\"],[1968,1970,\"-\",\"Dec\",\"2\",[0,0,0,null],0,\"-\"],[1972,\"only\",\"-\",\"Apr\",\"24\",[0,0,0,null],60,\"S\"],[1972,\"only\",\"-\",\"Aug\",\"15\",[0,0,0,null],0,\"-\"],[1974,\"only\",\"-\",\"Mar\",\"10\",[0,0,0,null],30,\"HS\"],[1974,\"only\",\"-\",\"Dec\",\"22\",[0,0,0,null],60,\"S\"],[1976,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],0,\"-\"],[1977,\"only\",\"-\",\"Dec\",\"4\",[0,0,0,null],60,\"S\"],[1978,\"only\",\"-\",\"Apr\",\"1\",[0,0,0,null],0,\"-\"],[1979,\"only\",\"-\",\"Oct\",\"1\",[0,0,0,null],60,\"S\"],[1980,\"only\",\"-\",\"May\",\"1\",[0,0,0,null],0,\"-\"],[1987,\"only\",\"-\",\"Dec\",\"14\",[0,0,0,null],60,\"S\"],[1988,\"only\",\"-\",\"Mar\",\"14\",[0,0,0,null],0,\"-\"],[1988,\"only\",\"-\",\"Dec\",\"11\",[0,0,0,null],60,\"S\"],[1989,\"only\",\"-\",\"Mar\",\"12\",[0,0,0,null],0,\"-\"],[1989,\"only\",\"-\",\"Oct\",\"29\",[0,0,0,null],60,\"S\"],[1990,1992,\"-\",\"Mar\",\"Sun>=1\",[0,0,0,null],0,\"-\"],[1990,1991,\"-\",\"Oct\",\"Sun>=21\",[0,0,0,null],60,\"S\"],[1992,\"only\",\"-\",\"Oct\",\"18\",[0,0,0,null],60,\"S\"],[1993,\"only\",\"-\",\"Feb\",\"28\",[0,0,0,null],0,\"-\"],[2004,\"only\",\"-\",\"Sep\",\"19\",[0,0,0,null],60,\"S\"],[2005,\"only\",\"-\",\"Mar\",\"27\",[2,0,0,null],0,\"-\"],[2005,\"only\",\"-\",\"Oct\",\"9\",[2,0,0,null],60,\"S\"],[2006,\"only\",\"-\",\"Mar\",\"12\",[2,0,0,null],0,\"-\"],[2006,\"max\",\"-\",\"Oct\",\"Sun>=1\",[2,0,0,null],60,\"S\"],[2007,\"max\",\"-\",\"Mar\",\"Sun>=8\",[2,0,0,null],0,\"-\"]],\"SystemV\":[[null,1973,\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[null,1973,\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1974,\"only\",\"-\",\"Jan\",\"6\",[2,0,0,null],60,\"D\"],[1974,\"only\",\"-\",\"Nov\",\"lastSun\",[2,0,0,null],0,\"S\"],[1975,\"only\",\"-\",\"Feb\",\"23\",[2,0,0,null],60,\"D\"],[1975,\"only\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"],[1976,\"max\",\"-\",\"Apr\",\"lastSun\",[2,0,0,null],60,\"D\"],[1976,\"max\",\"-\",\"Oct\",\"lastSun\",[2,0,0,null],0,\"S\"]]}}';\n    tz.transport = function() {\n      return json;\n    };\n    tz.loadZoneJSONData(null, true);\n  }\n  // On the server we load timezone data at the TIME\\_ZONE\\_DATA environment variable\n  // or 'lib/vendor/tz.' We use a synchronous file load to avoid race conditions.\n  else {\n    tz.loadingScheme = tz.loadingSchemes.PRELOAD_ALL;\n    tz.zoneFileBasePath = process.env.TIME_ZONE_DATA ||\n      __dirname + '/../../lib/vendor/tz';\n    tz.transport = function(options) {\n      return fs.readFileSync(options.url).toString();\n    };\n    tz.init({async: false});\n  }\n\n  // Duration\n  // --------\n\n  // The `time.Duration` class helps keep track of a span of time.\n  // Create a new instance of the class, then use the result of `duration.end()`\n  // in your logs to get the amount of time elapsed.\n  function Duration() {\n    this.start = time.now();\n  }\n\n  // `end` can return the raw milliseconds elapsed if `render` is set to false.\n  // Otherwise it renders that milliseconds number with `time.renderTimespan`.\n  Duration.prototype.end = function(render) {\n    if (typeof render === 'undefined') {\n      render = true;\n    }\n    this.end = time.now();\n    this.result = this.end.getTime() - this.start.getTime();\n\n    if (!render) {\n      return this.result;\n    }\n    return time.renderTimespan(this.result, true);\n  };\n\n  var time = {\n    moment: moment,\n    timezonejs: timezonejs,\n    Duration: Duration,\n\n    // Date Formatting\n    // --------\n\n    /*\n    `easyLong` produces strings like 'Friday July 26 at 8:15am', or\n    'Friday July 26 2012 at 8:15am' if the year is different from\n    the current year.\n\n    If you pass in a `timezone`, the `date` passed\n    in is assumed to be in the _default timezone_.\n    */\n    easyLong: function(timezone, date) {\n      var now = time.now();\n      if (!date) {\n        date = time.now();\n      }\n      if (timezone) {\n        date = time.toTimezone(date, timezone);\n        now = time.toTimezone(now, timezone);\n      }\n      if (date.getFullYear() === now.getFullYear()) {\n        return moment(date).format('dddd MMM D [at] h:mma');\n      }\n      else {\n        return moment(date).format('dddd MMM D YYYY [at] h:mma');\n      }\n    },\n\n    /*\n    `shortDate` produces strings like 'July 1' or 'July 1 2012' if\n    the year is different from the current year.\n\n    If you pass in a `timezone`, the `date` passed\n    in is assumed to be in the _default timezone_.\n    */\n    shortDate: function(timezone, date) {\n      var now = time.now();\n      if (!date) {\n        date = time.now();\n      }\n      if (timezone) {\n        date = time.toTimezone(date, timezone);\n        now = time.toTimezone(now, timezone);\n      }\n      if (date.getFullYear() === now.getFullYear()) {\n        return moment(date).format('MMM D');\n      }\n      else {\n        return moment(date).format('MMM D YYYY');\n      }\n    },\n\n    /*\n    `dayOfWeek` produces the full, capitalized day of the week.\n\n    If you pass in a `timezone`, the `date` passed\n    in is assumed to be in the _default timezone_.\n    */\n    dayOfWeek: function(timezone, date) {\n      if (!date) {\n        date = time.now();\n      }\n      if (timezone) {\n        date = time.toTimezone(date, timezone);\n      }\n      return moment(date).format('dddd');\n    },\n\n    /*\n    `parse` tries to generate a date from the provided `text`, `timezone`\n    and `now` (base time). 'today', 'tomorrow' and 'yesterday' are accepted, and fully\n    qualified dates are supported [by Moment](http://momentjs.com/docs/#/parsing/string/).\n    If the date cannot be parsed, this method will return `null`.\n\n    If you pass in a `timezone`, the returned date will in the _default timezone_.\n    */\n    parse: function(text, timezone, now) {\n      if (!now) {\n        now = time.now();\n      }\n\n      if (text.toLowerCase() === 'today') {\n        return now;\n      }\n      else if (text.toLowerCase() === 'tomorrow') {\n        return new Date(now.getTime() + time.DAY_IN_MIL);\n      }\n      else if (text.toLowerCase() === 'yesterday') {\n        return new Date(now.getTime() - time.DAY_IN_MIL);\n      }\n\n      var momentParsed = moment(text);\n      if (momentParsed.isValid()) {\n        var result = momentParsed.toDate();\n        if (timezone) {\n          result = time.fromTimezone(result, timezone);\n        }\n        return result;\n      }\n      else {\n        return null;\n      }\n    },\n\n    // `englishTimespan` produces an easily human-readable phrase describing the amount\n    // of time described by `mil` milliseconds. It produces basic strings like\n    // \"30 seconds\" or \"2 hours\", never including anything but the biggest unit.\n    // The next step after \"1 hour\" is \"2 hours\", nothing in between.\n    englishTimespan: function(mil) {\n      if (mil < time.SECOND_IN_MIL) {\n        return 'now';\n      }\n\n      var steps = [\n        {divisor: time.SECOND_IN_MIL, single: 'second', plural: 'seconds'},\n        {divisor: time.MINUTE_IN_MIL, single: 'minute', plural: 'minutes'},\n        {divisor: time.HOUR_IN_MIL, single: 'hour', plural: 'hours'},\n        {divisor: time.DAY_IN_MIL, single: 'day', plural: 'days'},\n        {divisor: time.WEEK_IN_MIL, single: 'week', plural: 'weeks'},\n        {divisor: time.MONTH_IN_MIL, single: 'month', plural: 'months'},\n        {divisor: time.DAY_IN_MIL * 365, single: 'year', plural: 'years'}\n      ];\n\n      var index = 0;\n      var step = function () {\n        var units = Math.floor(mil / steps[index].divisor);\n        var next = Math.floor(mil / steps[index + 1].divisor);\n\n        if (next > 0) {\n          index = index + 1;\n          return step();\n        }\n        else {\n          return string.pluralize(units, steps[index].single, steps[index].plural);\n        }\n      };\n\n      return step();\n    },\n\n    // `renderTimespan` formats `mil` milliseconds as a human-readable\n    // time string, like \":02.031\" (two seconds and 31 milliseconds)\n    // or \"4:00\" (four minutes). Milliseconds will not be shown unless\n    // `withMil` is truthy and the timespan is under one minute.\n    renderTimespan: function(mil, withMil) {\n      var result = '';\n\n      var hours = Math.floor(mil / time.HOUR_IN_MIL);\n      if (hours > 0) {\n        result += hours;\n        result += ':';\n      }\n\n      mil -= time.HOUR_IN_MIL * hours;\n\n      var minutes = Math.floor(mil / time.MINUTE_IN_MIL);\n      if (hours > 0) {\n        result += time.addPadding(minutes, 2);\n      } else if (minutes > 0) {\n        result += minutes;\n      }\n      mil -= time.MINUTE_IN_MIL * minutes;\n\n      var seconds = Math.floor(mil / time.SECOND_IN_MIL);\n      result += ':';\n      result += time.addPadding(seconds, 2);\n\n      if (withMil && hours === 0 && minutes === 0) {\n        mil -= time.SECOND_IN_MIL * seconds;\n        result += '.';\n        result += time.addPadding(mil, 3);\n      }\n\n      return result;\n    },\n\n    // Timezone Manipulation\n    // --------\n\n    // `toTimezone` takes a `date` and a `timezone`, converting the provided date\n    // to the new timezone from the _default timezone_. Useful in rendering times\n    // in the user's timezone on a server.\n    toTimezone: function(date, timezone) {\n      var source = new timezonejs.Date(date.getTime());\n      var target = new timezonejs.Date(date.getTime(), timezone);\n      return new Date(date.getTime() +\n        (source.getTimezoneOffset() - target.getTimezoneOffset()) * time.MINUTE_IN_MIL);\n    },\n\n    // `fromTimezone` takes a `date` and a `timezone`, converting the provided\n    // date to the _default timezone_, assuming that `date` was previously in\n    // the provided `timezone`.\n    fromTimezone: function(date, timezone) {\n      var source = new timezonejs.Date(date.getTime(), timezone);\n      var target = new timezonejs.Date(date.getTime());\n      return new Date(date.getTime() -\n        (target.getTimezoneOffset() - source.getTimezoneOffset()) * time.MINUTE_IN_MIL);\n    },\n\n    // `timezoneAwareDate` is a wrapper around the instantiation of a new\n    // `timezoneJS.Date`.\n    timezoneAwareDate: function(date, timezone) {\n      return new timezonejs.Date(date.getTime(), timezone);\n    },\n\n    /*\n    `getTimezone` looks up the current timezone. Because timezonejs doesn't\n    have a reverse timezone lookup function, we set up a reverse lookup table\n    first:\n\n    _TODO: Build this reverse lookup table from timezone data itself._\n    */\n    getTimezone: function() {\n      if (!time.timezoneLookup) {\n        var t = {};\n        t[-11] = ['Pacific/Pago_Pago'];\n        t[-10] = ['US/Hawaii', 'US/Aleutian'];\n        t[-9] = ['US/Aleutian', 'Pacific/Gambier', 'US/Alaska'];\n        t[-8] = ['US/Pacific', 'US/Alaska', 'Pacific/Pitcairn'];\n        t[-7] = ['US/Mountain', 'US/Pacific', 'US/Arizona'];\n        t[-6] = ['US/Central', 'US/Mountain', 'America/Costa_Rica'];\n        t[-5] = ['US/Eastern', 'US/Central', 'EST'];\n        t[-4] = ['US/Eastern', 'Brazil/West', 'Canada/Atlantic'];\n        t[-3] = ['Canada/Atlantic', 'Atlantic/Stanley', 'Brazil/East'];\n        t[-2] = ['Brazil/East', 'America/Noronha'];\n        t[-1] = ['Atlantic/Cape_Verde', 'Atlantic/Azores'];\n        t[0] = ['Europe/London', 'UTC', 'Atlantic/Azores'];\n        t[1] = ['Europe/London', 'Europe/Rome', 'Africa/Algiers'];\n        t[2] = ['Europe/Rome', 'Africa/Cairo', 'Europe/Istanbul'];\n        t[3] = ['Europe/Istanbul', 'Africa/Asmara'];\n        t[4] = ['Asia/Dubai', 'Asia/Baku'];\n        t[5] = ['Asia/Baku', 'Indian/Maldives'];\n        t[6] = ['Asia/Almaty'];\n        t[7] = ['Asia/Bangkok'];\n        t[8] = ['Australia/West'];\n        t[9] = ['Asia/Tokyo'];\n        t[10] = ['Australia/Sydney', 'Pacific/Guam'];\n        t[11] = ['Australia/Sydney', 'Asia/Vladivostok'];\n        t[12] = ['Pacific/Auckland', 'Asia/Kamchatka'];\n        t[13] = ['Pacific/Auckland', 'Pacific/Enderbury'];\n        t[14] = ['Pacific/Kiritimati'];\n\n        time.timezoneLookup = t;\n      }\n\n      // Then we go through the potential timezones, changing the current\n      // date to that timezone to see if it is changed. If it didn't change,\n      // it'll work!\n      var date = new Date();\n      var tzDate = new timezonejs.Date(date);\n      var offsetHours = -(tzDate.getTimezoneOffset() / 60);\n      var timezones = time.timezoneLookup[offsetHours];\n\n      for (var i = 0; i < timezones.length; i += 1) {\n        var z = timezones[i];\n        var offsetDate = time.toTimezone(date, z);\n\n        if (offsetDate.getTime() === date.getTime()) {\n          return z;\n        }\n      }\n      return null;\n    },\n\n    // Date Manipulation\n    // --------\n\n    // `now` returns the current time. Mostly useful to allow for dependency\n    // injection while unit testing.\n    now: function() {\n      return new Date();\n    },\n\n    // `offset` just adds `milliseconds` to either the `date` you provide\n    // or the current date, and returns a new `Date` object.\n    offset: function(milliseconds, date) {\n      if (!date) {\n        date = time.now();\n      }\n      var millis = date.getTime() + milliseconds;\n      return new Date(millis);\n    },\n\n    // `nextDay` looks for the next instance of `day`, where day is something like\n    // 'Monday.' You can set the start `date` for the search; otherwise it will use the\n    // current time. `timezone` is required to ensure our determination of the day is\n    // correct in the user's timezone.\n    nextDay: function(day, timezone, date) {\n      return this.searchDay(1, day, timezone, date);\n    },\n\n    // `lastDay` is exactly like `nextDay`; it just searches in the opposite direction.\n    lastDay: function(day, timezone, date) {\n      return this.searchDay(-1, day, timezone, date);\n    },\n\n    /*\n    `searchDay` does the day searching for `nextDay` and `lastDay`.\n\n    _TODO: Think about doing this without basic iteration. Could do it with\n    math and indices._\n    */\n    searchDay: function(direction, day, timezone, date) {\n      /*jshint maxcomplexity: 8 */\n\n      if (!time.daysLookup) {\n        time.daysLookup = {\n          sunday: 0,\n          monday: 1,\n          tuesday: 2,\n          wednesday: 3,\n          thursday: 4,\n          friday: 5,\n          saturday: 6\n        };\n      }\n\n      if (!date) {\n        date = time.now();\n      }\n      if (timezone) {\n        date = new timezonejs.Date(date.getTime(), timezone);\n      }\n\n      var index = time.daysLookup[day.toLowerCase()];\n      if (!index && index !== 0) {\n        return null;\n      }\n\n      while (date.getDay() !== index) {\n        date = time.offset(direction * time.DAY_IN_MIL, date);\n        if (timezone) {\n          date = new timezonejs.Date(date.getTime(), timezone);\n        }\n      }\n      if (timezone) {\n        date = new Date(date.getTime());\n      }\n\n      return date;\n    },\n\n    // `toMidnight` returns midnight of the day provided, in the target\n    // `timezone`. `date` is optional, but assumed to be in the _default\n    // timezone_ if provided.\n    toMidnight: function(timezone, date) {\n      return time.toHour(0, timezone, date);\n    },\n\n    // `toHour` truncates the current time or `date` at hour `hour` in the\n    // provided `timezone`. `date` is optional, but assumed to be in the _default\n    // timezone_ if provided.\n    toHour: function(hour, timezone, date) {\n      if (!date) {\n        date = time.now();\n      }\n\n      date = time.timezoneAwareDate(date, timezone);\n      date = new timezonejs.Date(\n        date.getFullYear(), date.getMonth(), date.getDate(), hour, timezone\n      );\n      return new Date(date.getTime());\n    },\n\n    // `toFirstOfMonth` returns the date of the first of the current month\n    // for now or the provided `date`.`date` is optional, but assumed to be\n    // in the _default timezone_ if provided.\n    toFirstOfMonth: function(timezone, date) {\n      if (!date) {\n        date = time.now();\n      }\n      date = time.timezoneAwareDate(date, timezone);\n      date = new timezonejs.Date(date.getFullYear(), date.getMonth(), 1, timezone);\n\n      return new Date(date.getTime());\n    },\n\n    // `isLastDayOfMonth` tells you whether it's the last of the current month\n    // for now or the provided `date`.`date` is optional, but assumed to be in\n    // the _default timezone_ if provided.\n    isLastDayOfMonth: function(timezone, date) {\n      if (!date) {\n        date = time.now();\n      }\n\n      var nextDay = new Date(date.valueOf() + time.DAY_IN_MIL);\n      nextDay = time.timezoneAwareDate(nextDay, timezone);\n      return nextDay.getDate() === 1;\n    },\n\n    // Other\n    // --------\n\n    /*\n    `addPadding` takes an integer and a number of `digits`, adding leading\n    zeros to the string until it gets to the desired length.\n\n    _TODO: Doesn't currently handle negative numbers_\n    */\n    addPadding: function(number, digits) {\n      var result = parseInt(number, 10).toString();\n      if (result.length >= digits) {\n        return result;\n      }\n      for (var i = result.length + 1; i <= digits; i += 1) {\n        result = '0' + result;\n      }\n      return result;\n    }\n  };\n\n  // Useful constants\n  time.SECOND_IN_MIL = 1000;\n  time.MINUTE_IN_MIL = time.SECOND_IN_MIL * 60;\n  time.HOUR_IN_MIL = time.MINUTE_IN_MIL * 60;\n  time.DAY_IN_MIL = time.HOUR_IN_MIL * 24;\n  time.WEEK_IN_MIL = time.DAY_IN_MIL * 7;\n  time.MONTH_IN_MIL = time.DAY_IN_MIL * 30;\n  time.YEAR_IN_MIL = time.DAY_IN_MIL * 365;\n\n  return time;\n});\n\n","// # thehelp-core\n// This file pulls in color, general, string and time for the client side.\n\n// [RequireJS](http://requirejs.org/) boilerplate, dependencies and\n// [strict mode](http://mzl.la/1fRhnam)\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module);\n}\n\ndefine('thehelp-core',[\n  'src/both/color',\n  'src/both/general',\n  'src/both/string',\n  'src/both/time'\n],\n  function(\n    color,\n    general,\n    string,\n    time\n  ) {\n\n  'use strict';\n\n  return {\n    color: color,\n    general: general,\n    string: string,\n    time: time\n  };\n\n});\n\n"]}